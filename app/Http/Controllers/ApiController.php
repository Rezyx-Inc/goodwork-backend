<?php

namespace App\Http\Controllers;

use Carbon\Carbon;
use App\Models\User;
use App\Models\Keyword;
use App\Models\Nurse;
use App\Models\Availability;
use App\Models\Certification;
use App\Models\Experience;
use App\Models\Job;
use App\Models\Notification;
use App\Enums\Role;
use App\Enums\State;
use App\Models\Offer;
use App\Models\NurseAsset;
use App\Models\NurseReference;
use App\Models\Follows;
use App\Models\FacilityFollows;
use App\Models\Facility;
use App\Models\FacilityRating;
use App\Models\States;
use App\Models\Cities;
use App\Models\JobAsset;
use App\Models\JobOffer;
use App\Models\NurseRating;
use App\Models\EmailTemplate;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Providers\AppServiceProvider;
use Exception;
use Twilio\Rest\Client;
use Session;
use Stripe\Stripe;
use Stripe\Charge;
use Stripe\Account;
use Stripe\Payout;
use Stripe\PaymentIntent;

use DB;

class ApiController extends Controller
{
    /**
     * Class constructor.
     */
    private $check;
    private $message;
    private $return_data;

    use SendsPasswordResetEmails;

    public function __construct()
    {
        $this->check = "0";
        $this->return_data = (object) array();
        $this->message = "User data";
        $this->param_missing = "Required parameters not found";
        $this->invalid_request  = "Invalid request method";
    }

    public function generate_token()
    {
        return hash_hmac('sha256', Str::random(40) . time(), config('app.key'));
    }


    // we can use 

    public function timeAgo($time = NULL)
    {
        // Calculate difference between current
        // time and given timestamp in seconds
        $diff     = time() - $time;
        // Time difference in seconds
        $sec     = $diff;
        // Convert time difference in minutes
        $min     = round($diff / 60);
        // Convert time difference in hours
        $hrs     = round($diff / 3600);
        // Convert time difference in days
        $days     = round($diff / 86400);
        // Convert time difference in weeks
        $weeks     = round($diff / 604800);
        // Convert time difference in months
        $mnths     = round($diff / 2600640);
        // Convert time difference in years
        $yrs     = round($diff / 31207680);
        // Check for seconds
        if ($sec <= 60) {
            $string = "$sec seconds ago";
        }
        // Check for minutes
        else if ($min <= 60) {
            if ($min == 1) {
                $string = "one minute ago";
            } else {
                $string = "$min minutes ago";
            }
        }
        // Check for hours
        else if ($hrs <= 24) {
            if ($hrs == 1) {
                $string = "an hour ago";
            } else {
                $string = "$hrs hours ago";
            }
        }
        // Check for days
        else if ($days <= 7) {
            if ($days == 1) {
                $string = "Yesterday";
            } else {
                $string = "$days days ago";
            }
        }
        // Check for weeks
        else if ($weeks <= 4.3) {
            if ($weeks == 1) {
                $string = "a week ago";
            } else {
                $string = "$weeks weeks ago";
            }
        }
        // Check for months
        else if ($mnths <= 12) {
            if ($mnths == 1) {
                $string = "a month ago";
            } else {
                $string = "$mnths months ago";
            }
        }
        // Check for years
        else {
            if ($yrs == 1) {
                $string = "one year ago";
            } else {
                $string = "$yrs years ago";
            }
        }
        return $string;
    }

    public function getSpecialities()
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $spl = [];
        if (!empty($specialties)) {
            foreach ($specialties as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Specialities has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getSpecialitiesByProfession(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'profession_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $id = $request->profession_id;
            $keywords = Keyword::where(['active' => true, 'filter' => $id])->get()->pluck('title', 'id');
            
            $data = [];
            foreach ($keywords as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Specialities has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getSettingType(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $keywords = Keyword::where('filter', 'SettingType')->get()->pluck('title', 'id');
            $data = [];
            foreach ($keywords as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Setting Types has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getContractTerminologyPolicy(Request $request)
    {
        $keywords = Keyword::where('filter', 'ContractTerminationPolicy')->get()->pluck('title', 'id');
        $data = [];
        foreach ($keywords as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Contract Terminology Policy has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getStateLicense()
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $spl = [];
        if (!empty($specialties)) {
            foreach ($specialties as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Specialities has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getChartingSystem()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Charting')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Charting System has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getProfessionList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Profession')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Profession List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getSkillList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Skills')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Profession List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getType()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Type')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "clinical List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getVMSType()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'VMS')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "VMS List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getMSPType()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'MSP')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "MSP List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getDentalList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Dental')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Dental List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getVisionList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Vision')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Vision List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getHealthInsuranceList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'HealthInsurance')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Health Insurance List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getHowMuchKList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', '401k')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "401k List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getTermsList()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'Terms')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Terms List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getShiftTimeOfDay()
    {
        $controller = new Controller();
        $charting = Keyword::where('filter', 'shift_time_of_day')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Shift Time Of Day List has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }
 
    public function getGeographicPreferences()
    {
        $controller = new Controller();
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $work_location = [];
        if (!empty($workLocations)) {
            foreach ($workLocations as $key => $val) {
                $work_location[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Work location's has been listed successfully";
        $this->return_data = $work_location;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function stateList()
    {
        /* $this->return_data = $this->getStateOptions(); */
        $ret = [];
        foreach (State::getKeys() as $key => $value) {
            $ret[]['state'] = $value;
        }
       
        $this->check = "1";
        $this->message = "State's has been listed successfully";
        $this->return_data = $ret;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function shiftDuration()
    {
        $shifts = $this->getShifts()->pluck('title', 'id');
        $this->check = "1";
        $this->message = "Shift duration has been listed successfully";
        $data = [];
        foreach ($shifts as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        asort($data);
        $data1 = [];
        foreach ($data as $key1 => $value1) {
            $data1[] = ['id' => $value1['id'], "name" => $value1['name']];
        }

        $this->return_data = $data1;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function assignmentDurations()
    {
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        // $assignmentDurations = Keyword::where('filter', 'AssignmentDuration')->get()->pluck('title', 'id');
        $data = [];
        foreach ($assignmentDurations as $key => $value) {
            // $name = explode(" ",$value);
            $data[] = ['id' => $key, "name" => $value];
            // $data[] = ['id' => $key, "name" => $name[0]];
        }
        $this->check = "1";
        $this->message = "Assignment duration's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function preferredShifts()
    {
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $data = [];
        foreach ($preferredShifts as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Preferred shift's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getWeekDay()
    {
        $weekDays = $this->getWeekDayOptions();
        $data = [];
        foreach ($weekDays as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Week day's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function login(Request $request)
    {
        if (isset($request->email) && $request->email != "" && isset($request->password) && $request->password != "" && isset($request->fcm_token) && $request->fcm_token != "") {
            if (Auth::attempt(['email' => $request->email, 'password' => $request->password, 'active' => true])) {
                $return_data = [];
                $user_data = User::where('email', '=', $request->email)->get()->first();
                if (!empty($user_data) && $user_data != null) {
                    $user_data->fcm_token = $request->fcm_token;
                    if ($user_data->update()) {
                        $user = User::where('id', '=', $user_data->id)->get()->first();
                        if (isset($user->role) && $user->role == "NURSE") {
                            $return_data = $this->profileCompletionFlagStatus($type = "login", $user);
                        } else {
                            $return_data = $this->facilityProfileCompletionFlagStatus($type = "login", $user);
                        }
                        $this->check = "1";
                        $this->message = "Logged in successfully";
                    } else $this->message = "Problem occurred while updating the token, Please try again later";
                } else $this->message = "User record not found";

                $this->return_data = $return_data;
            } else {
                $this->message = "Invalid email or password";
            }
        } else {
            $this->message = $this->param_missing;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function sendResetLinkEmail(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'email' => 'required|email',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            // We will send the password reset link to this user. Once we have attempted
            // to send the link, we will examine the response then see the message we
            // need to show to the user. Finally, we'll send out a proper response.

            $check_user = User::where(['email' => $request->email]);
            if ($check_user->count() > 0) {
                $user = $check_user->first();

                $temp = EmailTemplate::where(['slug' => 'nurse_reset_password']);
                if ($temp->count() > 0) {
                    $t = $temp->first();
                    $data = [
                        'to_email' => $user->email,
                        'to_name' => $user->first_name . ' ' . $user->last_name
                    ];
                    $token = $this->generate_token();
                    $replace_array = ['###RESETLINK###' => url('password/reset', $token)];
                    $this->basic_email($template = "nurse_reset_password", $data, $replace_array);
                }
                $this->check = "1";
                $this->message = "Reset password link sent successfully";
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function register(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'email' => 'required|unique:users,email',
            'api_key' => 'required',
            'mobile' => 'required|unique:users,mobile'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if (
                isset($request->api_key) && $request->api_key != "" &&
                isset($request->first_name) && $request->first_name != "" &&
                isset($request->last_name) && $request->last_name != "" &&
                isset($request->email) && $request->email != "" &&
                isset($request->mobile) && $request->mobile != "" &&
                isset($request->fcm_token) && $request->fcm_token != ""
            ) {
                
                $user_data = User::where('email', '=', $request->email)->first();
                if ($user_data === null) {
                    $user = User::create([
                        'first_name' => $request->first_name,
                        'last_name' => $request->last_name,
                        'mobile' => $request->mobile,
                        'email' => $request->email,
                        'user_name' => $request->email,
                        // 'password' => Hash::make($request->password),
                        'role' => Role::getKey(Role::NURSE),
                        'fcm_token' => $request->fcm_token
                    ]);
    
                    $nurse = Nurse::create([
                        'user_id' => $user->id,
                        'worker_goodwork_number' => uniqid()
                    ]);
                    $availability = Availability::create([
                        'nurse_id' => $nurse->id,
                        // 'work_location' => $request->work_location,
                    ]);
                    $user->assignRole('Nurse');
    
                    $reg_user = User::where('email', '=', $request->email)->get()->first();
    
                    /* mail */
                    $data = [
                        'to_email' => $reg_user->email,
                        'to_name' => $reg_user->first_name . ' ' . $reg_user->last_name
                    ];
                    $replace_array = ['###USERNAME###' => $reg_user->first_name . ' ' . $reg_user->last_name];
                    // $this->basic_email($template = "new_registration", $data, $replace_array);
    
                    
    
                    $return_data = $this->profileCompletionFlagStatus($type = "login", $reg_user);
                    $this->check = "1";
                    $this->message = "Your account has been registered successfully";
                    $this->return_data = $return_data;
                    // if ($_SERVER['HTTP_HOST'] != "localhost" || $_SERVER['HTTP_HOST'] != "127.0.0.1:8000") $this->sendNotifyEmail($user);
                } else {
                    $this->message = "Your account is already created please login..!";
                }
            } else {
                $this->message = $this->param_missing;
            }
        }

        

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function workerAccountInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            
            if(isset($worker))
            {
                $worker->country = isset($request->country) ? $request->country : $worker->country;
                $worker->postcode = isset($request->postcode) ? $request->postcode : $worker->postcode;
                $worker->state = isset($request->state) ? $request->state : $worker->state;
                $worker->city = isset($request->city) ? $request->city : $worker->city;
                $worker->street_address = isset($request->street_address) ? $request->street_address : $worker->street_address;
                $worker->date_of_birth = isset($request->date_of_birth) ? $request->date_of_birth : $worker->date_of_birth;
                $worker->mobile = isset($request->mobile) ? $request->mobile : $worker->mobile;
                $worker->email = isset($request->email) ? $request->email : $worker->email;
                $worker->last_name = isset($request->last_name) ? $request->last_name : $worker->last_name;
                $worker->first_name = isset($request->first_name) ? $request->first_name : $worker->first_name;
                
                $nurse_update = USER::where(['id' => $worker->user_id])
                                    ->update([
                                        'country' => $worker->country,
                                        'postcode' => $worker->postcode,
                                        'state' => $worker->state,
                                        'city' => $worker->city,
                                        'street_address' => $worker->street_address,
                                        'date_of_birth' => $worker->date_of_birth,
                                        'mobile' => $worker->mobile,
                                        'email' => $worker->email,
                                        'last_name' => $worker->last_name,
                                        'first_name' => $worker->first_name,
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Account details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function registerRecruiter(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'email' => 'required|unique:users,email',
            'api_key' => 'required',
            'mobile' => 'required|unique:users,mobile'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if (
                isset($request->api_key) && $request->api_key != "" &&
                isset($request->first_name) && $request->first_name != "" &&
                isset($request->last_name) && $request->last_name != "" &&
                isset($request->email) && $request->email != "" &&
                isset($request->mobile) && $request->mobile != "" &&
                isset($request->fcm_token) && $request->fcm_token != ""
            ) {
                $facility_id = [];
                $facility_id[] = 'GWf000001';
                $facility = json_encode($facility_id);
                
                $user_data = User::where('email', '=', $request->email)->first();
                if ($user_data === null) {
                    $user = User::create([
                        'first_name' => $request->first_name,
                        'last_name' => $request->last_name,
                        'mobile' => $request->mobile,
                        'email' => $request->email,
                        'user_name' => $request->email,
                        'facility_id' => $facility,
                        // 'password' => Hash::make($request->password),
                        'role' => Role::getKey(Role::RECRUITER),
                        'fcm_token' => $request->fcm_token
                    ]);
                    
                    $user->assignRole('Recruiter');

                    $reg_user = User::where('email', '=', $request->email)->get()->first();

                    /* mail */
                    // $data = [
                    //     'to_email' => $reg_user->email,
                    //     'to_name' => $reg_user->first_name . ' ' . $reg_user->last_name
                    // ];
                    // $replace_array = ['###USERNAME###' => $reg_user->first_name . ' ' . $reg_user->last_name];
                    // // $this->basic_email($template = "new_registration", $data, $replace_array);

                    
                    // $userArray = array();

                    // $userArray['id'] = $reg_user->id;
                    // $userArray['first_name'] = $reg_user->first_name;
                    // $userArray['last_name'] = $reg_user->last_name;
                    // $userArray['email'] = $reg_user->email;
                    // $userArray['user_name'] = $reg_user->user_name;
                    // $userArray['mobile'] = $reg_user->mobile;
                    // $userArray['fcm_token'] = $reg_user->fcm_token;
                    // $userArray['facilty_id'] = $reg_user->facilty_id;
                    // $return_data = $userArray;

                    $return_data = $this->recruiterData($reg_user);

                    $this->check = "1";
                    $this->message = "Your account has been registered successfully";
                    $this->return_data = $return_data;
                    // if ($_SERVER['HTTP_HOST'] != "localhost" || $_SERVER['HTTP_HOST'] != "127.0.0.1:8000") $this->sendNotifyEmail($user);
                } else {
                    $this->message = "Your account is already created please login..!";
                }
            } else {
                $this->message = $this->param_missing;
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function profileCompletionFlagStatus($type = "", $user)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $experiencesTypes = $this->getExperienceTypes()->pluck('title', 'id');
        
        $licenseStatus = $this->getSearchStatus()->pluck('title', 'id');
        $licenseType = $this->getLicenseType()->pluck('title', 'id');
        // $data = [];
        // foreach ($licenseType as $key => $value) {
        //     $data[] = ['id' => strval($key), "name" => $value];
        // }
        
        $nurse = Nurse::where('user_id', '=', $user->id)->get()->first();
        
        if(isset($nurse->id)){
            $offer = DB::select("SELECT status FROM `offers` WHERE nurse_id = '$nurse->id'");
            if(!empty($offer)){
                $offer = $offer[0];
            }
        }
        $availability = Availability::where('nurse_id', '=', $nurse->id)->get()->first();
                   
        /* profile status flag */
        $profile_detail_flag = "0"; 
        $profile_completion = 0;
        
        if (
            (isset($user->first_name) && $user->first_name != "") &&
            (isset($user->last_name) && $user->last_name != "") &&
            (isset($user->email) && $user->email != "") &&
            (isset($user->mobile) && $user->mobile != "") &&
            (isset($nurse->nursing_license_state) && $nurse->nursing_license_state != "") &&
            (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") &&
            (isset($nurse->specialty) && $nurse->specialty != "") &&
            (isset($availability->work_location) && $availability->work_location != "") &&
            // (isset($nurse->address) && $nurse->address != "") &&
            // (isset($nurse->city) && $nurse->city != "") &&
            (isset($nurse->license_type) && $nurse->license_type != "" ) &&
            (isset($nurse->state) && $nurse->state != "") &&
            // (isset($nurse->postcode) && $nurse->postcode != "") &&
            (isset($nurse->country) && $nurse->country != "")
            
        ) $profile_detail_flag = "1";
        /* profile status flag */

        /* Hourly rate and availability */
        $hourly_rate_and_availability = "0";
        if ((isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") &&
            (isset($availability->shift_duration) && $availability->shift_duration != "") &&
            (isset($availability->assignment_duration) && $availability->assignment_duration != "") &&
            (isset($availability->preferred_shift) && $availability->preferred_shift != "") &&
            // (isset($availability->days_of_the_week) && $availability->days_of_the_week != "") &&
            (isset($availability->earliest_start_date) && $availability->earliest_start_date != "")
        ) $hourly_rate_and_availability = "1";
        /* Hourly rate and availability */

        $return_data['id'] = (isset($user->id) && $user->id != "") ? $user->id : "";
        $return_data['job_title'] = (isset($jobs->job_title) && $jobs->job_title != "") ? $jobs->job_title : "";
        $return_data['job_filter'] = (isset($jobs->job_filter) && $jobs->job_filter != "") ? $jobs->job_filter : "";
        $return_data['nurse_id'] = (isset($nurse->id) && $nurse->id != "") ? $nurse->id : "";
        $return_data['offer_status'] = (isset($offer->status) && $offer->status != "") ? $offer->status : "";
        $return_data['role'] = (isset($user->role) && $user->role != "") ? $user->role : "";
        $return_data['fcm_token'] = (isset($user->fcm_token) && $user->fcm_token != "") ? $user->fcm_token : "";
        $return_data['fullName'] = (isset($user->fullName) && $user->fullName != "") ? $user->fullName : "";
        $return_data['date_of_birth'] = (isset($user->date_of_birth) && $user->date_of_birth != "") ? $user->date_of_birth : "";
        $return_data['driving_license'] = (isset($user->driving_license) && $user->driving_license != "") ? $user->driving_license : "";
        $return_data['security_number'] = (isset($user->security_number) && $user->security_number != "") ? $user->security_number : "";
        $return_data['email_notification'] = (isset($user->email_notification) && $user->email_notification != "") ? strval($user->email_notification) : "";
        $return_data['sms_notification'] = (isset($user->sms_notification) && $user->sms_notification != "") ? strval($user->sms_notification) : "";
        
        $return_data['first_name'] = (isset($user->first_name) && $user->first_name != "") ? $user->first_name : "";
        $return_data['last_name'] = (isset($user->last_name) && $user->last_name != "") ? $user->last_name : "";
        $return_data['email'] = (isset($user->email) && $user->email != "") ? $user->email : "";

        $return_data['image'] = (isset($user->image) && $user->image != "") ? url("public/images/nurses/profile/" . $user->image) : "";

        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
        if (isset($user->image)) {
            $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $user->image);
            if ($t) {
                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $user->image);
            }
        }
        // $return_data["image_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);

        $return_data['mobile'] = (isset($user->mobile) && $user->mobile != "") ? $user->mobile : "";
        $return_data['nursing_license_state'] = (isset($nurse->nursing_license_state) && $nurse->nursing_license_state != "") ? $nurse->nursing_license_state : "";
        $return_data['nursing_license_number'] = (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") ? $nurse->nursing_license_number : "";
        $return_data['authority_Issue'] = (isset($nurse->authority_Issue) && $nurse->authority_Issue != "") ? $nurse->authority_Issue : "";
        $return_data['highest_nursing_degree'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? $nurse->highest_nursing_degree : "";
        $return_data['highest_nursing_degree_definition'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->highest_nursing_degree) : "";
        $return_data['specialty'] = $spl = [];
        if (isset($nurse->specialty) && $nurse->specialty != "") {
            $specialty_array = explode(",", $nurse->specialty);
            if (is_array($specialty_array)) {
                foreach ($specialty_array as $key => $spl_id) {
                    $spl_name = (isset($specialties[$spl_id])) ? $specialties[$spl_id] : "";
                    $spl[] = ['id' => $spl_id, 'name' => $spl_name];
                }
            }
            $return_data['specialty'] = $spl;
        }
        $return_data['work_location'] = (isset($availability->work_location) && $availability->work_location != "") ? strval($availability->work_location) : "";
        // if(isset($return_data['work_location']) && !empty($return_data['work_location'])){
        //     $return_data['work_location_definition'] = isset($workLocations[strval($availability->work_location)]) ? $workLocations[strval($availability->work_location)] : "";
        // }else{
        //     $return_data['work_location_definition'] = '';
        // }
        
        $return_data['address'] = (isset($nurse->address) && $nurse->address != "") ? $nurse->address : "";

        $return_data['search_status'] = (isset($nurse->search_status) && $nurse->search_status != "") ? strval($nurse->search_status) : "";
        $return_data['search_status_definition'] = (isset($nurse->search_status) && $nurse->search_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->search_status) : "";
        $return_data['license_type'] = (isset($nurse->license_type) && $nurse->license_type != "") ? strval($nurse->license_type) : "";
        $return_data['license_type_definition'] = (isset($nurse->license_type) && $nurse->license_type != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_type) : "";
        $return_data['license_status'] = (isset($nurse->license_status) && $nurse->license_status != "") ? strval($nurse->license_status) : "";
        $return_data['license_status_definition'] = (isset($nurse->license_status) && $nurse->license_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_status) : "";
        $return_data['license_expiry_date'] = (isset($nurse->license_expiry_date) && $nurse->license_expiry_date != "") ? strval($nurse->license_expiry_date) : "";
        $return_data['license_issue_date'] = (isset($nurse->license_issue_date) && $nurse->license_issue_date != "") ? strval($nurse->license_issue_date) : "";
        $return_data['license_renewal_date'] = (isset($nurse->license_renewal_date) && $nurse->license_renewal_date != "") ? strval($nurse->license_renewal_date) : "";

        $return_data['city'] = (isset($nurse->city) && $nurse->city != "") ? $nurse->city : "";
        $return_data['state'] = (isset($nurse->state) && $nurse->state != "") ? $nurse->state : "";
        $return_data['postcode'] = (isset($nurse->postcode) && $nurse->postcode != "") ? $nurse->postcode : "";
        $return_data['country'] = (isset($nurse->country) && $nurse->country != "") ? $nurse->country : "";
        $return_data['hourly_pay_rate'] = (isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") ? strval($nurse->hourly_pay_rate) : "";
        $return_data['shift_duration'] = (isset($availability->shift_duration) && $availability->shift_duration != "") ? strval($availability->shift_duration) : "";
        // $return_data['shift_duration_definition'] = (isset($shifts[$availability->shift_duration]) && $shifts[$availability->shift_duration] != "") ? $shifts[strval($availability->shift_duration)] : "";
        $return_data['assignment_duration'] = (isset($availability->assignment_duration) && $availability->assignment_duration != "") ? strval($availability->shift_duration) : "";
        // $return_data['assignment_duration_definition'] = (isset($assignmentDurations[$availability->assignment_duration]) && $assignmentDurations[$availability->assignment_duration] != "") ? $assignmentDurations[strval($availability->assignment_duration)] : "";
        $return_data['preferred_shift'] = (isset($availability->preferred_shift) && $availability->preferred_shift != "") ? strval($availability->preferred_shift) : "";
        // $return_data['preferred_shift_definition'] = (isset($preferredShifts[$availability->preferred_shift]) &&  $preferredShifts[$availability->preferred_shift] != "") ?  $preferredShifts[$availability->preferred_shift] : "";
        // $return_data['days_of_the_week'] = [];
        // if ($availability->days_of_the_week != "") $return_data['days_of_the_week'] = explode(",", $availability->days_of_the_week);
        $return_data['earliest_start_date'] = (isset($availability->earliest_start_date) && $availability->earliest_start_date != "") ? date('m/d/Y', strtotime($availability->earliest_start_date)) : "";

        $experience = [];
        $exp = Experience::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($exp->count() > 0) {
            $e = $exp;
            foreach ($e as $key => $v) {
                $crt_data['experience_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['position_title'] = (isset($v->position_title) && $v->position_title != "") ? $v->position_title : "";
                $crt_data['unit'] = (isset($v->unit) && $v->unit != "") ? $v->unit : "";
                $crt_data['start_date'] = (isset($v->start_date) && $v->start_date != "") ? date('m/d/Y', strtotime($v->start_date)) : "";
                $crt_data['end_date'] = (isset($v->end_date) && $v->end_date != "") ? date('m/d/Y', strtotime($v->end_date)) : "";
                $crt_data['is_current_job'] = (isset($v->is_current_job) && $v->is_current_job != "") ? $v->is_current_job : "";
                $crt_data["experience_as_acute_care_facility"] = (isset($nurse->experience_as_acute_care_facility) && $nurse->experience_as_acute_care_facility != "") ? $nurse->experience_as_acute_care_facility : "";
                $crt_data["experience_as_ambulatory_care_facility"] = (isset($nurse->experience_as_ambulatory_care_facility) && $nurse->experience_as_ambulatory_care_facility != "") ? $nurse->experience_as_ambulatory_care_facility : "";
                $exp_acute_care = isset($nurse->experience_as_acute_care_facility)? $nurse->experience_as_acute_care_facility : '0';
                $exp_ambulatory_care = isset($nurse->experience_as_ambulatory_care_facility)? $nurse->experience_as_ambulatory_care_facility : '0';
                $crt_data['total_experience'] = $exp_acute_care+$exp_ambulatory_care;
                $crt_data['total_experience'] = (int)$crt_data['total_experience'];
                $experience[] = $crt_data;
        
            }
        }
        $return_data['experience'] = $experience;
        /* experience */

        /* certitficate */
        $certitficate = [];
        $cert = Certification::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($cert->count() > 0) {
            $c = $cert;
            foreach ($c as $key => $v) {
                // if ($v->deleted_at != "") {
                $crt_data['certificate_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['license_number'] = (isset($v->license_number) && $v->license_number != "") ? $v->license_number : "";
                $crt_data['organization'] = (isset($v->organization) && $v->organization != "") ? $v->organization : "";
                $crt_data['effective_date'] = (isset($v->effective_date) && $v->effective_date != "") ? date('m/d/Y', strtotime($v->effective_date)) : "";
                $crt_data['expiration_date'] = (isset($v->expiration_date) && $v->expiration_date != "") ? date('m/d/Y', strtotime($v->expiration_date)) : "";
                $crt_data['renewal_date'] = (isset($v->renewal_date) && $v->renewal_date != "") ? date('m/d/Y', strtotime($v->renewal_date)) : "";

                $crt_data['certificate_image'] = (isset($v->certificate_image) && $v->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $v->certificate_image) : "";

                $certificate_image_base = "";
                if ($v->certificate_image) {
                    $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/certifications/' . $v->certificate_image);
                    if ($t) {
                        $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/nurses/certifications/' . $v->certificate_image);
                    }
                }
                // $crt_data['certificate_image_base'] = ($certificate_image_base != "") ? 'data:image/jpeg;base64,' . base64_encode($certificate_image_base) : "";


                // $crt_data['active'] = (isset($v->active) && $v->active != "") ? $v->active : "";
                // $crt_data['deleted_at'] = (isset($v->deleted_at) && $v->deleted_at != "") ? $v->deleted_at : "";
                   $crt_data['created_at'] = (isset($v->created_at) && $v->created_at != "") ? $v->created_at : "";
                    // $crt_data['updated_at'] = (isset($v->updated_at) && $v->updated_at != "") ? $v->updated_at : ""; 
                $certitficate[] = $crt_data;
                // }
            }
        }
        $return_data['certitficate'] = $certitficate;
        $return_data['resume'] = (isset($nurse->resume) && $nurse->resume != "") ? url('storage/assets/nurses/resumes/' . $nurse->id . '/' . $nurse->resume) : "";
        /* certitficate */


        /* role interest */
        $optyesno = ['1' => "Yes", '0' => "No"];

        $role_interest["nu_video_embed_url"] = (isset($nurse->nu_video_embed_url) && $nurse->nu_video_embed_url != "") ? $nurse->nu_video_embed_url : "";
        $role_interest["nu_video_embed_url_definition"] = (isset($optyesno[$nurse->nu_video_embed_url]) && $optyesno[$nurse->nu_video_embed_url] != "") ? $optyesno[$nurse->nu_video_embed_url] : "";
        $role_interest['serving_preceptor'] = (isset($nurse->serving_preceptor)) ? strval($nurse->serving_preceptor) : "";
        $role_interest['serving_preceptor_definition'] = (isset($optyesno[$nurse->serving_preceptor]) && $optyesno[$nurse->serving_preceptor] != "") ? $optyesno[$nurse->serving_preceptor] : "";
        $role_interest['serving_interim_nurse_leader'] = (isset($nurse->serving_interim_nurse_leader)) ? strval($nurse->serving_interim_nurse_leader) : "";
        $role_interest['serving_interim_nurse_leader_definition'] = (isset($optyesno[$nurse->serving_interim_nurse_leader]) && $optyesno[$nurse->serving_interim_nurse_leader] != "") ? $optyesno[$nurse->serving_interim_nurse_leader] : "";
        $role_interest['clinical_educator'] = (isset($nurse->clinical_educator)) ? strval($nurse->clinical_educator) : "";
        $role_interest['clinical_educator_definition'] = (isset($optyesno[$nurse->clinical_educator]) && $optyesno[$nurse->clinical_educator] != "") ? $optyesno[$nurse->clinical_educator] : "";
        $role_interest['is_daisy_award_winner'] = (isset($nurse->is_daisy_award_winner)) ? strval($nurse->is_daisy_award_winner) : "";
        $role_interest['is_daisy_award_winner_definition'] = (isset($optyesno[$nurse->is_daisy_award_winner]) && $optyesno[$nurse->is_daisy_award_winner] != "") ? $optyesno[$nurse->is_daisy_award_winner] : "";
        $role_interest['employee_of_the_mth_qtr_yr'] = (isset($nurse->employee_of_the_mth_qtr_yr)) ? strval($nurse->employee_of_the_mth_qtr_yr) : "";
        $role_interest['employee_of_the_mth_qtr_yr_definition'] = (isset($optyesno[$nurse->employee_of_the_mth_qtr_yr]) && $optyesno[$nurse->employee_of_the_mth_qtr_yr] != "") ? $optyesno[$nurse->employee_of_the_mth_qtr_yr] : "";
        $role_interest['other_nursing_awards'] = (isset($nurse->other_nursing_awards)) ? strval($nurse->other_nursing_awards) : "";
        $role_interest['other_nursing_awards_definition'] = (isset($optyesno[$nurse->other_nursing_awards]) && $optyesno[$nurse->other_nursing_awards] != "") ? $optyesno[$nurse->other_nursing_awards] : "";
        $role_interest['is_professional_practice_council'] = (isset($nurse->is_professional_practice_council)) ? strval($nurse->is_professional_practice_council) : "";
        $role_interest['is_professional_practice_council_definition'] = (isset($optyesno[$nurse->is_professional_practice_council]) && $optyesno[$nurse->is_professional_practice_council] != "") ? $optyesno[$nurse->is_professional_practice_council] : "";
        $role_interest['is_research_publications'] = (isset($nurse->is_research_publications)) ? strval($nurse->is_research_publications) : "";
        $role_interest['is_research_publications_definition'] = (isset($optyesno[$nurse->is_research_publications]) && $optyesno[$nurse->is_research_publications] != "") ? $optyesno[$nurse->is_research_publications] : "";
        $role_interest['leadership_roles'] = (isset($nurse->leadership_roles) && $nurse->leadership_roles != "") ? strval($nurse->leadership_roles) : "";
        $role_interest['leadership_roles_definition'] = (isset($leadershipRoles[$nurse->leadership_roles]) && $leadershipRoles[$nurse->leadership_roles] != "") ? $leadershipRoles[$nurse->leadership_roles] : "";

        $role_interest['summary'] = (isset($nurse->summary) && $nurse->summary != "") ? $nurse->summary : "";
        $role_interest['languages'] = (isset($nurse->languages) && $nurse->languages != "") ? explode(",", $nurse->languages) : "";

        /* nurse assets */
        $role_interest['additional_pictures'] = $role_interest['additional_files'] = [];
        $nurse_assets = NurseAsset::where(['nurse_id' => $nurse->id, 'active' => '1'])->get();

        if ($nurse_assets->count() > 0) {
            foreach ($nurse_assets as $nac_ => $na) {
                if ($na->filter == "additional_photos") $role_interest['additional_pictures'][] = ['asset_id' => $na->id, 'photo' => url('storage/assets/nurses/additional_photos/' . $nurse->id . '/' . $na->name)];
                else $role_interest['additional_files'][] = ['asset_id' => $na->id, 'photo' => url('storage/assets/nurses/additional_files/' . $nurse->id . '/' . $na->name)];
            }
        }
        /* nurse assets */
        $return_data['role_interest'] = $role_interest;
        /* role interest */
        //profile completion
        if (
            (isset($user->date_of_birth) && $user->date_of_birth != "") &&
            (isset($user->driving_license) && $user->driving_license != "") &&
            (isset($user->security_number) && $user->security_number != "")
        ){
            $profile_completion++;
            $return_data['profile_details'] = 'true';
        }else{
            $return_data['profile_details'] = 'false';
        } 

        if(!empty($return_data['highest_nursing_degree'])){
            $profile_completion++;
            $return_data['qualification_details'] = 'true';
        }else{
            $return_data['qualification_details'] = 'false';
        }

        if(!empty($return_data['nursing_license_number'])){
            $profile_completion++;
            $return_data['license_details'] = 'true';
        }else{
            $return_data['license_details'] = 'false';
        }

        if(!empty($return_data['resume'])){
            $profile_completion++;
            $return_data['resume_details'] = 'true';
        }else{
            $return_data['resume_details'] = 'false';
        }

        if(!empty($return_data['certitficate'])){
            $profile_completion++;
            $return_data['certificate_details'] = 'true';
        }else{
            $return_data['certificate_details'] = 'false';
        }

        if(!empty($return_data['experience'])){
            $profile_completion++;
            $return_data['experience_details'] = 'true';
        } else{
            $return_data['experience_details'] = 'false';
        }

        if($profile_completion ==  6){
            $return_data['isUserProfile'] = 'true';
        }else{
            $return_data['isUserProfile'] = 'false';
        }

        $return_data['profile_completion'] = $profile_completion;
        // end profile completion
        return $return_data;
    }

    public function personalDetail(Request $request)
    {
        $user = User::where('id', $request->id)->first();
        $nurse = Nurse::where('user_id', $request->id)->first();
        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            /* 'image' => 'nullable|max:1024|image|mimes:jpeg,png,jpg', */
            'first_name' => 'required|regex:/^[a-zA-Z]+$/|min:3|max:100',
            'last_name' => 'required|regex:/^[a-zA-Z]+$/|min:3|max:100',
            // 'mobile' => 'required|regex:/^[0-9 \+]+$/|min:4|max:20',
            'mobile' => 'required|min:4|max:20',
            'email' => $this->emailRegEx($user),
            'nursing_license_state' => 'required|regex:/^[a-zA-Z ]+$/|min:2|max:50',
            'nursing_license_number' => 'nullable|regex:/^[a-zA-Z0-9]+$/|min:2|max:50',
            'specialty' => 'required',
            'address' => 'required|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'city' => 'required|regex:/^[a-zA-Z ]+$/|min:2|max:50',
            'state' => 'required',
            'postcode' => 'required|regex:/^[a-zA-Z0-9]+$/|min:3|max:10',
            'country' => 'required|regex:/^[a-zA-Z ]+$/|min:3',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            if ($user) {
                /* User */
                if (isset($request->first_name) && $request->first_name != "") $user->first_name = $request->first_name;
                if (isset($request->last_name) && $request->last_name != "") $user->last_name = $request->last_name;
                if (isset($request->email) && $request->email != "") $user->email = $request->email;
                if (isset($request->mobile) && $request->mobile != "") $user->mobile = $request->mobile;
                if ($request->hasFile('profile_image') && $request->file('profile_image') != null) {
                    // $request->file('profile_image')->storeAs('assets/nurses/profile', $nurse->id);
                    $profile_image_name_full = $request->file('image')->getClientOriginalName();
                    $profile_image_name = pathinfo($profile_image_name_full, PATHINFO_FILENAME);
                    $profile_image_ext = $request->file('image')->getClientOriginalExtension();
                    $profile_image = $profile_image_name.'_'.time().'.'.$profile_image_ext;
                    
                    $destinationPath = 'images/nurses/profile';
                    $request->file('image')->move(public_path($destinationPath), $profile_image);   
                
                    $user->image = $profile_image;
                }
                $u = $user->update();
                /* User */

                /*  Nurse */
                if (isset($request->specialty) && $request->specialty != "") $nurse->specialty = $request->specialty;
                if (isset($request->address) && $request->address != "") $nurse->address = $request->address;
                if (isset($request->city) && $request->city != "") $nurse->city = $request->city;
                if (isset($request->state) && $request->state != "") $nurse->state = $request->state;
                if (isset($request->postcode) && $request->postcode != "") $nurse->postcode = $request->postcode;
                if (isset($request->country) && $request->country != "") $nurse->country = $request->country;
                if (isset($request->nursing_license_number) && $request->nursing_license_number != "") $nurse->nursing_license_number = $request->nursing_license_number;
                if (isset($request->search_status) && $request->search_status != "") $nurse->search_status = $request->search_status;
                if (isset($request->license_type) && $request->license_type != "") $nurse->license_type = $request->license_type;
                $n = $nurse->update();
                /*  Nurse */

                if ($u || $n) {
                    $this->check = "1";
                    $return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    $this->message = "Personal detail updated successfully";
                } else {
                    $this->message = "Problem occurred while updating the profile detail, Please try again later";
                }
            } else {
                $this->message = "User not exists";
            }
            $this->return_data = $return_data;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function availability(Request $request)
    {
        $messages = [
            "id.required" => "Id is required",
            "shift_duration.required" => "Select shift duration",
            "assignment_duration.required" => "Select assignment duration",
            "preferred_shift.required" => "Select preferred shift",
            // "days_of_the_week.required" => "Select preferred days of the week",
            "earliest_start_date.date" => "Earliest start date is not valid date",
            "work_location.required" => "Select work location",
        ];

        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            'hourly_pay_rate' => 'required|regex:/^[0-9]+$/|min:1|max:3',
            'shift_duration' => 'required',
            'assignment_duration' => 'required',
            'preferred_shift' => 'required',
            // 'days_of_the_week' => 'required',
            'earliest_start_date' => 'nullable|date|after_or_equal:now',
            'work_location' => 'required',
            'api_key' => 'required',
        ], $messages);

        $user_data = User::where('id', '=', $request->id)->first();
        if ($user_data != null) {
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                /* nurse */
                $nurse = Nurse::where('user_id', '=', $request->id)->get()->first();
                if (isset($request->hourly_pay_rate) && $request->hourly_pay_rate != "") {
                    $tmpRate =  $request->hourly_pay_rate * 25 / 100;
                    $facility_hourly_pay_rate = $request->hourly_pay_rate + $tmpRate;
                    $nurse->__set('facility_hourly_pay_rate', $facility_hourly_pay_rate);
                }
                $nurse->hourly_pay_rate = $request->hourly_pay_rate;
                $n = $nurse->update();
                /* nurse */

                /* availability */
                $availability = Availability::where('nurse_id', '=', $nurse->id)->get()->first();
                if (isset($request->shift_duration) && $request->shift_duration != "") $availability->shift_duration = $request->shift_duration;
                if (isset($request->preferred_shift) && $request->preferred_shift != "") $availability->preferred_shift = $request->preferred_shift;
                if (isset($request->days_of_the_week) && $request->days_of_the_week != "") $availability->days_of_the_week = $request->days_of_the_week;
                if (isset($request->assignment_duration) && $request->assignment_duration != "") $availability->assignment_duration = $request->assignment_duration;
                if (isset($request->earliest_start_date) && $request->earliest_start_date != "") $availability->earliest_start_date = $request->earliest_start_date;
                if (isset($request->work_location) && $request->work_location != "") $availability->work_location = $request->work_location;
                if (isset($request->unavailable_dates) && $request->unavailable_dates != "") $availability->unavailable_dates = $request->unavailable_dates;

                // if (isset($request->unavailable_dates)) {
                //     $availability->unavailable_dates = explode(',', $request->unavailable_dates);
                // }else{
                //     $availability->unavailable_dates = array();
                // }
                
                $a = $availability->update();
                /* availability */
                // Hourly Rate & Availability Updated

                if ($a || $n) {
                    $this->check = "1";
                    $this->message = "Hourly rate & availability updated successfully";
                    $this->return_data = $this->profileCompletionFlagStatus($type = "", $user_data);
                } else {
                    $this->message = "Problem occurred while updating the profile detail, Please try again later";
                }
            }
        } else {
            $this->message = "User not exists";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function sendNotifyEmail($user)
    {
        Mail::send(
            new RegistrationMailable(
                $user->first_name,
                $user->last_name,
                $user->email
            )
        );
    }

    public function facilityTypes()
    {
        $facilityTypes = $this->getFacilityType()->pluck('title', 'id');
        $data = [];
        foreach ($facilityTypes as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "facility type's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function NursingDegrees()
    {
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $data = [];
        foreach ($nursingDegrees as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Nursing degree's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function searchForCredentialsOptions()
    {
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $data = [];
        foreach ($certifications as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Search for credentials has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getVaccinationList()
    {
        $keywords = Keyword::where('filter', 'Vaccinations')->get()->pluck('title', 'id');
            $data = [];
            foreach ($keywords as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
        $this->check = "1";
        $this->message = "Vaccinations has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getEMRList()
    {
        $keywords = Keyword::where('filter', 'EMR')->get()->pluck('title', 'id');
            $data = [];
            foreach ($keywords as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
        $this->check = "1";
        $this->message = "EMR has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function experienceTpesOptions(Request $request){
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $experience = $this->getExperienceTypes()->pluck('title', 'id');
            $data = [];
            foreach ($experience as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Experience types has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobTypes(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $experience = $this->getjobTypes()->pluck('title', 'id');
            $data = [];
            foreach ($experience as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Job types has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function subjectTypes(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $experience = $this->getsubjectTypes()->pluck('title', 'id');
            $data = [];
            foreach ($experience as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Subject types has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
   

    }

    public function getMediaOptions(Nurse $nurse)
    {
        $certs = $nurse->getMedia('certificates');
        $data = [];
        foreach ($certs as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Search for credentials has been listed successfully";
        $this->return_data = $certs;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getEHRProficiencyExpOptions()
    {
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $data = [];
        foreach ($ehrProficienciesExp as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        asort($data);
        $data1 = [];
        foreach ($data as $key1 => $value1) {
            $data1[] = ['id' => strval($value1['id']), "name" => $value1['name']];
        }
        $this->check = "1";
        $this->message = "EHR proficiency exp options has been listed successfully";
        $this->return_data = $data1;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getEMedicalRecordsOptions()
    {
        $controller = new controller();
        $electronic_medical_records = $controller->getEMedicalRecords()->pluck('title', 'id');
        $data = [];
        foreach ($electronic_medical_records as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "EMedical records options has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getNursingDegreesOptions()
    {
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $data = [];
        foreach ($nursingDegrees as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "EHR proficiency exp options has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function nurseExperienceSelectionOptions(Request $request)
    {
        $messages = [
            "id.required" => "Id is required"
        ];

        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            'api_key' => 'required',
        ], $messages);


        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = Nurse::where('user_id', '=', $request->id)->first();
            if ($nurse != null) {
                $nuexperience = $this->nurseExperienceSelection($nurse);
                $data = [];
                foreach ($nuexperience as $key => $value) {
                    $data[] = ['id' => $key, "name" => $value];
                }
                $this->check = "1";
                $this->message = "facility type's has been listed successfully";
                $this->return_data = $nuexperience;
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function Experience(Request $request)
    {
        $messages = [
            "highest_nursing_degree.required" => "Select highest nursing degree",
            "ehr_proficiency_cerner.required" => "Select Cerner",
            "ehr_proficiency_meditech.required" => "Select Meditech",
            "ehr_proficiency_epic.required" => "Select Epic",
            "ehr_proficiency_other.regex" => "Other ehr proficiency not valid",
            "college_uni_name.required" => "Please add college / university name",
            "college_uni_name.regex" => "College / university name not valid",
            "college_uni_name.min" => "College / university name is short",
            "college_uni_name.max" => "College / university name too long",
            "college_uni_city.required" => "Please add city",
            "college_uni_city.regex" => "City not valid",
            "college_uni_city.min" => "City is short",
            "college_uni_city.max" => "City is too long",
            "college_uni_country.required" => "Please add country",
            "college_uni_country.regex" => "Country not valid",
            "college_uni_country.min" => "Country is short",
            "college_uni_country.max" => "Country is too long",
            "experience_as_acute_care_facility.regex" => "Enter valid acute care facility experience",
            "experience_as_ambulatory_care_facility.regex" => "Enter valid non-acute care nursing experience",
        ];

        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            'highest_nursing_degree' => 'required',
            'college_uni_name' => 'required|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:255',
            'college_uni_city' => 'required|regex:/^[a-zA-Z ]+$/|min:2|max:50',
            'college_uni_state' => 'required',
            'college_uni_country' => 'required|regex:/^[a-zA-Z ]+$/|min:3',
            'experience_as_acute_care_facility' => 'nullable|regex:/^[0-9.\+]+$/|max:5',
            'experience_as_ambulatory_care_facility' => 'nullable|regex:/^[0-9.\+]+$/|max:5',
            'ehr_proficiency_cerner' => 'required',
            'ehr_proficiency_meditech' => 'required',
            'ehr_proficiency_epic' => 'required',
            'ehr_proficiency_other' => 'nullable|regex:/^[a-zA-Z 0-9]+$/|min:2|max:50',
            'api_key' => 'required',
        ], $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', '=', $request->id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $nurse_info = Nurse::where('user_id', '=', $request->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();

                    $update_data = [
                        'highest_nursing_degree' => $request->highest_nursing_degree,
                        'college_uni_name' => $request->college_uni_name,
                        'college_uni_city' => $request->college_uni_city,
                        'college_uni_state' => $request->college_uni_state,
                        'college_uni_country' => $request->college_uni_country,
                        'experience_as_acute_care_facility' => $request->experience_as_acute_care_facility,
                        'experience_as_ambulatory_care_facility' => $request->experience_as_ambulatory_care_facility,
                        'ehr_proficiency_cerner' => $request->ehr_proficiency_cerner,
                        'ehr_proficiency_meditech' => $request->ehr_proficiency_meditech,
                        'ehr_proficiency_epic' => $request->ehr_proficiency_epic,
                        'ehr_proficiency_other' =>  $request->ehr_proficiency_other,
                    ];
                    $update = NURSE::where(['id' => $nurse->id])->update($update_data);
                    if ($update) {
                        $this->check = "1";
                        $this->message = "Experience updated successfully";
                        $this->return_data = $this->profileCompletionFlagStatus($type = "", $user);
                        // $this->return_data = $experience;
                    } else {
                        $this->message = "Failed to update the experience, Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function test(Request $request)
    {
        /* $follows = new Follows();
        $user_data = Follows::where('email', '=', $request->email)->get()->first(); */

        /* $nurse = JobOffer::create([
            'job_id' => "8245d08d-732c-45bc-bbaf-e3f19bcdadfb",
            'offer_id' => "1d779d61-5be9-47e7-a6be-d1c757a7c7c1",
        ]); */
        // $nurse->save();

        /* $facility_rating = FacilityRating::create(['nurse_id' => '1d779d61-5be9-47e7-a6be-d1c757a7c7c1', 'facility_id' => '1d779d61-5be9-47e7-a6be-d1c757a7c7c1']);
        $facility_rating->save(); */

        /*  $test = (object) [];
        $messages = [
            "id.required" => "Id is required",
        ];

        $validator = \Validator::make($request->all(), [
            'id' => 'required',
        ], $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $this->check = "1";
            $this->message = "Testing Response";
            $test->response = ["msg" => "test message"];
        } */
        /*$template = EmailTemplate::create([
            'label' => "choosepassword",
            'content' => "choose password content",
        ]);*/
        // $template = NurseRating::create([
        //     'label' => "choosepassword",
        //     'content' => "choose password content",
        // ]);
        // $template->save();

        /*$this->message == "NO";
        if (exists('/storage/assets/facilities/facility_logo/image20_1641315145.jpeg')) {
            $this->message == "Yes";
        }*/
        $this->return_data = "";

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function addCredentials(Request $request)
    {
        $messages = [
            "user_id.required" => "user_id is required",
            "type.required" => "Select Certification type",
            "type.exists" => "Selected Certification type does not exist",
            "effective_date.required" => "Enter Issue Date",
            "effective_date.date" => "Issue Date is not valid",
            "expiration_date.required" => "Enter Expiration Date",
            "expiration_date.date" => "Expiration Date is not valid",
            "expiration_date.after" => "Expiration Date should be after Isuue Date.",
            "certificate_image.max" => "Allowed File Size is 5 MB",
            "certificate_image.mimes" => "Allowed File Types are jpeg, png, jpg, pdf",
            "resume.mimes" => "Allowed File Types are doc, docx, pdf, txt",
            "resume.max" => "Allowed File Size is 2 MB",
        ];

        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'type' => 'required|numeric|exists:keywords,id',
            'effective_date' => 'required|date',
            'expiration_date' => "required|date|after:effective_date",
            'renewal_date' => "date",
            'certificate_image' => 'nullable|max:5120|mimes:jpeg,png,jpg,pdf',
            'resume' => 'mimes:doc,docx,pdf,txt|max:2048',
            'api_key' => 'required',
        ], $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            if(isset($request->role)){
                $nurse_info = Nurse::where('id', '=', $request->nurse_id);
            }else{
                $nurse_info = Nurse::where('user_id', '=', $request->user_id);
            }
            
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();
                
                /* certification */
                $add_array = [
                    'nurse_id' => $nurse->id,
                    'type' => $request->type,
                    'effective_date' => $request->effective_date,
                    'expiration_date' => $request->expiration_date,
                    "organization" => $request->organization,
                    "renewal_date" => $request->renewal_date,
                    'license_number' => $request->license_number
                ];
                $check = Certification::where('nurse_id', '=', $nurse->id)->get()->first();
                if(isset($check)){
                    $certification = Certification::where('nurse_id', '=', $nurse->id)->update($add_array);
                    // DB::table('user')->where('email', $userEmail)->update(array('member_type' => $plan));
                }else{
                    $certification = Certification::create($add_array);
                }

                if ($request->hasFile('certificate_image')) {
                    $certificate_image_name_full = $request->file('certificate_image')->getClientOriginalName();
                    $certificate_image_name = pathinfo($certificate_image_name_full, PATHINFO_FILENAME);
                    $certificate_image_ext = $request->file('certificate_image')->getClientOriginalExtension();
                    $certificate_image = $certificate_image_name . '_' . time() . '.' . $certificate_image_ext;
                    $certification_array["certificate_image"] = $certificate_image;
                    $certification_img_update = Certification::where(['id' => $certification->id])->update($certification_array);
                    //Upload Image
                    $request->file('certificate_image')->storeAs('assets/nurses/certifications/' . $nurse->id, $certificate_image);
                }
                /* certification */

                if ($certification == true) {
                    $cert_ret = Certification::where('id', '=', isset($certification->id)?$certification->id:$check->id)->first();

                    /* certificate data */
                    $certifications = $this->getCertifications()->pluck('title', 'id');
                    $cert_data["id"] = (isset($cert_ret->id) && $cert_ret->id != "") ? $cert_ret->id : "";
                    $cert_data["nurse_id"] = (isset($cert_ret->nurse_id) && $cert_ret->nurse_id != "") ? $cert_ret->nurse_id : "";
                    $cert_data["type"] = (isset($cert_ret->type) && $cert_ret->type != "") ? $cert_ret->type : "";
                    $cert_data["type_definition"] = (isset($certifications[$cert_ret->type]) && $certifications[$cert_ret->type] != "") ? $certifications[$cert_ret->type] : "";
                    $cert_data["license_number"] = (isset($cert_ret->license_number) && $cert_ret->license_number != "") ? $cert_ret->license_number : "";
                    $cert_data["effective_date"] = (isset($cert_ret->effective_date) && $cert_ret->effective_date != "") ?  date('m/d/Y', strtotime($cert_ret->effective_date)) : "";
                    $cert_data["expiration_date"] = (isset($cert_ret->expiration_date) && $cert_ret->expiration_date != "") ?  date('m/d/Y', strtotime($cert_ret->expiration_date)) : "";
                    $cert_data["renewal_date"] = (isset($cert_ret->renewal_date) && $cert_ret->renewal_date != "") ?  date('m/d/Y', strtotime($cert_ret->renewal_date)) : "";
                    $cert_data["certificate_image"] = (isset($cert_ret->certificate_image) && $cert_ret->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $cert_ret->certificate_image) : "";
                    $cert_data["organization"] = (isset($cert_ret->organization) && $cert_ret->organization != "") ? $cert_ret->organization : "";
                    // $cert_data["deleted_at"] = (isset($cert_ret->deleted_at) && $cert_ret->deleted_at != "") ? date('m/d/Y H:i:s', strtotime($cert_ret->deleted_at)) : "";
                    $cert_data["created_at"] = (isset($cert_ret->created_at) && $cert_ret->created_at != "") ?  date('m/d/Y H:i:s', strtotime($cert_ret->created_at)) : "";
                    // $cert_data["updated_at"] = (isset($cert_ret->updated_at) && $cert_ret->updated_at != "") ?  date('m/d/Y H:i:s', strtotime($cert_ret->updated_at)) : "";
                    /* certificate data */

                    /* nurse data */
                    $nurse_return = Nurse::select('resume')->where('user_id', '=', $request->id)->first();
                    $cert_data["resume"] = (isset($nurse_return->resume) && $nurse_return->resume != "") ? url('storage/assets/nurses/resumes/' . $nurse->id . '/' . $nurse_return->resume) : "";
                    /* nurse data */

                    $this->check = "1";
                    $this->message = "Certification added successfully";
                    $this->return_data = $cert_data;
                } else {
                    $this->message = "Problem occurred while updating certification, Please try again later";
                }
            } else {
                $this->message = "Nurse not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function editCredentials(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'certificate_id' => 'required',
            'type' => 'required|numeric|exists:keywords,id',
            'effective_date' => 'required|date',
            'expiration_date' => "required|date|after:effective_date",
            'renewal_date' => "date",
            'certificate_image' => 'nullable|max:5120|mimes:jpeg,png,jpg,pdf',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();
                    $certificate_array = [
                        "type" => $request->type,
                        "effective_date" => $request->effective_date,
                        "expiration_date" => $request->expiration_date,
                        "organization" => $request->organization,
                        "renewal_date" => $request->renewal_date,
                        'license_number' => $request->license_number
                    ];
                    if ($request->hasFile('certificate_image')) {
                        $certificate_image_name_full = $request->file('certificate_image')->getClientOriginalName();
                        $certificate_image_name = pathinfo($certificate_image_name_full, PATHINFO_FILENAME);
                        $certificate_image_ext = $request->file('certificate_image')->getClientOriginalExtension();
                        $certificate_image = $certificate_image_name . '_' . time() . '.' . $certificate_image_ext;
                        $certificate_array["certificate_image"] = $certificate_image;
                        //Upload Image
                        $request->file('certificate_image')->storeAs('assets/nurses/certifications/' . $nurse->id, $certificate_image);
                    }
                    $certification = Certification::where(['id' => $request->certificate_id])->update($certificate_array);
                    if ($certification == true) {
                        $this->check = "1";
                        $this->message = "Certificate updated successfully";
                        $this->return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    } else {
                        $this->message = "Failed to update the certificate. Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function removeCredentialDoc(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'certificate_id' => 'required',
            // 'certificate_image' => 'required'
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();

                    $certificate = Certification::where(['id' => $request->certificate_id])->whereNull('deleted_at')->get();
                    if ($certificate->count() > 0) {
                        $cert = $certificate->first();

                        $del = Storage::delete('assets/nurses/certifications/' . $nurse->id . '/' . $cert->certificate_image);
                        $remove = Certification::where(['id' => $request->certificate_id])->update(['deleted_at' => date('m/d/Y H:i:s')]);
                        if ($del && $remove) {
                            $this->check = "1";
                            $this->message = "Certificate removed successfully";
                        } else {
                            $this->message = "Failed to remove or certificate removed already. Please try again later";
                        }
                    } else {
                        $this->message = "Certificate already removed";
                    }

                    /* $file = explode("/", $request->certificate_image); //file_exists();
                    if (isset($file) && is_array($file) && !empty($file)) {
                        $t = Storage::exists('assets/nurses/certifications/' . $nurse->id . '/' . end($file));
                        if ($t) {
                        } else {
                            $this->message = "Certificate already removed";
                        }
                    } */
                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }
            }else{
                $this->check = "1";
                $this->message = "User not exist";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function resume(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'resume' => 'required|mimes:doc,docx,pdf,txt|max:2048',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();
                    $nurse_update = false;
                    if ($request->hasFile('resume')) {
                        $resume_name_full = $request->file('resume')->getClientOriginalName();
                        $resume_name = pathinfo($resume_name_full, PATHINFO_FILENAME);
                        $resume_ext = $request->file('resume')->getClientOriginalExtension();
                        $resume = $resume_name . '_' . time() . '.' . $resume_ext;
                        $nurse_array["resume"] = $resume;
                        //Upload Image
                        $request->file('resume')->storeAs('assets/nurses/resumes/' . $nurse->id, $resume);
                        $nurse_update = NURSE::where(['id' => $nurse->id])->update($nurse_array);
                        $nurse->addMediaFromRequest('resume')->usingName($nurse->id)->toMediaCollection('resumes');
                    }

                    if ($nurse_update == true) {
                        $this->check = "1";
                        $this->message = "Resume updated successfully";
                        $this->return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    } else {
                        $this->message = "Failed to update the resume. Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function leadershipRoles()
    {
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $data = [];
        foreach ($leadershipRoles as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Leadership roles has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getLanguages()
    {
        $languages = $this->getLanguageOptions();
        $data = [];
        foreach ($languages as $key => $value) {
            $data[] = ["language" => $value];
        }
        $this->check = "1";
        $this->message = "Languages has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function rolePage1(Request $request)
    {
        $messages = [
            "id.required" => "Id is required",
            "leadership_roles.required_if" => "Please select leadership role",
        ];

        $validator = Validator::make($request->all(), [
            'id' => 'required',
            'serving_preceptor' => 'boolean',
            'serving_interim_nurse_leader' => 'boolean',
            'leadership_roles' => 'required_if:serving_interim_nurse_leader,1',
            'clinical_educator' => 'boolean',
            'is_daisy_award_winner' => 'boolean',
            'employee_of_the_mth_qtr_yr' => 'boolean',
            'other_nursing_awards' => 'boolean',
            'is_professional_practice_council' => 'boolean',
            'is_research_publications' => 'boolean',
            'api_key' => 'required',
        ], $messages);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            $nurse =  Nurse::where('user_id', '=', $request->id)->first();
            $params = $request->toArray();
            $params['serving_preceptor'] =
                isset($params['serving_preceptor']) && !!$params['serving_preceptor'];
            $params['serving_interim_nurse_leader'] =
                isset($params['serving_interim_nurse_leader']) && !!$params['serving_interim_nurse_leader'];
            $params['clinical_educator'] =
                isset($params['clinical_educator']) && !!$params['clinical_educator'];
            $params['is_daisy_award_winner'] =
                isset($params['is_daisy_award_winner']) && !!$params['is_daisy_award_winner'];
            $params['employee_of_the_mth_qtr_yr'] =
                isset($params['employee_of_the_mth_qtr_yr']) && !!$params['employee_of_the_mth_qtr_yr'];
            $params['other_nursing_awards'] =
                isset($params['other_nursing_awards']) && !!$params['other_nursing_awards'];
            $params['is_professional_practice_council'] =
                isset($params['is_professional_practice_council']) && !!$params['is_professional_practice_council'];
            $params['is_research_publications'] =
                isset($params['is_research_publications']) && !!$params['is_research_publications'];
            $nurse->update($params);
            $this->check = "1";
            $this->return_data = $nurse;
            $this->message = "Role and Interest Updated Successfully";
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function rolePage2(Request $request)
    {
        $messages = [
            'id' => 'ID is required',
            "additional_pictures.max" => "Additional Photos can't be more than 4.",
            "additional_files.max" => "Additional Files can't be more than 4.",
            "additional_pictures.*.mimes" => "Additional Photos should be image or png jpg",
            "additional_files.*.mimes" => "Additional Files should be doc or pdf",
            "additional_pictures.*.max" => "Additional Photos should not be more than 5mb",
            "additional_files.*.max" => "Additional Files should not be more than 1mb",
            "nu_video.url" => "YouTube and Vimeo should be a valid link",
            "nu_video.max" => "YouTube and Vimeo should be a valid link"
        ];

        $validator = Validator::make($request->all(), [
            'id' => 'required',
            'additional_pictures' => 'max:4',
            'additional_pictures.*' => 'nullable|max:5120|image|mimes:jpeg,png,jpg',
            'additional_files' => 'max:4',
            'additional_files.*' => 'nullable|max:1024|mimes:pdf,doc,docx',
            'nu_video' => 'nullable|url|max:255',
            'api_key' => 'required',
        ], $messages);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            $nurse =  Nurse::where('user_id', '=', $request->id)->first();
            $nurse->summary = $request->summary;
            $nurse->save();
            if (preg_match('/https?:\/\/(?:[\w]+\.)*youtube\.com\/watch\?v=[^&]+/', $request->nu_video, $vresult)) {
                $youTubeID = $this->parse_youtube($request->nu_video);
                $embedURL = 'https://www.youtube.com/embed/' . $youTubeID[1];
                $nurse->__set('nu_video_embed_url', $embedURL);
                $nurse->update();
            } elseif (preg_match('/https?:\/\/(?:[\w]+\.)*vimeo\.com(?:[\/\w]*\/videos?)?\/([0-9]+)[^\s]*+/', $request->nu_video, $vresult)) {
                $vimeoID = $this->parse_vimeo($request->nu_video);
                $embedURL = 'https://player.vimeo.com/video/' . $vimeoID[1];
                $nurse->__set('nu_video_embed_url', $embedURL);
                $nurse->update();
            }
            if ($additional_photos = $request->file('additional_pictures')) {
                foreach ($additional_photos as $additional_photo) {
                    $additional_photo_name_full = $additional_photo->getClientOriginalName();
                    $additional_photo_name = pathinfo($additional_photo_name_full, PATHINFO_FILENAME);
                    $additional_photo_ext = $additional_photo->getClientOriginalExtension();
                    $additional_photo_finalname = $additional_photo_name . '_' . time() . '.' . $additional_photo_ext;
                    //Upload Image
                    $additional_photo->storeAs('assets/nurses/additional_photos/' . $nurse->id, $additional_photo_finalname);
                    NurseAsset::create([
                        'nurse_id' => $nurse->id,
                        'name' => $additional_photo_finalname,
                        'filter' => 'additional_photos'
                    ]);
                }
            }
            if ($additional_files = $request->file('additional_files')) {
                foreach ($additional_files as $additional_file) {
                    $additional_file_name_full = $additional_file->getClientOriginalName();
                    $additional_file_name = pathinfo($additional_file_name_full, PATHINFO_FILENAME);
                    $additional_file_ext = $additional_file->getClientOriginalExtension();
                    $additional_file_finalname = $additional_file_name . '_' . time() . '.' . $additional_file_ext;
                    //Upload Image
                    $additional_file->storeAs('assets/nurses/additional_files/' . $nurse->id, $additional_file_finalname);
                    NurseAsset::create([
                        'nurse_id' => $nurse->id,
                        'name' => $additional_file_finalname,
                        'filter' => 'additional_files'
                    ]);
                }
            }
            $this->check = "1";
            $this->return_data = $nurse;
            $this->message = "Role and Interest Updated Successfully";
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobList(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = NURSE::where('user_id', $request->user_id)->first();
            $jobs_id = Offer::where('nurse_id', $nurse['id'])->select('job_id')->get();

            $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
            if(isset($checkoffer))
            {
                $this->check = "1";
                $this->message = "This Worker Blocked by Recruiter";
                $this->return_data = [];
            }else{
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.is_open' => "1",
                    'jobs.is_hidden' => "0",
                    'jobs.is_closed' => "0",
                    'jobs.active' => '1'
                ];
                $ret = Job::select('jobs.id as job_id', 'jobs.auto_offers as auto_offers', 'jobs.*')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->where($whereCond)
                    ->whereNotIN('jobs.id', $jobs_id)
                    ->orderBy('jobs.created_at', 'desc');
    
                if (isset($request->profession) && $request->profession != "") {
                    $ret->where('jobs.profession', '=', $request->profession);
                }

                if (isset($request->type) && $request->type != "") {
                    $ret->where('jobs.type', '=', $request->type);
                }
    
                if (isset($request->preferred_specialty) && $request->preferred_specialty != "") {
                    $ret->where('jobs.preferred_specialty', '=', $request->preferred_specialty);
                }
    
                if (isset($request->preferred_experience) && $request->preferred_experience != "") {
                    $ret->where('jobs.preferred_experience', '=', $request->preferred_experience);
                }
    
                if (isset($request->search_location) && $request->search_location != "") $ret->search(['job_city', 'job_state'], $request->search_location);
    
                if(isset($request->job_type) && $request->job_type != ""){
                    $ret->where('jobs.job_type', '=', $request->job_type);
                }
    
                if (isset($request->end_date) && !empty($request->end_date)) {
                    $ret->where('jobs.end_date', '<=', $request->end_date);
                }
    
                if (isset($request->preferred_shift) && $request->preferred_shift != "") {
                    $ret->where('jobs.preferred_shift', '=', $request->preferred_shift);
                }
    
                if (isset($request->auto_offers) && $request->auto_offers != "") {
                    $ret->where('jobs.auto_offers', '=', $request->auto_offers);
                }
                
                $weekly_pay_from = (isset($request->weekly_pay_from) && $request->weekly_pay_from != "") ? $request->weekly_pay_from : "";
                $weekly_pay_to = (isset($request->weekly_pay_to) && $request->weekly_pay_to != "") ? $request->weekly_pay_to : "";
                if ($weekly_pay_from != "" && $weekly_pay_to != "") {
                    $ret->where(function (Builder $query) use ($weekly_pay_from,  $weekly_pay_to) {
                        $query->whereBetween('weekly_pay', array(intval($weekly_pay_from), intval($weekly_pay_to)));
                    });
                }
    
                $hourly_pay_from = (isset($request->hourly_pay_from) && $request->hourly_pay_from != "") ? $request->hourly_pay_from : "";
                $hourly_pay_to = (isset($request->hourly_pay_to) && $request->hourly_pay_to != "") ? $request->hourly_pay_to : "";
                if ($hourly_pay_from != "" && $hourly_pay_to != "") {
                    $ret->where(function (Builder $query) use ($hourly_pay_from,  $hourly_pay_to) {
                        $query->whereBetween('hours_shift', array(intval($hourly_pay_from), intval($hourly_pay_to)));
                    });
                }
    
                $hours_per_week_from = (isset($request->hours_per_week_from) && $request->hours_per_week_from != "") ? $request->hours_per_week_from : "";
                $hours_per_week_to = (isset($request->hours_per_week_to) && $request->hours_per_week_to != "") ? $request->hours_per_week_to : "";
                if ($hours_per_week_from != "" && $hours_per_week_to != "") {
                    $ret->where(function (Builder $query) use ($hours_per_week_from,  $hours_per_week_to) {
                        $query->whereBetween('hours_per_week', array(intval($hours_per_week_from), intval($hours_per_week_to)));
                    });
                }
    
                $assignment_from = (isset($request->assignment_from) && $request->assignment_from != "") ? $request->assignment_from : "";
                $assignment_to = (isset($request->assignment_to) && $request->assignment_to != "") ? $request->assignment_to : "";
                if ($assignment_from != "" && $assignment_to != "") {
                    $ret->where(function (Builder $query) use ($assignment_from,  $assignment_to) {
                        $query->whereBetween('preferred_assignment_duration', array(intval($assignment_from), intval($assignment_to)));
                    });
                }
                
                $job_data = $ret->get();
                $records = $this->jobData($job_data, $request->user_id);

                $result = [];
                foreach($records as $check_rec){
                    $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$check_rec['job_id'].'"');
                    if($check_rec['position_available'] > $is_vacancy[0]->hired_jobs)
                    {
                        $is_delete = DB::table('job_saved')->where(['job_id' => $check_rec['job_id'], 'nurse_id' => $request->user_id, 'is_delete' => '1'])->first();
                        if(!isset($check_rec['start_date']) && $check_rec['start_date'] == ''){
                            $check_rec['start_date'] = NULL;
                        }
                        if(empty($is_delete)){
                            $result[] = $check_rec;
                        }
                    }else{
                        if($check_rec['active'] != 0){
                            Job::where([
                                'id' => $check_rec['job_id'],
                            ])->update(['is_closed' => '1']);
                        }
                    }
                }
                
                $num = 0;
                $newDate = '';
                $new_result = [];
                if (isset($request->start_date) && $request->start_date != "") {
                    foreach($result as $rec)
                    {
                        if($rec['start_date_comp'] >= $request->start_date){
                            // echo $rec['start_date_comp']." = ".$request->start_date;
                            // print_r("\n");
                            $new_result[] = $rec;
                            $new_result[$num]['created_at_definition'] = $rec['created_at_browse'];
                            $new_result[$num]['description'] = strip_tags($rec['description']);
                            $new_result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                            $new_result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                            $new_result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                            $new_result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                            $num++;
                        }
                    }
                }else{
                    
                    foreach($result as $rec){
                        $new_result[] = $rec;
                        $new_result[$num]['created_at_definition'] = $rec['created_at_browse'];
                        $new_result[$num]['description'] = strip_tags($rec['description']);
                        $new_result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                        $new_result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                        $new_result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                        $new_result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                        $num++;
                    }
                }
                // print_r($new_result);
                // die();
                $data = [];
                foreach($new_result as $val){
                    if($val['is_applied'] != '0'){
                        continue;
                    }
                    $data[] = $val;
                }
    
                $datas = [];
                foreach($data as $val){
                    if($val['is_saved'] == '1'){
                        continue;
                    }
                    $datas[] = $val;
                }
    
                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $datas;
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function viewJob(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            'user_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $whereCond = [
                'facilities.active' => true,
                'jobs.is_open' => "1",
                'jobs.active' => '1',
                'jobs.id' => $request->id,
                'jobs.is_closed' => "0"
            ];

            $ret = Job::select('keywords.title as keyword_title','keywords.filter as keyword_filter','jobs.id as job_id', 'jobs.*', 'facilities.*')
                ->leftJoin('facilities', function ($join) {
                    $join->on('facilities.id', '=', 'jobs.facility_id');
                })
                ->leftJoin('keywords', function ($join) {
                    $join->on('keywords.id', '=', 'jobs.job_type');
                })
                ->where($whereCond)
                ->orderBy('jobs.created_at', 'desc');

            $user_id =  isset($request->user_id)?$request->user_id:'';
            $jobdata = $ret->get();
            // $jobdata = $ret->paginate(10);
            $result = $this->jobData($jobdata, $user_id);
            $num = '0';
            foreach($result as $rec){
                $result[$num]['description'] = strip_tags($rec['description']);
                $result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                $result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                $result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                $result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                $num++;
            }

            $this->check = "1";
            $this->message = "View job listed successfully";
            $this->return_data = $result;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function exploreJobList(Request $request)
    {
        $whereCond = [
            'facilities.active' => true,
            'jobs.is_open' => "1",
            'jobs.active' => '1',
            'jobs.is_closed' => "0"
        ];
        $ret = Job::select('jobs.id as job_id', 'jobs.auto_offers as auto_offers', 'jobs.*')
            ->leftJoin('facilities', function ($join) {
                $join->on('facilities.id', '=', 'jobs.facility_id');
            })
            ->where($whereCond)
            ->orderBy('jobs.created_at', 'desc');

        if (isset($request->profession) && $request->profession != "") {
            $ret->where('jobs.profession', '=', $request->profession);
        }

        if (isset($request->type) && $request->type != "") {
            $ret->where('jobs.type', '=', $request->type);
        }

        if (isset($request->preferred_specialty) && $request->preferred_specialty != "") {
            $ret->where('jobs.preferred_specialty', '=', $request->preferred_specialty);
        }

        if (isset($request->preferred_experience) && $request->preferred_experience != "") {
            $ret->where('jobs.preferred_experience', '=', $request->preferred_experience);
        }

        if (isset($request->search_location) && $request->search_location != "") $ret->search(['job_city', 'job_state'], $request->search_location);

        if(isset($request->job_type) && $request->job_type != ""){
            $ret->where('jobs.job_type', '=', $request->job_type);
        }
        
        if (isset($request->end_date) && !empty($request->end_date)) {
            $ret->where('jobs.end_date', '<=', $request->end_date);
        }

        if (isset($request->preferred_shift) && $request->preferred_shift != "") {
            $ret->where('jobs.preferred_shift', '=', $request->preferred_shift);
        }

        if (isset($request->auto_offers) && $request->auto_offers != "") {
            $ret->where('jobs.auto_offers', '=', $request->auto_offers);
        }
        
        $weekly_pay_from = (isset($request->weekly_pay_from) && $request->weekly_pay_from != "") ? $request->weekly_pay_from : "";
        $weekly_pay_to = (isset($request->weekly_pay_to) && $request->weekly_pay_to != "") ? $request->weekly_pay_to : "";
        if ($weekly_pay_from != "" && $weekly_pay_to != "") {
            $ret->where(function (Builder $query) use ($weekly_pay_from,  $weekly_pay_to) {
                $query->whereBetween('weekly_pay', array(intval($weekly_pay_from), intval($weekly_pay_to)));
            });
        }

        $hourly_pay_from = (isset($request->hourly_pay_from) && $request->hourly_pay_from != "") ? $request->hourly_pay_from : "";
        $hourly_pay_to = (isset($request->hourly_pay_to) && $request->hourly_pay_to != "") ? $request->hourly_pay_to : "";
        if ($hourly_pay_from != "" && $hourly_pay_to != "") {
            $ret->where(function (Builder $query) use ($hourly_pay_from,  $hourly_pay_to) {
                $query->whereBetween('hours_shift', array(intval($hourly_pay_from), intval($hourly_pay_to)));
            });
        }

        $hours_per_week_from = (isset($request->hours_per_week_from) && $request->hours_per_week_from != "") ? $request->hours_per_week_from : "";
        $hours_per_week_to = (isset($request->hours_per_week_to) && $request->hours_per_week_to != "") ? $request->hours_per_week_to : "";
        if ($hours_per_week_from != "" && $hours_per_week_to != "") {
            $ret->where(function (Builder $query) use ($hours_per_week_from,  $hours_per_week_to) {
                $query->whereBetween('hours_per_week', array(intval($hours_per_week_from), intval($hours_per_week_to)));
            });
        }

        $assignment_from = (isset($request->assignment_from) && $request->assignment_from != "") ? $request->assignment_from : "";
        $assignment_to = (isset($request->assignment_to) && $request->assignment_to != "") ? $request->assignment_to : "";
        if ($assignment_from != "" && $assignment_to != "") {
            $ret->where(function (Builder $query) use ($assignment_from,  $assignment_to) {
                $query->whereBetween('preferred_assignment_duration', array(intval($assignment_from), intval($assignment_to)));
            });
        }
        
        $job_data = $ret->get();
        $result = [];
        $data = [];
        $newDate = '';
        if (isset($request->start_date) && $request->start_date != "") {
            foreach($job_data as $val)
            {    
                $newDate = isset($val['start_date'])?date("Y-m-d", strtotime($val['start_date'])):'';
                if(($newDate >= $request->start_date) && ($val['start_date'] != '')){
                    $result['start_date'] = isset($val['start_date'])?$val['start_date']:"";
                    $result['job_id'] = isset($val['job_id'])?$val['job_id']:"";
                    $result['job_type'] = isset($val['job_type'])?$val['job_type']:"";
                    $result['type'] = isset($val['type'])?$val['type']:"";
                    $result['job_name'] = isset($val['job_name'])?$val['job_name']:"";
                    $result['job_location'] = isset($val['job_location'])?$val['job_location']:"";
                    $result['city'] = isset($val['job_city'])?$val['job_city']:"";
                    $result['state'] = isset($val['job_state'])?$val['job_state']:"";
                    $result['preferred_shift'] = isset($val['preferred_shift'])?$val['preferred_shift']:"";
                    $result['preferred_shift_duration'] = isset($val['preferred_shift'])?$val['preferred_shift']:"";
                    $result['preferred_assignment_duration'] = isset($val['preferred_assignment_duration'])?$val['preferred_assignment_duration']:"";
                    $result['employer_weekly_amount'] = isset($val['employer_weekly_amount'])?$val['employer_weekly_amount']:"";
                    $result['weekly_pay'] = isset($val['weekly_pay'])?$val['weekly_pay']:"";
                    $result['hours_per_week'] = isset($val['hours_per_week'])?$val['hours_per_week']:"";
                    $result['created_at'] = isset($val['created_at'])? date('d-F-Y h:i A', strtotime($val['created_at'])) :"";
                    $time_difference = time() - strtotime($val['created_at']);
                    if($time_difference > 3599){
                        $j_data["created_at_definition"] = isset($val['created_at']) ?$this->timeAgo(date(strtotime($val['created_at']))) : "";
                    }else{
                        $j_data["created_at_definition"] = isset($val['created_at']) ?'Recently Added' : "";
                    }
                    // $result['created_at_definition'] = 'Recently Added';
                    $data[] = $result;
                }
            }
        }else{
            foreach($job_data as $val)
            {    
                $result['start_date'] = isset($val['start_date'])?$val['start_date']:"";
                $result['job_id'] = isset($val['job_id'])?$val['job_id']:"";
                $result['job_type'] = isset($val['job_type'])?$val['job_type']:"";
                $result['type'] = isset($val['type'])?$val['type']:"";
                $result['job_name'] = isset($val['job_name'])?$val['job_name']:"";
                $result['job_location'] = isset($val['job_location'])?$val['job_location']:"";
                $result['city'] = isset($val['job_city'])?$val['job_city']:"";
                $result['state'] = isset($val['job_state'])?$val['job_state']:"";
                $result['preferred_shift'] = isset($val['preferred_shift'])?$val['preferred_shift']:"";
                $result['preferred_shift_duration'] = isset($val['preferred_shift'])?$val['preferred_shift']:"";
                $result['preferred_assignment_duration'] = isset($val['preferred_assignment_duration'])?$val['preferred_assignment_duration']:"";
                $result['employer_weekly_amount'] = isset($val['employer_weekly_amount'])?$val['employer_weekly_amount']:"";
                $result['weekly_pay'] = isset($val['weekly_pay'])?$val['weekly_pay']:"";
                $result['hours_per_week'] = isset($val['hours_per_week'])?$val['hours_per_week']:"";
                $result['created_at'] = isset($val['created_at'])? date('d-F-Y h:i A', strtotime($val['created_at'])) :"";
                $result['created_at_definition'] = 'Recently Added';
                $data[] = $result;
            }
        }

        $this->check = "1";
        $this->message = "Jobs listed successfully";
        $this->return_data = $data;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobApplied(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'job_id' => 'required',
            'type' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_exists = Follows::where([
                'user_id' => $request->user_id,
                'job_id' => $request->job_id,
            ]);
            if ($check_exists->count() > 0) {
                $follows = Follows::where([
                    'user_id' => $request->user_id,
                    'job_id' => $request->job_id,
                ])->update(['applied_status' => $request->type]);
            } else {
                $follows = Follows::create([
                    'user_id' => $request->user_id,
                    'job_id' => $request->job_id,
                    'applied_status' => $request->type
                ]);
            }

            $this->check = "1";
            $this->message = ($request->type == "1") ? "Applied successfully" : "Apply removed successfully";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobLikes(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'job_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if(!empty($request->role)){
                $record = NURSE::where(['id' => $request->user_id])->get()->first();
                $user_id = $record->user_id;
            }else{
                $user_id = $request->user_id;
            }

            $check_exists = DB::table('follows')->where(['user_id' => $user_id, 'job_id' => $request->job_id,])->get()->first();
            
            if (!empty($check_exists->id)) {
                if($check_exists->like_status != '1'){
                    $follows = DB::table('follows')->where([
                        'user_id' => $user_id,
                        'job_id' => $request->job_id,
                    ])->update(['like_status' => '1']);

                    $this->check = "1";
                    $this->message = "Job save successfully";
                    $this->return_data = $follows;

                }else{
                    $follows = Follows::where([
                        'user_id' => $user_id,
                        'job_id' => $request->job_id,
                    ])->update(['like_status' => '0']);
                $this->check = "1";
                $this->message = "Removed job from save successfully";
                $this->return_data = $follows;
                }
                
            } else {
                $follows = Follows::create([
                    'user_id' => $user_id,
                    'job_id' => $request->job_id,
                    'like_status' => $request->like_status ? $request->like_status:'1'
                ]);
                
                $this->check = "1";
                $this->message = "Job save successfully";
                $this->return_data = $follows;
            }

        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobData($jobdata, $user_id = "")
    {
        $result = [];
        if (!empty($jobdata)) {
            
            $controller = new Controller();
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $shifts = $this->getShifts()->pluck('title', 'id');
            $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
            $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
            $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
            $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
            $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
            $weekDays = $this->getWeekDayOptions();
            foreach ($jobdata as $key => $job)
            {
                $j_data["offer_id"] = isset($job['offer_id']) ? $job['offer_id'] : "";
                $j_data["job_id"] = isset($job['job_id']) ? $job['job_id'] : "";
                $j_data["end_date"] = isset($job['end_date']) ? date('d F Y', strtotime($job['end_date'])) : "";
                $j_data["end_date_comp"] = isset($job['end_date'])?date("Y-m-d", strtotime($job['end_date'])):'';
                $j_data["start_date_comp"] = isset($job['start_date'])?date("Y-m-d", strtotime($job['start_date'])):'';
                $j_data["start_date"] = isset($job['start_date']) ? $job['start_date'] : "";
                $j_data["job_type"] = isset($job['job_type']) ? $job['job_type'] : "";
                $j_data["type"] = isset($job['type']) ? $job['type'] : "";
                $j_data["job_name"] = isset($job['job_name']) ? $job['job_name'] : "";
                $j_data["keyword_title"] = isset($job['keyword_title']) ? $job['keyword_title'] : "";
                $j_data["keyword_filter"] = isset($job['keyword_filter']) ? $job['keyword_filter'] : "";
                $j_data["auto_offers"] = isset($job['auto_offers']) ? $job['auto_offers'] : "";
                $j_data["active"] = isset($job['active']) ? $job['active'] : "";

                $j_data["job_location"] = isset($job['job_location']) ? $job['job_location'] : "";
                $j_data["position_available"] = isset($job['position_available']) ? $job['position_available'] : "";
                $j_data["employer_weekly_amount"] = isset($job['employer_weekly_amount']) ? $job['employer_weekly_amount'] : "";
                $j_data["weekly_pay"] = isset($job['weekly_pay']) ? $job['weekly_pay'] : "";
                $j_data["hours_per_week"] = isset($job['hours_per_week']) ? $job['hours_per_week'] : 0;
                
                $j_data["preferred_specialty"] = isset($job['preferred_specialty']) ? $job['preferred_specialty'] : "";
                $j_data["preferred_specialty_definition"] = isset($specialties[$job['preferred_specialty']])  ? $specialties[$job['preferred_specialty']] : "";

                $j_data["preferred_assignment_duration"] = isset($job['preferred_assignment_duration']) ? $job['preferred_assignment_duration'] : "";
                $j_data["preferred_assignment_duration_definition"] = isset($assignmentDurations[$job['preferred_assignment_duration']]) ? $assignmentDurations[$job['preferred_assignment_duration']] : "";
                if(isset($j_data["preferred_assignment_duration_definition"]) && !empty($j_data["preferred_assignment_duration_definition"])){
                    $assignment = explode(" ", $assignmentDurations[$job['preferred_assignment_duration']]);
                    $j_data["preferred_assignment_duration_definition"] = $assignment[0]; // 12 Week
                } 
                $j_data["preferred_shift_duration"] = isset($job['preferred_shift']) ? $job['preferred_shift'] : "";
                // $j_data["preferred_shift_duration_definition"] = isset($shifts[$job->preferred_shift_duration]) ? $shifts[$job->preferred_shift_duration] : "";
                
                $j_data["preferred_work_location"] = isset($job['preferred_work_location']) ? $job['preferred_work_location'] : "";
                $j_data["preferred_work_location_definition"] = isset($workLocations[$job['preferred_work_location']]) ? $workLocations[$job['preferred_work_location']] : "";

                $j_data["preferred_work_area"] = isset($job['preferred_work_area']) ? $job['preferred_work_area'] : "";
                $j_data["preferred_days_of_the_week"] = isset($job['preferred_days_of_the_week']) ? explode(",", $job['preferred_days_of_the_week']) : [];
                $j_data["preferred_hourly_pay_rate"] = isset($job['preferred_hourly_pay_rate']) ? $job['preferred_hourly_pay_rate'] : "";
                $j_data["preferred_experience"] = isset($job['preferred_experience']) ? $job['preferred_experience'] : "";
                $j_data["description"] = isset($job['description']) ? $job['description'] : "";
                // $time_difference = strtotime($job['created_at']);
                $time_difference = time() - strtotime($job['created_at']);
                if($time_difference > 3599){
                    $j_data["created_at_browse"] = isset($job['created_at']) ?$this->timeAgo(date(strtotime($job['created_at']))) : "";
                }else{
                    $j_data["created_at_browse"] = isset($job['created_at']) ?'Recently Added' : "";
                }
                $j_data["created_at"] = isset($job['created_at']) ? date('d-F-Y h:i A', strtotime($job['created_at'])) : "";
                $j_data["created_at_definition"] = isset($job['created_at']) ?date('M d Y', strtotime($job['created_at'])) : "";
                
                $j_data["updated_at"] = isset($job->updated_at) ? date('M d Y', strtotime($job->updated_at)) : "";
                $j_data["deleted_at"] = isset($job->deleted_at) ? date('d-F-Y h:i A', strtotime($job->deleted_at)) : "";
                $j_data["created_by"] = isset($job->created_by) ? $job->created_by : "";
                $j_data["slug"] = isset($job['slug']) ? $job['slug'] : "";
                $j_data["facility_id"] = isset($job['facility_id']) ? $job['facility_id'] : "";
                
                $j_data["seniority_level"] = isset($job->seniority_level) ? $job->seniority_level : "";
                $j_data["seniority_level_definition"] = isset($seniorityLevels[$job->seniority_level]) ? $seniorityLevels[$job->seniority_level] : "";

                $j_data["job_function"] = isset($job->job_function) ? $job->job_function : "";
                $j_data["job_function_definition"] = isset($jobFunctions[$job->job_function]) ? $jobFunctions[$job->job_function] : "";

                $j_data["responsibilities"] = isset($job->responsibilities) ? $job->responsibilities : "";
                $j_data["qualifications"] = isset($job->qualifications) ? $job->qualifications : "";

                $j_data["job_cerner_exp"] = isset($job->job_cerner_exp) ? $job->job_cerner_exp : "";
                $j_data["job_cerner_exp_definition"] = isset($ehrProficienciesExp[$job->job_cerner_exp]) ? $ehrProficienciesExp[$job->job_cerner_exp] : "";

                $j_data["job_meditech_exp"] = isset($job->job_meditech_exp) ? $job->job_meditech_exp : "";
                $j_data["job_meditech_exp_definition"] = isset($ehrProficienciesExp[$job->job_meditech_exp]) ? $ehrProficienciesExp[$job->job_meditech_exp] : "";

                $j_data["job_epic_exp"] = isset($job->job_epic_exp) ? $job->job_epic_exp : "";
                $j_data["job_epic_exp_definition"] = isset($ehrProficienciesExp[$job->job_epic_exp]) ? $ehrProficienciesExp[$job->job_epic_exp] : "";

                $j_data["job_other_exp"] = isset($job->job_other_exp) ? $job->job_other_exp : "";
                // $j_data["job_photos"] = isset($job->job_photos) ? $job->job_photos : "";
                $j_data["video_embed_url"] = isset($job->video_embed_url) ? $job->video_embed_url : "";
                $j_data["is_open"] = isset($job['is_open']) ? $job['is_open'] : "";
                $j_data["name"] = isset($job['facility']->name) ? $job['facility']->name : "";
                // $j_data["city"] = isset($job->facility->city) ? $job->facility->city : "";
                // $j_data["state"] = isset($job->facility->state) ? $job->facility->state : "";
                $j_data["city"] = isset($job['job_city']) ? $job['job_city'] : "";
                $j_data["state"] = isset($job['job_state']) ? $job['job_state']: "";
                $j_data["postcode"] = isset($job['facility']->postcode) ? $job['facility']->postcode : "";
                
                $j_data["facility_logo"] = isset($job->facility->facility_logo) ? url("public/images/facilities/" . $job->facility->facility_logo) : "";
                $j_data["facility_email"] = isset($job->facility->facility_email) ? $job->facility->facility_email : "";
                $j_data["facility_phone"] = isset($job->facility->facility_phone) ? $job->facility->facility_phone : "";
                $j_data["specialty_need"] = isset($job->facility->specialty_need) ? $job->facility->specialty_need : "";
                $j_data["cno_message"] = isset($job->facility->cno_message) ? $job->facility->cno_message : "";

                $j_data["cno_image"] = isset($job->facility->cno_image) ? url("public/images/facilities/cno_image".$job->facility->cno_image) : "";
                
                $j_data["about_facility"] = isset($job->facility->about_facility) ? $job->facility->about_facility : "";
                $j_data["facility_website"] = isset($job->facility->facility_website) ? $job->facility->facility_website : "";
                
                $j_data["f_emr"] = isset($job->facility->f_emr) ? $job->facility->f_emr : "";
                $j_data["f_emr_other"] = isset($job->facility->f_emr_other) ? $job->facility->f_emr_other : "";
                $j_data["f_bcheck_provider"] = isset($job->facility->f_bcheck_provider) ? $job->facility->f_bcheck_provider : "";
                $j_data["f_bcheck_provider_other"] = isset($job->facility->f_bcheck_provider_other) ? $job->facility->f_bcheck_provider_other : "";
                $j_data["nurse_cred_soft"] = isset($job->facility->nurse_cred_soft) ? $job->facility->nurse_cred_soft : "";
                $j_data["nurse_cred_soft_other"] = isset($job->facility->nurse_cred_soft_other) ? $job->facility->nurse_cred_soft_other : "";
                $j_data["nurse_scheduling_sys"] = isset($job->facility->nurse_scheduling_sys) ? $job->facility->nurse_scheduling_sys : "";
                $j_data["nurse_scheduling_sys_other"] = isset($job->facility->nurse_scheduling_sys_other) ? $job->facility->nurse_scheduling_sys_other : "";
                $j_data["time_attend_sys"] = isset($job->facility->time_attend_sys) ? $job->facility->time_attend_sys : "";
                $j_data["time_attend_sys_other"] = isset($job->facility->time_attend_sys_other) ? $job->facility->time_attend_sys_other : "";
                $j_data["licensed_beds"] = isset($job->facility->licensed_beds) ? $job->facility->licensed_beds : "";
                $j_data["trauma_designation"] = isset($job->facility->trauma_designation) ? $job->facility->trauma_designation : "";
                $j_data["contract_termination_policy"] = isset($job->facility->contract_termination_policy) ? $job->facility->contract_termination_policy : "";
                $j_data["clinical_setting_you_prefer"] = isset($job->facility->clinical_setting_you_prefer) ? $job->facility->clinical_setting_you_prefer : "";
                $j_data["Shift"] = isset($job->facility->worker_shift_time_of_day) ? $job->facility->worker_shift_time_of_day : "";
                $j_data["worker_hours_shift"] = isset($job->facility->worker_hours_shift) ? $job->facility->worker_hours_shift : "";
                $j_data["worker_shifts_week"] = isset($job->facility->worker_shifts_week) ? $job->facility->worker_shifts_week : "";
                $j_data["facility_shift_cancelation_policy"] = isset($job->facility->facility_shift_cancelation_policy) ? $job->facility->facility_shift_cancelation_policy : "";
                
                /* total applied */
                $total_follow_count = Follows::where(['job_id' => $job['job_id'], "applied_status" => "1", 'status' => "1"])->distinct('user_id')->count();
                $j_data["total_applied"] = strval($total_follow_count);
                /* total applied */

                /* liked */
                $is_applied = "0";
                if ($user_id != "")
                    // $is_applied = Follows::where(['job_id' => $job->job_id, "applied_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                    $is_applied = Follows::where(['job_id' => $job['job_id'], "applied_status" => "1", 'status' => "1", "user_id" => $user_id])->distinct('user_id')->count();
                /* liked */
                $j_data["is_applied"] = strval($is_applied);

                /* liked */
                $is_liked = "0";
                if ($user_id != "")
                    $is_liked = Follows::where(['job_id' => $job['job_id'], "like_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                
                /* liked */
                $j_data["is_liked"] = strval($is_liked);

                // $j_data["shift"] = "Days";
                $j_data["start_date"] = date('d F Y', strtotime($job['start_date']));

                $j_data['applied_nurses'] = '0';
                $applied_nurses = Offer::where(['job_id' => $job['job_id'], 'status'=>'Apply'])->count();
                $j_data['applied_nurses'] = strval($applied_nurses);

                $is_saved = '0';
                if ($user_id != ""){
                    $nurse_info = NURSE::where('user_id', $user_id);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();
                        $whereCond = [
                            'job_saved.nurse_id' => $user_id,
                            'job_saved.job_id' => $job['job_id'],
                        ];
                        $limit = 10;
                        $saveret = \DB::table('job_saved')
                        ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                        ->where($whereCond);
                        
                        if ($saveret->count() > 0) {
                            $is_saved = '1';
                        }
                        
                    }
                }
                $j_data["is_saved"] = $is_saved;
                $result[] = $j_data;
            }
        }
        return $result;
    }

    public function browse_facilities(Request $request)
    {
        if (isset($request->facility_id) && $request->facility_id != "") {
            $whereCond = ['facilities.id' => $request->facility_id, 'facilities.active' => true];
        } else {
            // $whereCond = ['facilities.active' => true, 'jobs.is_open' => "1"];
            $whereCond = ['facilities.active' => true];
        }

        $ret = Facility::select('facilities.id as facility_id', 'facilities.*', 'jobs.preferred_specialty')
            ->leftJoin('jobs', function ($join) {
                $join->on('facilities.id', '=', 'jobs.facility_id');
            })
            ->where($whereCond);

        if (isset($request->facility_type) && $request->facility_type  != "") {
            $type = $request->facility_type;
            $ret->where(function (Builder $query) use ($type) {
                $query->whereIn('type', $type);
            });
        }

        if (isset($request->electronic_medical_records) && $request->electronic_medical_records != "") {
            $electronic_medical_records = $request->electronic_medical_records;
            $ret->where(function (Builder $query) use ($electronic_medical_records) {
                $query->whereIn('f_emr', $electronic_medical_records);
            });
        }

        /* name search for api */
        if (isset($request->search_keyword) && $request->search_keyword != "") {
            $search_keyword = $request->search_keyword;
            $ret->search([
                'name'
            ], $search_keyword);
        }
        /* name search for api */

        /*new update jan 10*/
        $open_assignment_type = (isset($request->open_assignment_type) && $request->open_assignment_type != "") ? $request->open_assignment_type : "";
        /*if ($open_assignment_type) {
                $ret->where('jobs.preferred_specialty', '=', $open_assignment_type);
        }*/
        if ($open_assignment_type != "") {
            $ret->where(function (Builder $query) use ($open_assignment_type) {
                $query->whereIn('jobs.preferred_specialty', $open_assignment_type);
            });
        }
        /*new update jan 10*/

        /*new update jan 10*/
        /* state city and postcode new update */
        $states = (isset($request->state) && $request->state != "") ? $request->state : "";
        if (isset($states) && $states != "") {
            $getStates = States::where(['id' => $states])->get();
            if ($getStates->count() > 0) {
                $selected_state = $getStates->first();
                $name = $selected_state->name;
                $iso2 = $selected_state->iso2;
                $ret->where(function (Builder $query1) use ($name, $iso2) {
                    $query1->where('state', array($name));
                    $query1->orWhere('state', array($iso2));
                });
            }
        }

        $cities = (isset($request->city) && $request->city != "") ? $request->city : "";
        if (isset($cities) && $cities != "") {
            $getCities = Cities::where(['id' => $cities])->get();
            if ($getCities->count() > 0) {
                $selected_city = $getCities->first();
                $name = $selected_city->name;
                $ret->where(function (Builder $query1) use ($name) {
                    $query1->where('city', array($name));
                });
            }
        }

        $zipcode = (isset($request->zipcode) && $request->zipcode != "") ? $request->zipcode : "";
        if (isset($zipcode) && $zipcode != "") {
            $ret->where(function (Builder $query_zip) use ($zipcode) {
                $query_zip->where('postcode', array($zipcode));
            });
            /*$zipcode_inp = [];
                $nearest = $this->getNearestMiles($zipcode);
                if (isset($nearest['results']) && !empty($nearest['results'])) {
                    foreach ($nearest['results'] as $zipkey => $zip_res) {
                        $zipcode_inp[] = $zip_res['code'];
                    }
                }
                if (!empty($zipcode_inp)) {
                    $ret->where(function (Builder $query_zip) use ($zipcode_inp) {
                        $query_zip->whereIn('postcode', $zipcode_inp);
                    });
                } else {
                    $ret->where(function (Builder $query_zip) use ($zipcode) {
                        $query_zip->where('postcode', array($zipcode));
                    });
                }*/
        }
        /* state city and postcode new update */
        /*new update jan 10*/

        $ret->groupBy('facilities.id')->orderBy('created_at', 'desc');
        $facility_data = (isset($request->facility_id) && $request->facility_id != "") ? $ret->paginate(1) : $ret->paginate(10);
        $user_id = (isset($request->user_id) && $request->user_id != "") ? $request->user_id : "";

        $response = $this->facilityData($facility_data, $user_id);
        // $response = $this->facilityData($facility_data, $user_id = $request->user_id);

        $this->check = "1";
        $this->message = "Facilities listed below";
        $this->return_data = $response;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityFollows(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'facility_id' => 'required',
            'type' => 'required',
            'api_key' => 'required',
        ]);


        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_exists = FacilityFollows::where([
                'user_id' => $request->user_id,
                'facility_id' => $request->facility_id,
            ]);
            if ($check_exists->count() > 0) {
                $follows = FacilityFollows::where([
                    'user_id' => $request->user_id,
                    'facility_id' => $request->facility_id,
                ])->update(['follow_status' => strval($request->type)]);
            } else {
                $follows = FacilityFollows::create([
                    'user_id' => $request->user_id,
                    'facility_id' => $request->facility_id,
                    'follow_status' => strval($request->type)
                ]);
            }

            $this->check = "1";
            $this->message = ($request->type == "1") ? "Followed successfully" : "Unfollowed successfully";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityLikes(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'facility_id' => 'required',
            'like' => 'required',
            'api_key' => 'required',
        ]);


        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_exists = FacilityFollows::where([
                'user_id' => $request->user_id,
                'facility_id' => $request->facility_id,
            ]);
            if ($check_exists->count() > 0) {
                $follows = FacilityFollows::where([
                    'user_id' => $request->user_id,
                    'facility_id' => $request->facility_id,
                ])->update(['like_status' => $request->like]);
            } else {
                $follows = FacilityFollows::create([
                    'user_id' => $request->user_id,
                    'facility_id' => $request->facility_id,
                    'like_status' => $request->like
                ]);
            }

            $this->check = "1";
            $this->message = ($request->like == "1") ? "Liked successfully" : "Disliked successfully";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityData($facility_result, $user_id = "")
    {
        $result = [];
        if (!empty($facility_result)) {
            foreach ($facility_result as $key => $facility_data) {
                $facility["id"] = (isset($facility_data->id) && $facility_data->id != "") ? $facility_data->facility_id : "";
                $facility["facility_logo"]  = (isset($facility_data->facility_logo) && $facility_data->facility_logo != "") ?  url("public/images/facilities/" . $facility_data->facility_logo) : "";
                
                $facility["created_by"] = (isset($facility_data->created_by) && $facility_data->created_by != "") ? $facility_data->created_by : "";
                $facility["name"] = (isset($facility_data->name) && $facility_data->name != "") ? $facility_data->name : "";
                $facility["address"] = (isset($facility_data->address) && $facility_data->address != "") ? $facility_data->address : "";
                $facility["city"] = (isset($facility_data->city) && $facility_data->city != "") ? $facility_data->city : "";
                $facility["state"] = (isset($facility_data->state) && $facility_data->state != "") ? $facility_data->state : "";
                $facility["postcode"] = (isset($facility_data->postcode) && $facility_data->postcode != "") ? $facility_data->postcode : "";
                $facility["facility_type"] = (isset($facility_data->type) && $facility_data->type != "") ? strval($facility_data->type) : "";
                $facility["facility_type_definition"] = (isset($facility_data->type) && $facility_data->type != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->type) : "";
                $facility["active"] = (isset($facility_data->active) && $facility_data->active != "") ? $facility_data->active : "";
                $facility["deleted_at"] = (isset($facility_data->deleted_at) && $facility_data->deleted_at != "") ? $facility_data->deleted_at : "";
                $facility["created_at"] = (isset($facility_data->created_at) && $facility_data->created_at != "") ? $facility_data->created_at : "";
                $facility["updated_at"] = (isset($facility_data->updated_at) && $facility_data->updated_at != "") ? $facility_data->updated_at : "";
                $facility["facility_email"] = (isset($facility_data->facility_email) && $facility_data->facility_email != "") ? $facility_data->facility_email : "";
                $facility["facility_phone"] = (isset($facility_data->facility_phone) && $facility_data->facility_phone != "") ? $facility_data->facility_phone : "";
                $facility["specialty_need"] = (isset($facility_data->specialty_need) && $facility_data->specialty_need != "") ? $facility_data->specialty_need : "";
                $facility["slug"] = (isset($facility_data->slug) && $facility_data->slug != "") ? $facility_data->slug : "";
                $facility["cno_message"] = (isset($facility_data->cno_message) && $facility_data->cno_message != "") ? $facility_data->cno_message : "";

                $facility["cno_image"] = (isset($facility_data->cno_image) && $facility_data->cno_image != "") ? url('public/images/facilities/cno_image/' . $facility_data->cno_image) : "";
                $facility["gallery_images"] = (isset($facility_data->gallary_images) && $facility_data->gallary_images != "") ? $facility_data->gallary_images : "";
                $facility["video"] = (isset($facility_data->video) && $facility_data->video != "") ? $facility_data->video : "";
                $facility["facebook"] = (isset($facility_data->facebook) && $facility_data->facebook != "") ? $facility_data->facebook : "";
                $facility["twitter"] = (isset($facility_data->twitter) && $facility_data->twitter != "") ? $facility_data->twitter : "";
                $facility["linkedin"] = (isset($facility_data->linkedin) && $facility_data->linkedin != "") ? $facility_data->linkedin : "";
                $facility["instagram"] = (isset($facility_data->instagram) && $facility_data->instagram != "") ? $facility_data->instagram : "";
                $facility["pinterest"] = (isset($facility_data->pinterest) && $facility_data->pinterest != "") ? $facility_data->pinterest : "";
                $facility["tiktok"] = (isset($facility_data->tiktok) && $facility_data->tiktok != "") ? $facility_data->tiktok : "";
                $facility["sanpchat"] = (isset($facility_data->sanpchat) && $facility_data->sanpchat != "") ? $facility_data->sanpchat : "";
                $facility["youtube"] = (isset($facility_data->youtube) && $facility_data->youtube != "") ? $facility_data->youtube : "";
                $facility["about_facility"] = (isset($facility_data->about_facility) && $facility_data->about_facility != "") ? $facility_data->about_facility : "";
                $facility["facility_website"] = (isset($facility_data->facility_website) && $facility_data->facility_website != "") ? $facility_data->facility_website : "";
                $facility["video_embed_url"] = (isset($facility_data->video_embed_url) && $facility_data->video_embed_url != "") ? $facility_data->video_embed_url : "";
                $facility["f_lat"] = (isset($facility_data->f_lat) && $facility_data->f_lat != "") ? $facility_data->f_lat : "";
                $facility["f_lang"] = (isset($facility_data->f_lang) && $facility_data->f_lang != "") ? $facility_data->f_lang : "";
                $facility["f_emr"] = (isset($facility_data->f_emr) && $facility_data->f_emr != "") ? $facility_data->f_emr : "";
                $facility["f_emr_definition"] = (isset($facility_data->f_emr) && $facility_data->f_emr != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->f_emr) : "";
                $facility["f_emr_other"] = (isset($facility_data->f_emr_other) && $facility_data->f_emr_other != "") ? $facility_data->f_emr_other : "";

                $facility["f_bcheck_provider"] = (isset($facility_data->f_bcheck_provider) && $facility_data->f_bcheck_provider != "") ? $facility_data->f_bcheck_provider : "";
                if ($facility["f_bcheck_provider"] == "0") $facility["f_bcheck_provider_definition"] = "Other";
                else $facility["f_bcheck_provider_definition"] = (isset($facility_data->f_bcheck_provider) && $facility_data->f_bcheck_provider != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->f_bcheck_provider) : "";
                $facility["f_bcheck_provider_other"] = (isset($facility_data->f_bcheck_provider_other) && $facility_data->f_bcheck_provider_other != "") ? $facility_data->f_bcheck_provider_other : "";

                $facility["nurse_cred_soft"] = (isset($facility_data->nurse_cred_soft) && $facility_data->nurse_cred_soft != "") ? $facility_data->nurse_cred_soft : "";
                if ($facility["nurse_cred_soft"] == "0") $facility["nurse_cred_soft_definition"] = "Other";
                else $facility["nurse_cred_soft_definition"] = (isset($facility_data->nurse_cred_soft) && $facility_data->nurse_cred_soft != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->nurse_cred_soft) : "";
                $facility["nurse_cred_soft_other"] = (isset($facility_data->nurse_cred_soft_other) && $facility_data->nurse_cred_soft_other != "") ? $facility_data->nurse_cred_soft_other : "";

                $facility["nurse_scheduling_sys"] = (isset($facility_data->nurse_scheduling_sys) && $facility_data->nurse_scheduling_sys != "") ? $facility_data->nurse_scheduling_sys : "";
                if ($facility["nurse_scheduling_sys"] == "0") $facility["nurse_scheduling_sys_definition"] = "Other";
                else $facility["nurse_scheduling_sys_definition"] = (isset($facility_data->nurse_scheduling_sys) && $facility_data->nurse_scheduling_sys != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->nurse_scheduling_sys) : "";
                $facility["nurse_scheduling_sys_other"] = (isset($facility_data->nurse_scheduling_sys_other) && $facility_data->nurse_scheduling_sys_other != "") ? $facility_data->nurse_scheduling_sys_other : "";

                $facility["time_attend_sys"] = (isset($facility_data->time_attend_sys) && $facility_data->time_attend_sys != "") ? $facility_data->time_attend_sys : "";
                $facility["time_attend_sys_definition"] = (isset($facility_data->time_attend_sys) && $facility_data->time_attend_sys != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->time_attend_sys) : "";
                $facility["time_attend_sys_other"] = (isset($facility_data->time_attend_sys_other) && $facility_data->time_attend_sys_other != "") ? $facility_data->time_attend_sys_other : "";

                $facility["licensed_beds"] = (isset($facility_data->licensed_beds) && $facility_data->licensed_beds != "") ? $facility_data->licensed_beds : "";
                $facility["licensed_beds_definition"] = (isset($facility_data->licensed_beds) && $facility_data->licensed_beds != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->licensed_beds) : "";
                $facility["trauma_designation"] = (isset($facility_data->trauma_designation) && $facility_data->trauma_designation != "") ? $facility_data->trauma_designation : "";
                $facility["trauma_designation_definition"] = (isset($facility_data->trauma_designation) && $facility_data->trauma_designation != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->trauma_designation) : "";
                $facility["preferred_specialty"] = (isset($facility_data->preferred_specialty) && $facility_data->preferred_specialty != "") ? strval($facility_data->preferred_specialty) : "";
                $facility["preferred_specialty_definition"] = (isset($facility_data->preferred_specialty) && $facility_data->preferred_specialty != "") ? \App\Providers\AppServiceProvider::keywordTitle($facility_data->preferred_specialty) : "";

                $facility["total_jobs"] = Job::where(['active' => '1', 'facility_id' => $facility_data->id])->count();

                /* rating */
                if ($user_id != "") {
                    $nurse_id = "";
                    $nurse = Nurse::where(['user_id' => $user_id]);
                    if ($nurse->count() > 0) {
                        $nurse_data = $nurse->first();
                        $nurse_id = (isset($nurse_data->id) && $nurse_data->id != "") ? $nurse_data->id : "";
                    }
                    if ($nurse_id != "")
                        $facility_rating_where = ['facility_id' => $facility_data->id, 'nurse_id' => $nurse_id];
                    else $facility_rating_where = ['facility_id' => $facility_data->id];
                } else {
                    $facility_rating_where = ['facility_id' => $facility_data->id];
                }
                $rating_info = FacilityRating::where($facility_rating_where);
                $overall = $on_board = $nurse_team_work = $leadership_support = $tools_todo_my_job = $a = [];
                if ($rating_info->count() > 0) {
                    foreach ($rating_info->get() as $key => $r) {
                        $overall[] = $r->overall;
                        $on_board[] = $r->on_board;
                        $nurse_team_work[] = $r->nurse_team_work;
                        $leadership_support[] = $r->leadership_support;
                        $tools_todo_my_job[] = $r->tools_todo_my_job;
                    }
                }
                $rating['over_all'] = $this->ratingCalculation(count($overall), $overall);
                $rating['on_board'] = $this->ratingCalculation(count($on_board), $on_board);
                $rating['nurse_team_work'] = $this->ratingCalculation(count($nurse_team_work), $nurse_team_work);
                $rating['leadership_support'] = $this->ratingCalculation(count($leadership_support), $leadership_support);
                $rating['tools_todo_my_job'] = $this->ratingCalculation(count($tools_todo_my_job), $tools_todo_my_job);

                /* rating */
                $facility["rating"] = $rating;

                $is_follow = "0";
                if ($user_id != "")
                    $is_follow = FacilityFollows::where(['facility_id' => $facility_data->facility_id, "follow_status" => "1", 'status' => "1", "user_id" => $user_id])->count();

                $facility["is_follow"] = $is_follow;

                $is_like = "0";
                if ($user_id != "")
                    $is_like = FacilityFollows::where(['facility_id' => $facility_data->facility_id, "like_status" => "1", 'status' => "1", "user_id" => $user_id])->count();

                $facility["is_like"] = $is_like;

                $result[] = $facility;
            }
        }
        return $result;
    }

    public function jobOffered(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = Nurse::where('user_id', '=', $request->user_id)->get();
            if ($nurse->count() > 0) {
                $nurse = $nurse->first();
                $whereCond = [
                    'active' => true,
                    'status' => 'Offered'
                ];
                $offers = Offer::where($whereCond)
                    ->where('nurse_id', $nurse->id)
                    ->where('expiration', '>=', date('Y-m-d H:i:s'))
                    ->whereNotNull('job_id')
                    ->orderBy('created_at', 'desc');

                $o_data['offer'] = [];
                $limit = 10;
                $total_pages = ceil($offers->count() / $limit);
                $o_data['total_pages_available'] =  strval($total_pages);
                $o_data["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
                $o_data['results_per_page'] = strval($limit);

                if ($offers->count() > 0) {
                    // $result = $offers->paginate($limit);
                    $result = $offers->get();

                    /* common */
                    $controller = new Controller();
                    $specialties = $controller->getSpecialities()->pluck('title', 'id');
                    $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
                    $shifts = $this->getShifts()->pluck('title', 'id');
                    $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
                    $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
                    $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
                    $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
                    $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
                    $weekDays = $this->getWeekDayOptions();
                    /* common */

                    foreach ($result as $key => $off_val) {
                        $jobinfo = Job::where(['id' => $off_val->job_id])->get()->first();
                        $facility_info = Facility::where(['id' => $jobinfo->facility_id])->get()->first();

                        $days = [];
                        if (isset($jobinfo->preferred_days_of_the_week)) {
                            $day_s = explode(",", $jobinfo->preferred_days_of_the_week);
                            if (is_array($day_s) && !empty($day_s)) {
                                foreach ($day_s as $day) {
                                    if ($day == "Sunday") $days[] = "Su";
                                    elseif ($day == "Monday") $days[] = "M";
                                    elseif ($day == "Tuesday") $days[] = "T";
                                    elseif ($day == "Wednesday") $days[] = "W";
                                    elseif ($day == "Thursday") $days[] = "Th";
                                    elseif ($day == "Friday") $days[] = "F";
                                    elseif ($day == "Saturday") $days[] = "Sa";
                                }
                            }
                        }

                        // $facility_logo = "";
                        // if ($facility_info->facility_logo) {
                        //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/facility_logo/' . $facility_info->facility_logo);
                        //     if ($t) {
                        //         $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/facilities/facility_logo/' . $facility_info->facility_logo);
                        //     }
                        // }

                        $o_data['offer'][] = [
                            "offer_expiration" => date('d-m-Y h:i A', strtotime($off_val->expiration)),
                            "offer_id" => $off_val->id,
                            "job_id" => $off_val->job_id,
                            "facility_logo" => (isset($facility_info->facility_logo) && $facility_info->facility_logo != "") ? url("public/images/facilities/" . $facility_info->facility_logo) : "",
                            // "facility_logo_base" => ($facility_logo != "") ? 'data:image/jpeg;base64,' . base64_encode($facility_logo) : "",
                            "facility_name" => (isset($facility_info->name) && $facility_info->name != "") ? $facility_info->name : "",
                            "job_title" => \App\Providers\AppServiceProvider::keywordTitle($jobinfo->preferred_specialty),
                            "assignment_duration" => (isset($jobinfo->preferred_assignment_duration)) ? $jobinfo->preferred_assignment_duration : "",
                            "assignment_duration_definition" => (isset($assignmentDurations[$jobinfo->preferred_assignment_duration])) ? $assignmentDurations[$jobinfo->preferred_assignment_duration] : "",
                            "shift_definition" => "Days",
                            "working_days" => (!empty($days)) ? implode(",", $days) : "",
                            "working_days_definition" => $days,
                            "hourly_pay_rate" => isset($jobinfo->preferred_hourly_pay_rate) ? $jobinfo->preferred_hourly_pay_rate : "0",
                            "start_date" => (isset($jobinfo->start_date) && $jobinfo->start_date != "") ? $jobinfo->start_date : "",
                            "end_date" => (isset($jobinfo->end_date) && $jobinfo->end_date != "") ? $jobinfo->end_date : "",
                            "status" => "pending",
                        ];
                    }
                    $this->check = "1";
                    $this->message = "Job offers listed successfully";
                } else {
                    $this->message = "Currently no offers for you";
                }
                $this->return_data = $o_data;
            } else {
                $this->message = "Nurse not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function viewJobOffered(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'offer_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = Nurse::where('user_id', '=', $request->user_id)->get()->first();
            $whereCond = [
                'active' => true,
            ];
            /* 'status' => 'Pending' */
            $offers = Offer::where($whereCond)
                ->where('id', $request->offer_id)
                ->where('nurse_id', $nurse->id)
                ->whereNotNull('job_id')
                ->orderBy('created_at', 'desc');

            $o_data = [];
            if ($offers->count() > 0) {
                $result = $offers->get();
                // $result = $offers->paginate(10);

                /* common */
                $controller = new Controller();
                $specialties = $controller->getSpecialities()->pluck('title', 'id');
                $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
                $shifts = $this->getShifts()->pluck('title', 'id');
                $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
                $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
                $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
                $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
                $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
                $weekDays = $this->getWeekDayOptions();
                /* common */

                foreach ($result as $key => $off_val) {
                    $jobinfo = Job::where(['id' => $off_val->job_id])->get()->first();
                    $facility_info = Facility::where(['id' => $jobinfo->facility_id])->get()->first();

                    $days = [];
                    if (isset($jobinfo->preferred_days_of_the_week)) {
                        $day_s = explode(",", $jobinfo->preferred_days_of_the_week);
                        if (is_array($day_s) && !empty($day_s)) {
                            foreach ($day_s as $day) {
                                if ($day == "Sunday") $days[] = "Su";
                                elseif ($day == "Monday") $days[] = "M";
                                elseif ($day == "Tuesday") $days[] = "T";
                                elseif ($day == "Wednesday") $days[] = "W";
                                elseif ($day == "Thursday") $days[] = "Th";
                                elseif ($day == "Friday") $days[] = "F";
                                elseif ($day == "Saturday") $days[] = "Sa";
                            }
                        }
                    }

                    $about_job = [
                        'seniority_level' => (isset($jobinfo->seniority_level)) ? strval($jobinfo->seniority_level) : "",
                        'seniority_level_definition' => (isset($seniorityLevels[$jobinfo->seniority_level])) ? $seniorityLevels[$jobinfo->seniority_level] : "",
                        'preferred_shift_duration' => (isset($jobinfo->preferred_shift_duration)) ? strval($jobinfo->preferred_shift_duration) : "",
                        'preferred_shift_duration_definition' => (isset($shifts[$jobinfo->preferred_shift_duration])) ? $shifts[$jobinfo->preferred_shift_duration] : "",
                        'preferred_experience' => isset($jobinfo->preferred_experience) ? $jobinfo->preferred_experience : "",
                        'cerner' => (isset($jobinfo->job_cerner_exp)) ? strval($jobinfo->job_cerner_exp) : "",
                        'cerner_definition' => (isset($ehrProficienciesExp[$jobinfo->job_cerner_exp])) ? $ehrProficienciesExp[$jobinfo->job_cerner_exp] : "",
                        'meditech' => (isset($jobinfo->job_meditech_exp)) ? strval($jobinfo->job_meditech_exp) : "",
                        'meditech_definition' => (isset($ehrProficienciesExp[$jobinfo->job_meditech_exp])) ? $ehrProficienciesExp[$jobinfo->job_meditech_exp] : "",
                        'epic' => (isset($jobinfo->job_epic_exp)) ? strval($jobinfo->job_epic_exp) : "",
                        'epic_definition' => (isset($ehrProficienciesExp[$jobinfo->job_epic_exp])) ? $ehrProficienciesExp[$jobinfo->job_epic_exp] : "",
                    ];

                    $rating = [];
                    $rating_flag = "0";
                    $nurse_rating_info = NurseRating::where(['nurse_id' => $nurse->id, 'job_id' => $jobinfo->id, 'status' => '1', 'is_deleted' => '0']);
                    if ($nurse_rating_info->count() > 0) {
                        $rating_flag = "1";
                        $r = $nurse_rating_info->first();
                        $rating['overall'] = (isset($r->overall) && $r->overall != "") ? $r->overall : "0";
                        $rating['clinical_skills'] = (isset($r->clinical_skills) && $r->clinical_skills != "") ? $r->clinical_skills : "0";
                        $rating['nurse_teamwork'] = (isset($r->nurse_teamwork) && $r->nurse_teamwork != "") ? $r->nurse_teamwork : "0";
                        $rating['interpersonal_skills'] = (isset($r->interpersonal_skills) && $r->interpersonal_skills != "") ? $r->interpersonal_skills : "0";
                        $rating['work_ethic'] = (isset($r->work_ethic) && $r->work_ethic != "") ? $r->work_ethic : "0";
                        $rating['experience'] = (isset($r->experience) && $r->experience != "") ? $r->experience : "";
                    }

                    // $facility_logo = "";
                    // if ($facility_info->facility_logo) {
                    //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/facility_logo/' . $facility_info->facility_logo);
                    //     if ($t) {
                    //         $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/facilities/facility_logo/' . $facility_info->facility_logo);
                    //     }
                    // }

                    $o_data[] = [
                        "offer_id" => $off_val->id,
                        "job_id" => $off_val->job_id,
                        "facility_logo" => (isset($facility_info->facility_logo) && $facility_info->facility_logo != "") ? url("public/images/facilities/" . $facility_info->facility_logo) : "",
                        // "facility_logo_base" => ($facility_logo != "") ? 'data:image/jpeg;base64,' . base64_encode($facility_logo) : "",
                        "facility_name" => (isset($facility_info->name) && $facility_info->name != "") ? $facility_info->name : "",
                        "preferred_work_location" => (isset($jobinfo->preferred_work_location)) ? strval($jobinfo->preferred_work_location) : "",
                        "preferred_work_location_definition" => (isset($workLocations[$jobinfo->preferred_work_location])) ? $workLocations[$jobinfo->preferred_work_location] : "",
                        "job_title" => \App\Providers\AppServiceProvider::keywordTitle($jobinfo->preferred_specialty),
                        "job_description" => (isset($jobinfo->description)) ? $jobinfo->description : "",
                        "assignment_duration" => (isset($jobinfo->preferred_assignment_duration)) ? $jobinfo->preferred_assignment_duration : "",
                        "assignment_duration_definition" => (isset($assignmentDurations[$jobinfo->preferred_assignment_duration])) ? $assignmentDurations[$jobinfo->preferred_assignment_duration] : "",
                        "shift_definition" => "Days",
                        "working_days" => (!empty($days)) ? implode(",", $days) : "",
                        "working_days_definition" => $days,
                        "hourly_pay_rate" => isset($jobinfo->preferred_hourly_pay_rate) ? $jobinfo->preferred_hourly_pay_rate : "0",
                        "status" => "pending",
                        "about_job" => $about_job,
                        'start_date' => (isset($jobinfo->start_date) && $jobinfo->start_date != "") ? date('d F Y', strtotime($jobinfo->start_date)) : "",
                        'end_date' => (isset($jobinfo->end_date) && $jobinfo->end_date != "") ? date('d F Y', strtotime($jobinfo->end_date)) : "",
                        'rating_flag' => $rating_flag,
                        'rating' => (!empty($rating)) ? $rating : (object)array(),
                        /* 'job_data' => $jobinfo */
                    ];
                }
                // $o_data["current_page"] = (isset($_GET['page']) && is_numeric($_GET['page'])) ? $_GET['page'] : "0";
                $this->check = "1";
                $this->message = "Job offers listed successfully";
            } else {
                $this->message = "Currently no offers for you";
            }
            $this->return_data = $o_data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobActive(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            /*  dropdown data's */
            $nurse_info = Nurse::where(['user_id' => $request->user_id]);
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();

                $limit = 25;
                $ret = Offer::where(['active' => "1", 'nurse_id' => $nurse->id])
                    ->orderBy('created_at', 'desc');
                // ->skip(0)->take($limit);
                // $offer_info = $ret->paginate($limit);
                $offer_info = $ret->get();

                $tot_res = 0;
                $my_jobs['data'] = [];
                if ($offer_info->count() > 0) {
                    foreach ($offer_info as $key => $off) {
                        if ($off->job->end_date >= date('Y-m-d')) {
                            $o['offer_id'] = $off->id;

                            /* facility info */
                            $o['facility_id'] = $o['facility_logo'] = $o['facility_name'] = "";
                            $facility_info = User::where(['id' => $off->created_by]);
                            if ($facility_info->count() > 0) {
                                $facility = $facility_info->first();
                                $o['facility_id'] = (isset($facility->facilities[0]->id) && $facility->facilities[0]->id != "") ? $facility->facilities[0]->id : "";

                                $o['facility_logo'] = (isset($facility->facilities[0]->facility_logo)) ? url('public/images/facilities/' . $facility->facilities[0]->facility_logo) : "";
                                $o['facility_name'] = (isset($facility->facilities[0]->name) && $facility->facilities[0]->name != "") ? $facility->facilities[0]->name : "";
                            }
                            /* facility info */

                            $o['title'] = (isset($specialties[$off->job->preferred_specialty]) && $specialties[$off->job->preferred_specialty] != "") ? $specialties[$off->job->preferred_specialty] : "";
                            $o['work_duration'] = (isset($off->job->preferred_shift_duration) && $off->job->preferred_shift_duration != "") ? strval($off->job->preferred_shift_duration) : "";
                            $o['work_duration_definition'] = (isset($off->job->preferred_shift_duration) && $off->job->preferred_shift_duration != "") ? \App\Providers\AppServiceProvider::keywordTitle($off->job->preferred_shift_duration) : "";

                            $o['shift'] = (isset($off->job->preferred_shift) && $off->job->preferred_shift != "") ? strval($off->job->preferred_shift) : "";
                            $o['shift_definition'] = (isset($off->job->preferred_shift) && $off->job->preferred_shift != "") ? \App\Providers\AppServiceProvider::keywordTitle($off->job->preferred_shift) : "";

                            $o['work_days'] = (isset($off->job->preferred_days_of_the_week) && $off->job->preferred_days_of_the_week != "") ? $off->job->preferred_days_of_the_week : "";
                            $days = [];
                            if (isset($off->job->preferred_days_of_the_week)) {
                                $day_s = explode(",", $off->job->preferred_days_of_the_week);
                                if (is_array($day_s) && !empty($day_s)) {
                                    foreach ($day_s as $day) {
                                        if ($day == "Sunday") $days[] = "Su";
                                        elseif ($day == "Monday") $days[] = "M";
                                        elseif ($day == "Tuesday") $days[] = "T";
                                        elseif ($day == "Wednesday") $days[] = "W";
                                        elseif ($day == "Thursday") $days[] = "Th";
                                        elseif ($day == "Friday") $days[] = "F";
                                        elseif ($day == "Saturday") $days[] = "Sa";
                                    }
                                }
                            }
                            $o['work_days_array'] = ($o['work_days'] != "") ? $days : [];
                            $o['work_days_string'] = ($o['work_days'] != "") ? implode(",", $days) : "";
                            $o['hourly_rate'] = (isset($off->job->preferred_hourly_pay_rate) && $off->job->preferred_hourly_pay_rate != "") ? strval($off->job->preferred_hourly_pay_rate) : "0";
                            $o['start_date'] = date('d F Y', strtotime($off->job->start_date));
                            $o['end_date'] = date('d F Y', strtotime($off->job->end_date));

                            if ($tot_res == 0) $tot_res += 1; //initialized first page`
                            $tot_res += 1;
                            $my_jobs['data'][] = $o;
                        }
                    }
                }

                $total_pages = ceil($ret->count() / $limit);
                $my_jobs['total_pages_available'] =  strval($total_pages);
                $my_jobs["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
                $my_jobs['results_per_page'] = strval($limit);

                $this->check = "1";
                $this->message = "Active jobs listed successfully";
                $this->return_data = $my_jobs;
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobCompleted(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            /*  dropdown data's */
            $nurse_info = Nurse::where(['user_id' => $request->user_id]);
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();

                $limit = 25;
                $ret = Offer::where(['active' => "1", 'nurse_id' => $nurse->id])
                    ->orderBy('created_at', 'desc');
                // ->skip(0)->take($limit);
                // $offer_info = $ret->paginate($limit);
                $offer_info = $ret->get();

                $tot_res = 0;
                $my_jobs['data'] = [];
                if ($offer_info->count() > 0) {
                    foreach ($offer_info as $key => $off) {
                        if ($off->job->end_date < date('Y-m-d')) {
                            $o['offer_id'] = $off->id;

                            /* facility info */
                            $o['facility_id'] = $o['facility_logo'] = $o['facility_name'] = "";
                            $facility_info = User::where(['id' => $off->created_by]);
                            if ($facility_info->count() > 0) {
                                $facility = $facility_info->first();
                                $o['facility_id'] = (isset($facility->facilities[0]->id) && $facility->facilities[0]->id != "") ? $facility->facilities[0]->id : "";

                                $o['facility_logo'] = (isset($facility->facilities[0]->facility_logo)) ? url('public/images/facilities/' . $facility->facilities[0]->facility_logo) : "";


                                // $facility_logo = "";
                                // if (isset($facility->facilities[0]->facility_logo)) {
                                //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/facility_logo/' . $facility->facilities[0]->facility_logo);
                                //     if ($t) {
                                //         $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/facilities/facility_logo/' . $facility->facilities[0]->facility_logo);
                                //     }
                                // }
                                // $o["facility_logo_base"] = ($facility_logo != "") ? 'data:image/jpeg;base64,' . base64_encode($facility_logo) : "";

                                $o['facility_name'] = (isset($facility->facilities[0]->name) && $facility->facilities[0]->name != "") ? $facility->facilities[0]->name : "";
                            }
                            /* facility info */

                            $o['title'] = (isset($specialties[$off->job->preferred_specialty]) && $specialties[$off->job->preferred_specialty] != "") ? $specialties[$off->job->preferred_specialty] : "";
                            $o['work_duration'] = (isset($off->job->preferred_shift_duration) && $off->job->preferred_shift_duration != "") ? strval($off->job->preferred_shift_duration) : "";
                            $o['work_duration_definition'] = (isset($off->job->preferred_shift_duration) && $off->job->preferred_shift_duration != "") ? \App\Providers\AppServiceProvider::keywordTitle($off->job->preferred_shift_duration) : "";
                            $o['shift'] = (isset($off->job->preferred_shift) && $off->job->preferred_shift != "") ? strval($off->job->preferred_shift) : "";
                            $o['shift_definition'] = (isset($off->job->preferred_shift) && $off->job->preferred_shift != "") ? \App\Providers\AppServiceProvider::keywordTitle($off->job->preferred_shift) : "";
                            $o['work_days'] = (isset($off->job->preferred_days_of_the_week) && $off->job->preferred_days_of_the_week != "") ? $off->job->preferred_days_of_the_week : "";
                            $days = [];
                            if (isset($off->job->preferred_days_of_the_week)) {
                                $day_s = explode(",", $off->job->preferred_days_of_the_week);
                                if (is_array($day_s) && !empty($day_s)) {
                                    foreach ($day_s as $day) {
                                        if ($day == "Sunday") $days[] = "Su";
                                        elseif ($day == "Monday") $days[] = "M";
                                        elseif ($day == "Tuesday") $days[] = "T";
                                        elseif ($day == "Wednesday") $days[] = "W";
                                        elseif ($day == "Thursday") $days[] = "Th";
                                        elseif ($day == "Friday") $days[] = "F";
                                        elseif ($day == "Saturday") $days[] = "Sa";
                                    }
                                }
                            }
                            $o['work_days_array'] = ($o['work_days'] != "") ? $days : [];
                            $o['work_days_string'] = ($o['work_days'] != "") ? implode(",", $days) : "";
                            $o['hourly_rate'] = (isset($off->job->preferred_hourly_pay_rate) && $off->job->preferred_hourly_pay_rate != "") ? strval($off->job->preferred_hourly_pay_rate) : "0";
                            $o['start_date'] = date('d F Y', strtotime($off->job->start_date));
                            $o['end_date'] = date('d F Y', strtotime($off->job->end_date));

                            if ($tot_res == 0) $tot_res += 1; //initialized first page`
                            $tot_res += 1;
                            $my_jobs['data'][] = $o;
                        }
                    }
                }

                $total_pages = ceil($ret->count() / $limit);
                $my_jobs['total_pages_available'] =  strval($total_pages);
                $my_jobs["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
                $my_jobs['results_per_page'] = strval($limit);

                $this->check = "1";
                $this->message = "Completed jobs listed successfully";
                $this->return_data = $my_jobs;
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobAcceptPost(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'offer_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_offer = Offer::where(['id' => $request->offer_id, 'status' => 'Pending', 'active' => '1'])
                ->where('expiration', '>=', date('Y-m-d H:i:s'))->get();

            if ($check_offer->count() > 0) {
                $update = Offer::where(['id' => $request->offer_id])->update(['status' => 'Active']);
                if ($update) {
                    $offer = $check_offer->first();
                    $facility_email = $offer->creator->email;

                    $nurse_info = Nurse::where(['id' => $offer->nurse_id]);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();
                        $user_info = User::where(['id' => $nurse->user_id]);
                        if ($user_info->count() > 0) {
                            $user = $user_info->first(); // nurse user info
                            $facility_user_info = User::where(['id' => $offer->created_by]);
                            if ($facility_user_info->count() > 0) {
                                $facility_user = $facility_user_info->first(); // facility user info
                                $data = [
                                    'to_email' => $user->email,
                                    'to_name' => $user->first_name . ' ' . $user->last_name
                                ];
                                $replace_array = [
                                    '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                    '###FACILITYNAME###' => $facility_user->facilities[0]->name,
                                    '###FACILITYLOCATION###' => $facility_user->facilities[0]->city . ',' . $facility_user->facilities[0]->state,
                                    '###SPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                    '###STARTDATE###' => date('d F Y', strtotime($offer->job->start_date)),
                                    '###ASSIGNMENTDURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_assignment_duration),
                                    '###SHIFTDURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift_duration),
                                    '###PREFERREDSHIFT###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift),
                                ];
                                $this->basic_email($template = "accept_offer_nurse", $data, $replace_array);

                                $facility_data = [
                                    'to_email' => $facility_user->email,
                                    'to_name' => $facility_user->first_name . ' ' . $facility_user->last_name
                                ];

                                $facility_replace_array = [
                                    '###USERNAME###' => $facility_user->first_name . ' ' . $facility_user->last_name,
                                    '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                    '###PREFERREDSPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                    '###NURSEPROFILELINK###' => url('browse-nurses/' . $nurse->slug),
                                    '###FACILITYNAME###' => $facility_user->facilities[0]->name,
                                    '###SPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                    '###STARTDATE###' => date('d F Y', strtotime($offer->job->start_date)),
                                    '###ASSIGNMENTDURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_assignment_duration),
                                    '###SHIFTDURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift_duration),
                                    '###PREFERREDSHIFT###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift),
                                ];

                                $this->basic_email($template = "accept_offer_confirmation_facility", $facility_data, $facility_replace_array);
                            }
                        }
                    }

                    $this->check = "1";
                    $this->message = "You have accepted this job successfully";
                    $this->return_data = $offer;
                } else {
                    $this->return_data = "Failed to accept the job, Please try again later";
                }
            } else {
                $this->message = "Offer not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobRejectPost(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'offer_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_offer = Offer::where(['id' => $request->offer_id, 'status' => 'Pending', 'active' => '1'])
                ->where('expiration', '>=', date('Y-m-d H:i:s'));
            if ($check_offer->count() > 0) {
                $offer = $check_offer->first();
                $update = Offer::where(['id' => $request->offer_id])->update(['status' => 'Rejected']);
                if ($update) {
                    $nurse_info = Nurse::where(['id' => $offer->nurse_id]);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();
                        $user_info = User::where(['id' => $nurse->user_id]);
                        if ($user_info->count() > 0) {
                            $user = $user_info->first(); // nurse user info
                            $facility_user_info = User::where(['id' => $offer->created_by]);
                            if ($facility_user_info->count() > 0) {
                                $facility_user = $facility_user_info->first(); // facility user info
                                /* nurse email */
                                $data = [
                                    'to_email' => $user->email,
                                    'to_name' => $user->first_name . ' ' . $user->last_name
                                ];
                                $replace_array = [
                                    '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                    '###FACILITYNAME###' => $facility_user->facilities[0]->name
                                ];
                                $this->basic_email($template = "reject_offer_nurse", $data, $replace_array);
                                /* nurse email */

                                /* facility user */
                                $facility_data = [
                                    'to_email' => $facility_user->email,
                                    'to_name' => $facility_user->first_name . ' ' . $facility_user->last_name
                                ];
                                $facility_replace_array = [
                                    '###USERNAME###' => $facility_user->first_name . ' ' . $facility_user->last_name,
                                    '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                    '###PREFERREDSPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                    '###FACILITYNAME###' => $facility_user->facilities[0]->name,
                                ];
                                $this->basic_email($template = "reject_offer_facility", $facility_data, $facility_replace_array);
                                /* facility user */
                            }
                        }
                    }
                    $this->check = "1";
                    $this->return_data = "You have rejected this job successfully";
                    $this->return_data = $offer;
                } else {
                    $this->return_data = "Failed to reject the job, Please try again later";
                }
            } else {
                $this->message = "Offer not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function notification(Request $request)
    {
        if(isset($request->role) && !empty($request->role) && !empty($request->user_id))
        {
            $nurse_info = NURSE::where('user_id', $request->user_id);    
            // for worker or nurse
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();
                $whereCond = [
                    'notifications.created_by' => $request->user_id,
                    'active' => true,
                    'offers.nurse_id' => $nurse->id
                ];
                $result = [];
                $this->return_data = [];
                $ask_worker_notification = '';
                // $ret = Notification::select('offers.status as status', 'notifications.*')
                //                         ->join('offers', 'notifications.job_id', '=', 'offers.job_id')
                //                         ->where($whereCond)
                //                         ->whereNotNull('offers.job_id')
                //                         ->where('offers.is_view', false)
                //                         ->where('offers.expiration', '>=', date('Y-m-d H:i:s'))
                //                         ->orderBy('notifications.created_at', 'desc')->distinct()
                //                         ->get();

                $ask_worker_notification = Notification::where(['notifications.created_by' => $request->user_id])
                                            ->leftJoin('jobs', 'notifications.job_id', 'jobs.id')
                                            ->leftJoin('offers', 'notifications.job_id', 'offers.job_id')
                                            ->select('notifications.*', 'jobs.recruiter_id as recruiter_id')
                                            ->orderBy('notifications.created_at', 'desc')->distinct()
                                            ->get();
                if (isset($ask_worker_notification)) {
                    // $notifications = $ret;
                    $results = [];
                    foreach ($ask_worker_notification as $notification) 
                    {
                        if($notification['title'] != "Send Counter Offer"){
                            $notification->created_at = Carbon::parse($notification['created_at']);
                            $notification->time = $notification->created_at->diffForHumans();
                            $notification->date = date('M j Y', strtotime($notification['created_at']));
                            $notification->recruiter_id = isset($notification['recruiter_id'])?$notification['recruiter_id']:'';
                            $notification->worker_user_id  = isset($notification['created_by'])?$notification['created_by']:'';
                            if(isset($notification['job_id'])){
                                $job = Job::where('id', $notification['job_id'])->first();
                                $notification->job_name  = isset($job['job_name'])?$job['job_name']:'';
                            }else{
                                $notification->job_name  = '';
                            }
    
                            if(isset($notification['worker_user_id'])){
                                $worker = User::where('id', $notification['worker_user_id'])->first();
                                if(isset($worker)){
                                    $notification->worker_name  = $worker['first_name'].' '.$worker['last_name'];
                                }else{
                                    $notification->worker_name  = '';
                                }
                            }else{
                                $notification->worker_name = '';
                            }
    
                            if(isset($notification['recruiter_id'])){
                                $recruiter = User::where('id', $notification['recruiter_id'])->first();
                                if(isset($recruiter)){
                                    $notification->recruiter_name  = $recruiter['first_name'].' '.$recruiter['last_name'];
                                }else{
                                    $notification->recruiter_name  = '';
                                }
                                
                            }else{
                                $notification->recruiter_name = '';
                            }
    
                            if($notification['updated_at'] >= date('Y-m-d')){
                                $notification->status = 'New';
                            }else{
                                $notification->status = 'Older';
                            }
    
                            if($notification['title'] == 'Send Offer'){
                                $notification->isCounter = '0';
                                $notification->isAskWorker = '0';
                                $notification->is_notification = '1';
                            }else if($notification['title'] == 'Send Counter Offer'){
                                $notification->isCounter = '1';
                                $notification->isAskWorker = '0';
                                $notification->is_notification = '1';
                            }else if($notification['isAskWorker'] == '1'){
                                $notification->isCounter = '0';
                                $notification->isAskWorker = '1';
                                $notification->is_notification = '0';
                            }else{
                                $notification->isCounter = '0';
                                $notification->isAskWorker = '0';
                                $notification->is_notification = '1';
                            }
                            $results[] = $notification;
                        }
                        
                        
                    }
                    $this->check = "1";
                    $this->message = "Notifications has been listed successfully";
                    // $result['notification'] = isset($notifications)?$notifications:[];
                    // $this->return_data[] = $notifications;
                    $this->return_data = $results;
                } else {
                    $this->check = "1";
                    $this->message = "Currently there are no notifications";
                    $this->return_data = [];
                }
            } else {
                $this->message = "Nurse not found";
            }
        }else{

            // For recruiter
            $user_info = User::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $whereCond = [
                    'notifications.created_by' => $request->user_id,
                    'active' => true,
                    'offers.created_by' => $user->id
                ];
                $result = [];
                $ret = Notification::select('offers.status as status', 'notifications.*')
                                        ->join('offers', 'notifications.job_id', '=', 'offers.job_id')
                                        ->where($whereCond)
                                        ->whereNotNull('offers.job_id')
                                        ->where('offers.is_view', false)
                                        ->where('offers.expiration', '>=', date('Y-m-d H:i:s'))
                                        ->orderBy('notifications.created_at', 'desc')->distinct()
                                        ->get();
                if ($ret->count() > 0) {
                    $n = [];
                    $notifications = $ret;
                    
                    foreach ($notifications as $notification) {
                        $notification->created_at = Carbon::parse($notification->created_at);
                        $notification->date = $notification->created_at->diffForHumans();
                    }
                    $this->check = "1";
                    $this->message = "Notifications has been listed successfully";
                    $result['ask_worker'] = [];
                    $result['notification'] = $notifications;
                    $this->return_data = $result;
                } else {
                    $this->check = "1";
                    $this->message = "Currently there are no notifications";
                }
            } else {
                $this->message = "Recruiter not found";
            }
        }
        
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function setBankingDetails(Request $request)
    {
        // $this->return_data = [];
        $validator = \Validator::make($request->all(), [
            'worker_user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check = DB::table('nurse_account')->where(['worker_user_id' => $request->worker_user_id])->first();
            if(isset($request->paypal_details)){
                $acc_type = '1';
            }else{
                $acc_type = '0';
            }
            if (isset($check)) {
                $nurse_acc = DB::table('nurse_account')->where([
                    'worker_user_id' => $request->worker_user_id
                ])->update([
                    'worker_user_id' => $request->worker_user_id,
                    'acc_no' => $request->acc_no,
                    'routing_no' => $request->routing_no,
                    'acc_holder_name' => $request->acc_holder_name,
                    'paypal_details' => $request->paypal_details,
                    'acc_type' => $acc_type
                ]);

                $this->check = "1";
                $this->message = "Bank Details Update successfully";
                $this->return_data = $nurse_acc;

            } else {
                $nurse_acc = DB::table('nurse_account')->insert([
                    'worker_user_id' => $request->worker_user_id,
                    'acc_no' => $request->acc_no,
                    'routing_no' => $request->routing_no,
                    'acc_holder_name' => $request->acc_holder_name,
                    'paypal_details' => $request->paypal_details,
                    'acc_type' => $acc_type
                ]);
                
                $this->check = "1";
                $this->message = "Bank Details save successfully";
                $this->return_data = $nurse_acc;
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getBankingDetails(Request $request)
    {
        // $this->return_data = [];
        $validator = \Validator::make($request->all(), [
            'worker_user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check = DB::table('nurse_account')->where(['worker_user_id' => $request->worker_user_id])->first();
            if(isset($check)){
                $check->acc_no = isset($check->acc_no)?$check->acc_no:'';
                $check->routing_no = isset($check->routing_no)?$check->routing_no:'';
                $check->acc_holder_name = isset($check->acc_holder_name)?$check->acc_holder_name:'';
                $check->paypal_details = isset($check->paypal_details)?$check->paypal_details:'';
                $check->worker_user_id = isset($check->worker_user_id)?$check->worker_user_id:'';
                $check->token_id = isset($check->token_id)?$check->token_id:'';
                $check->email = isset($check->email)?$check->email:'';

                $this->check = "1";
                $this->message = "Bank Details listed successfully";
                $this->return_data = $check;
            }else{
                $this->check = "1";
                $this->message = "Worker Not Found";
            }
            
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }


    // Send Offer and Counter Offer Notification
    public function offerNotification(Request $request)
    {
        if(isset($request->worker_user_id))
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $nurse_info = NURSE::where('user_id', $request->worker_user_id);    
                // for worker or nurse
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();
                    $whereCond = [
                        'notifications.created_by' => $request->worker_user_id
                    ];
                    $ret = Notification::select('offers.status as status', 'notifications.*')
                                            ->join('offers', 'notifications.job_id', '=', 'offers.job_id')
                                            ->where($whereCond)
                                            ->whereNotNull('offers.job_id')
                                            ->where('offers.is_view', false)
                                            ->where('offers.expiration', '>=', date('Y-m-d H:i:s'))
                                            ->orderBy('notifications.created_at', 'desc')->distinct()
                                            ->get();
    
                    if ($ret->count() > 0) {
                        $n = [];
                        $notifications = $ret;
                        foreach ($notifications as $notification) {
                            $notification->created_at = Carbon::parse($notification['created_at']);
                            $notification->date = $notification->created_at->diffForHumans();
                            $notification->recruiter_id = isset($notification['recruiter_id'])?$notification['recruiter_id']:'';
                            $notification->worker_user_id  = isset($notification['created_by'])?$notification['created_by']:'';
                            if(isset($notification['job_id'])){
                                $job = Job::where('id', $notification['job_id'])->first();
                                $notification->job_name  = isset($job['job_name'])?$job['job_name']:'';
                            }else{
                                $notification->job_name  = '';
                            }
                            if(isset($notification['worker_user_id'])){
                                $worker = User::where('id', $notification['worker_user_id'])->first();
                                if(isset($worker)){
                                    $notification->worker_name  = $worker['first_name'].' '.$worker['last_name'];
                                }else{
                                    $notification->worker_name  = '';
                                }
                            }else{
                                $notification->worker_name = '';
                            }
                            if(isset($notification['recruiter_id'])){
                                $recruiter = User::where('id', $notification['recruiter_id'])->first();
                                if(isset($recruiter)){
                                    $notification->recruiter_name  = $recruiter['first_name'].' '.$recruiter['last_name'];
                                }else{
                                    $notification->recruiter_name  = '';
                                }
                                
                            }else{
                                $notification->recruiter_name = '';
                            }
                            if($notification['updated_at'] >= date('Y-m-d')){
                                $notification->status = 'New';
                            }else{
                                $notification->status = 'Older';
                            }
                            if($notification['title'] == 'Send Offer'){
                                $notification->isCounter = '0';
                            }else{
                                $notification->isCounter = '1';
                            }
                            
                        }
                        $this->check = "1";
                        $this->message = "Notifications has been listed successfully";
                        $this->return_data = $notifications;
                    } else {
                        $this->check = "1";
                        $this->message = "Currently there are no notifications";
                        $this->return_data = [];
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            }
            
        }else{
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'recruiter_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                // For recruiter
                $user_info = User::where('id', $request->recruiter_id);
                if ($user_info->count() > 0) {
                    $user = $user_info->first();
                    $whereCond = [
                        'notifications.recruiter_id' => $request->recruiter_id
                    ];
                    
                    $ret = Notification::select('offers.status as status', 'offers.nurse_id as nurse_id', 'notifications.*', 'nurses.id as worker_id')
                                            ->leftJoin('offers', 'notifications.job_id', 'offers.job_id')
                                            ->leftJoin('nurses', 'notifications.created_by', 'nurses.user_id')
                                            ->where($whereCond)
                                            ->whereNotNull('offers.job_id')
                                            ->where('offers.is_view', false)
                                            // ->where('offers.nurse_id', '=', 'nurses.id')
                                            ->where('offers.expiration', '>=', date('Y-m-d H:i:s'))
                                            ->orderBy('notifications.created_at', 'desc')
                                            ->get();
                    if ($ret->count() > 0) {
                        $n = [];
                        $notifications = $ret;
                        $result = [];
                        foreach ($notifications as $notification) 
                        {
                            if($notification['worker_id'] == $notification['nurse_id']){
                                $notification->created_at = Carbon::parse($notification['created_at']);
                                $notification->date = $notification->created_at->diffForHumans();
                                $notification->recruiter_id = isset($notification['recruiter_id'])?$notification['recruiter_id']:'';
                                $notification->worker_user_id  = isset($notification['created_by'])?$notification['created_by']:'';
                                
                                if(isset($notification['job_id'])){
                                    $job = Job::where('id', $notification['job_id'])->first();
                                    $notification->job_name  = $job['job_name'];
                                }else{
                                    $notification->job_name  = '';
                                }
                                if(isset($notification['worker_user_id'])){
                                    $worker = User::where('id', $notification['worker_user_id'])->first();
                                    if(isset($worker['first_name'])){
                                        $worker_name = $worker['first_name'].' '.$worker['last_name'];
                                    }else{
                                        $worker_name = '';
                                    }
                                    $nurse = Nurse::where('user_id', $notification['worker_user_id'])->first();
                                    if(isset($nurse['id'])){
                                        $worker_id = $nurse['id'];
                                    }else{
                                        $worker_id = '';
                                    }
                                    $notification->worker_name  = $worker_name;
                                    $notification->worker_id  = $worker_id;
                                }else{
                                    $notification->worker_name = '';
                                    $notification->worker_id  = '';
                                }
                                
                                if(isset($notification['recruiter_id'])){
                                    $recruiter = User::where('id', $notification['recruiter_id'])->first();
                                    if(isset($recruiter)){
                                        $notification->recruiter_name  = $recruiter['first_name'].' '.$recruiter['last_name'];
                                    }else{
                                        $notification->recruiter_name  = '';
                                    }
                                }else{
                                    $notification->recruiter_name = '';
                                }
                                if($notification['updated_at'] >= date('Y-m-d')){
                                    $notification->status = 'New';
                                }else{
                                    $notification->status = 'Older';
                                }
                                if($notification['title'] == 'Send Offer'){
                                    $notification->isCounter = '0';
                                }else{
                                    $notification->isCounter = '1';
                                }
                                $result[] = $notification;
                            }
                            
                        }
                        $this->check = "1";
                        $this->message = "Notifications has been listed successfully";
                        $this->return_data = $result;
                    } else {
                        $this->check = "1";
                        $this->message = "Currently there are no notifications";
                    }
                } else {
                    $this->message = "Recruiter not found";
                }
            }
            
        }
        
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function removeNotification(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            "notification_id" => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if(isset($request->role) && !empty($request->user_id)){
                $nurse_info = NURSE::where('id', $request->user_id)->get();
            }else{
                $nurse_info = NURSE::where('user_id', $request->user_id)->get();
            }
            
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();

                $whereCond = ['active' => true, 'id' => $request->notification_id];
                $ret = Offer::where($whereCond)
                    ->where('nurse_id', $nurse->id)
                    ->whereNotNull('job_id')
                    ->where('is_view', false)
                    // ->where('expiration', '>=', date('Y-m-d H:i:s'))
                    ->orderBy('created_at', 'desc')->get();
                if ($ret->count() > 0) {
                    $notification = $ret->first();

                    $update_array['is_view'] = "1";
                    $update_array['is_view_date'] = date('Y-m-d H:i:s');
                    $update = Offer::where(['id' => $notification->id])->update($update_array);
                    if ($update == true) {
                        $this->check = "1";
                        $this->message = "Notification cleared successfully";
                        // $this->return_data = $notification;
                    } else {
                        $this->message = "Failed to clear notification, Please try again later";
                    }
                } else {
                    $this->message = "Notification already viewed/cleared";
                }
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function settings(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            $response = [];
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $user->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();
                    $response["first_name"] = (isset($user->first_name) && $user->first_name != "") ? $user->first_name : "";
                    $response["last_name"] = (isset($user->last_name) && $user->last_name != "") ? $user->last_name : "";
                    $response["full_name"] = $user->first_name . " " . $user->last_name;
                    // $response["profile_picture"] = url('storage/assets/nurses/profile/' . $nurse->user->image);
                    $response['profile_picture'] = url('public/images/nurses/profile/'.$user->image);

                    // $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                    // if ($nurse->user->image) {
                    //     $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $nurse->user->image);
                    //     if ($t) {
                    //         $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $nurse->user->image);
                    //     }
                    // }
                    // $response["profile_picture_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);

                    $response["address"] = (isset($nurse->address) && $nurse->address != "") ? $nurse->address : "";
                    $response["city"] = (isset($nurse->city) && $nurse->city != "") ? $nurse->city : "";
                    $response["state"] = (isset($nurse->state) && $nurse->state != "") ? $nurse->state : "";
                    $response["postcode"] = (isset($nurse->postcode) && $nurse->postcode != "") ? $nurse->postcode : "";
                    $response["country"] = (isset($nurse->country) && $nurse->country != "") ? $nurse->country : "";
                    $response["nursing_license_number"] = (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") ? $nurse->nursing_license_number : "";
                    $response["bil_rate"] = (isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") ? $nurse->hourly_pay_rate : "5";
                    $exp = (isset($nurse->experience_as_acute_care_facility) && $nurse->experience_as_acute_care_facility != "") ? $nurse->experience_as_acute_care_facility : "0";
                    $non_exp = (isset($nurse->experience_as_ambulatory_care_facility) && $nurse->experience_as_ambulatory_care_facility != "") ? $nurse->experience_as_ambulatory_care_facility : "0";
                    $response["experience"] = strval($exp + $non_exp);
                    /* availability */
                    $availability = Availability::where('nurse_id', $nurse->id);
                    $response["shift"] = $response["shift_definition"] = "";
                    if ($availability->count() > 0) {
                        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
                        $avail = $availability->get()->first();
                        $response["shift"] = (isset($avail->preferred_shift) && $avail->preferred_shift != "") ? strval($avail->preferred_shift) : "";
                        $response["shift_definition"] = (isset($preferredShifts[$avail->preferred_shift]) && $preferredShifts[$avail->preferred_shift] != "") ? $preferredShifts[$avail->preferred_shift] : "";
                    }
                    /* availability */
                    $this->check = "1";
                    $this->message = "Nurse info listed successfully";
                } else {
                    $this->message = "Nurse not found";
                }
                $this->return_data =  $response;
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function NurseProfileInfo(Request $request)
    {        
        if(isset($request->role) && $request->role == 'nurse'){
            $validator = \Validator::make($request->all(), [
                'user_id' => 'required',
                'api_key' => 'required',
                'nurse_id' => 'required',
            ]);
        }else{
            $validator = \Validator::make($request->all(), [
                'user_id' => 'required',
                'api_key' => 'required',
            ]);
        }
        
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if(!empty($request->role) && isset($request->user_id))
            {
                $nurse = NURSE::where('id', $request->nurse_id)->get()->first();
                $user_info = USER::where('id', $request->user_id);
            }else{
                $user_info = USER::where('id', $request->user_id);
                $nurse = NURSE::where('user_id', $request->user_id)->get()->first();
            }
            
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $this->check = "1";
                $this->message = "User profile details listed successfully";
                $type = $nurse->id;
                $this->return_data = $this->nurseProfileCompletionFlagStatus($type, $user);
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function nurseProfileCompletionFlagStatus($type, $user)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $experiencesTypes = $this->getExperienceTypes()->pluck('title', 'id');
        
        $licenseStatus = $this->getSearchStatus()->pluck('title', 'id');
        $licenseType = $this->getLicenseType()->pluck('title', 'id');
        // $data = [];
        // foreach ($licenseType as $key => $value) {
        //     $data[] = ['id' => strval($key), "name" => $value];
        // }
        
        $nurse = Nurse::where('id', '=', $type)->get()->first();
        if(isset($nurse->id)){
            $offer = DB::select("SELECT status FROM `offers` WHERE nurse_id = '$nurse->id'");
            if(!empty($offer)){
                $offer = $offer[0];
            }
        }
        $availability = Availability::where('nurse_id', '=', $nurse->id)->get()->first();
        /* profile status flag */
        $profile_detail_flag = "0";
        $profile_completion = 0;
        if (
            (isset($user->first_name) && $user->first_name != "") &&
            (isset($user->last_name) && $user->last_name != "") &&
            (isset($user->email) && $user->email != "") &&
            (isset($user->mobile) && $user->mobile != "") &&
            (isset($nurse->nursing_license_state) && $nurse->nursing_license_state != "") &&
            (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") &&
            (isset($nurse->specialty) && $nurse->specialty != "") &&
            (isset($availability->work_location) && $availability->work_location != "") &&
            (isset($nurse->address) && $nurse->address != "") &&
            (isset($nurse->city) && $nurse->city != "") &&
            (isset($nurse->license_type) && $nurse->license_type != "" ) &&
            (isset($nurse->state) && $nurse->state != "") &&
            (isset($nurse->postcode) && $nurse->postcode != "") &&
            (isset($nurse->country) && $nurse->country != "")
            
        ) $profile_detail_flag = "1";
        /* profile status flag */

        /* Hourly rate and availability */
        $hourly_rate_and_availability = "0";
        if ((isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") &&
            (isset($availability->shift_duration) && $availability->shift_duration != "") &&
            (isset($availability->assignment_duration) && $availability->assignment_duration != "") &&
            (isset($availability->preferred_shift) && $availability->preferred_shift != "") &&
            // (isset($availability->days_of_the_week) && $availability->days_of_the_week != "") &&
            (isset($availability->earliest_start_date) && $availability->earliest_start_date != "")
        ) $hourly_rate_and_availability = "1";
        /* Hourly rate and availability */

        $return_data['id'] = (isset($user->id) && $user->id != "") ? $user->id : "";
        $return_data['nurse_id'] = (isset($nurse->id) && $nurse->id != "") ? $nurse->id : "";
        $return_data['offer_status'] = (isset($offer->status) && $offer->status != "") ? $offer->status : "";
        $return_data['role'] = (isset($user->role) && $user->role != "") ? $user->role : "";
        $return_data['fcm_token'] = (isset($user->fcm_token) && $user->fcm_token != "") ? $user->fcm_token : "";
        $return_data['fullName'] = (isset($user->fullName) && $user->fullName != "") ? $user->fullName : "";
        $return_data['date_of_birth'] = (isset($user->date_of_birth) && $user->date_of_birth != "") ? $user->date_of_birth : "";
        $return_data['driving_license'] = (isset($user->driving_license) && $user->driving_license != "") ? $user->driving_license : "";
        $return_data['security_number'] = (isset($user->security_number) && $user->security_number != "") ? $user->security_number : "";
        $return_data['email_notification'] = (isset($user->email_notification) && $user->email_notification != "") ? strval($user->email_notification) : "";
        $return_data['sms_notification'] = (isset($user->sms_notification) && $user->sms_notification != "") ? strval($user->sms_notification) : "";

        $return_data['first_name'] = (isset($user->first_name) && $user->first_name != "") ? $user->first_name : "";
        $return_data['last_name'] = (isset($user->last_name) && $user->last_name != "") ? $user->last_name : "";
        $return_data['email'] = (isset($user->email) && $user->email != "") ? $user->email : "";

        $return_data['image'] = (isset($user->image) && $user->image != "") ? url("public/images/nurses/profile/" . $user->image) : "";

        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
        if (isset($user->image)) {
            $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $user->image);
            if ($t) {
                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $user->image);
            }
        }
        // $return_data["image_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);

        $return_data['mobile'] = (isset($user->mobile) && $user->mobile != "") ? $user->mobile : "";
        $return_data['nursing_license_state'] = (isset($nurse->nursing_license_state) && $nurse->nursing_license_state != "") ? $nurse->nursing_license_state : "";
        $return_data['nursing_license_number'] = (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") ? $nurse->nursing_license_number : "";
        $return_data['authority_Issue'] = (isset($nurse->authority_Issue) && $nurse->authority_Issue != "") ? $nurse->authority_Issue : "";
        $return_data['highest_nursing_degree'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? $nurse->highest_nursing_degree : "";
        $return_data['highest_nursing_degree_definition'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->highest_nursing_degree) : "";
        $return_data['specialty'] = $spl = [];
        if (isset($nurse->specialty) && $nurse->specialty != "") {
            $specialty_array = explode(",", $nurse->specialty);
            if (is_array($specialty_array)) {
                foreach ($specialty_array as $key => $spl_id) {
                    $spl_name = (isset($specialties[$spl_id])) ? $specialties[$spl_id] : "";
                    $spl[] = ['id' => $spl_id, 'name' => $spl_name];
                }
            }
            $return_data['specialty'] = $spl;
        }
        $return_data['work_location'] = (isset($availability->work_location) && $availability->work_location != "") ? strval($availability->work_location) : "";
        // $return_data['work_location_definition'] = isset($workLocations[strval($availability->work_location)]) ? $workLocations[strval($availability->work_location)] : "";
        $return_data['address'] = (isset($nurse->address) && $nurse->address != "") ? $nurse->address : "";

        $return_data['search_status'] = (isset($nurse->search_status) && $nurse->search_status != "") ? strval($nurse->search_status) : "";
        // $return_data['search_status_definition'] = (isset($nurse->search_status) && $nurse->search_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->search_status) : "";
        $return_data['license_type'] = (isset($nurse->license_type) && $nurse->license_type != "") ? strval($nurse->license_type) : "";
        // $return_data['license_type_definition'] = (isset($nurse->license_type) && $nurse->license_type != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_type) : "";
        $return_data['license_status'] = (isset($nurse->license_status) && $nurse->license_status != "") ? strval($nurse->license_status) : "";
        // $return_data['license_status_definition'] = (isset($nurse->license_status) && $nurse->license_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_status) : "";
        $return_data['license_expiry_date'] = (isset($nurse->license_expiry_date) && $nurse->license_expiry_date != "") ? strval($nurse->license_expiry_date) : "";
        $return_data['license_issue_date'] = (isset($nurse->license_issue_date) && $nurse->license_issue_date != "") ? strval($nurse->license_issue_date) : "";
        $return_data['license_renewal_date'] = (isset($nurse->license_renewal_date) && $nurse->license_renewal_date != "") ? strval($nurse->license_renewal_date) : "";

        $return_data['city'] = (isset($nurse->city) && $nurse->city != "") ? $nurse->city : "";
        $return_data['state'] = (isset($nurse->state) && $nurse->state != "") ? $nurse->state : "";
        $return_data['postcode'] = (isset($nurse->postcode) && $nurse->postcode != "") ? $nurse->postcode : "";
        $return_data['country'] = (isset($nurse->country) && $nurse->country != "") ? $nurse->country : "";
        $return_data['hourly_pay_rate'] = (isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") ? strval($nurse->hourly_pay_rate) : "";
        $return_data['shift_duration'] = (isset($availability->shift_duration) && $availability->shift_duration != "") ? strval($availability->shift_duration) : "";
        // $return_data['shift_duration_definition'] = (isset($shifts[$availability->shift_duration]) && $shifts[$availability->shift_duration] != "") ? $shifts[strval($availability->shift_duration)] : "";
        $return_data['assignment_duration'] = (isset($availability->assignment_duration) && $availability->assignment_duration != "") ? strval($availability->shift_duration) : "";
        // $return_data['assignment_duration_definition'] = (isset($assignmentDurations[$availability->assignment_duration]) && $assignmentDurations[$availability->assignment_duration] != "") ? $assignmentDurations[strval($availability->assignment_duration)] : "";
        $return_data['preferred_shift'] = (isset($availability->preferred_shift) && $availability->preferred_shift != "") ? strval($availability->preferred_shift) : "";
        // $return_data['preferred_shift_definition'] = (isset($preferredShifts[$availability->preferred_shift]) &&  $preferredShifts[$availability->preferred_shift] != "") ?  $preferredShifts[$availability->preferred_shift] : "";
        // $return_data['days_of_the_week'] = [];
        // if ($availability->days_of_the_week != "") $return_data['days_of_the_week'] = explode(",", $availability->days_of_the_week);
        // $return_data['earliest_start_date'] = (isset($availability->earliest_start_date) && $availability->earliest_start_date != "") ? date('m/d/Y', strtotime($availability->earliest_start_date)) : "";

        $return_data['profile_detail_flag'] = $profile_detail_flag;
        $return_data['hourly_rate_and_avail_flag'] = $hourly_rate_and_availability;

        // Education details
        // $return_data['college_uni_name'] = (isset($nurse->college_uni_name) && $nurse->college_uni_name != "") ? $nurse->college_uni_name : "";
        // $return_data['study_area'] = (isset($nurse->study_area) && $nurse->study_area != "") ? $nurse->study_area : "";
        // $return_data['graduation_date'] = (isset($nurse->graduation_date) && $nurse->graduation_date != "") ? $nurse->graduation_date : "";

        // $return_data['unavailable_dates'] = array();
        // if($availability->unavailable_dates){
        //     $return_data['unavailable_dates'] = explode(',',$availability->unavailable_dates);
        // }

        $experience = [];
        $exp = Experience::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($exp->count() > 0) {
            $e = $exp;
            foreach ($e as $key => $v) {
                $crt_data['experience_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['position_title'] = (isset($v->position_title) && $v->position_title != "") ? $v->position_title : "";
                $crt_data['unit'] = (isset($v->unit) && $v->unit != "") ? $v->unit : "";
                $crt_data['start_date'] = (isset($v->start_date) && $v->start_date != "") ? date('m/d/Y', strtotime($v->start_date)) : "";
                $crt_data['end_date'] = (isset($v->end_date) && $v->end_date != "") ? date('m/d/Y', strtotime($v->end_date)) : "";
                $crt_data['is_current_job'] = (isset($v->is_current_job) && $v->is_current_job != "") ? $v->is_current_job : "";
                $crt_data["experience_as_acute_care_facility"] = (isset($nurse->experience_as_acute_care_facility) && $nurse->experience_as_acute_care_facility != "") ? $nurse->experience_as_acute_care_facility : "";
                $crt_data["experience_as_ambulatory_care_facility"] = (isset($nurse->experience_as_ambulatory_care_facility) && $nurse->experience_as_ambulatory_care_facility != "") ? $nurse->experience_as_ambulatory_care_facility : "";
                $exp_acute_care = isset($nurse->experience_as_acute_care_facility)? $nurse->experience_as_acute_care_facility : '0';
                $exp_ambulatory_care = isset($nurse->experience_as_ambulatory_care_facility)? $nurse->experience_as_ambulatory_care_facility : '0';
                $crt_data['total_experience'] = $exp_acute_care+$exp_ambulatory_care;
                $crt_data['total_experience'] = (int)$crt_data['total_experience'];
                $experience[] = $crt_data;
        
            }
        }
        $return_data['experience'] = $experience;
        /* experience */

        /* certitficate */
        $certitficate = [];
        $cert = Certification::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($cert->count() > 0) {
            $c = $cert;
            foreach ($c as $key => $v) {
                // if ($v->deleted_at != "") {
                $crt_data['certificate_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['license_number'] = (isset($v->license_number) && $v->license_number != "") ? $v->license_number : "";
                $crt_data['organization'] = (isset($v->organization) && $v->organization != "") ? $v->organization : "";
                $crt_data['effective_date'] = (isset($v->effective_date) && $v->effective_date != "") ? date('m/d/Y', strtotime($v->effective_date)) : "";
                $crt_data['expiration_date'] = (isset($v->expiration_date) && $v->expiration_date != "") ? date('m/d/Y', strtotime($v->expiration_date)) : "";
                $crt_data['renewal_date'] = (isset($v->renewal_date) && $v->renewal_date != "") ? date('m/d/Y', strtotime($v->renewal_date)) : "";

                $crt_data['certificate_image'] = (isset($v->certificate_image) && $v->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $v->certificate_image) : "";

                $certificate_image_base = "";
                if ($v->certificate_image) {
                    $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/certifications/' . $v->certificate_image);
                    if ($t) {
                        $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/nurses/certifications/' . $v->certificate_image);
                    }
                }
                // $crt_data['certificate_image_base'] = ($certificate_image_base != "") ? 'data:image/jpeg;base64,' . base64_encode($certificate_image_base) : "";


                // $crt_data['active'] = (isset($v->active) && $v->active != "") ? $v->active : "";
                // $crt_data['deleted_at'] = (isset($v->deleted_at) && $v->deleted_at != "") ? $v->deleted_at : "";
                   $crt_data['created_at'] = (isset($v->created_at) && $v->created_at != "") ? $v->created_at : "";
                    // $crt_data['updated_at'] = (isset($v->updated_at) && $v->updated_at != "") ? $v->updated_at : ""; 
                $certitficate[] = $crt_data;
                // }
            }
        }
        $return_data['certitficate'] = $certitficate;
        $return_data['resume'] = (isset($nurse->resume) && $nurse->resume != "") ? url('storage/assets/nurses/resumes/' . $nurse->id . '/' . $nurse->resume) : "";
        /* certitficate */


        /* role interest */
        $optyesno = ['1' => "Yes", '0' => "No"];

        $role_interest['clinical_educator'] = (isset($nurse->clinical_educator)) ? strval($nurse->clinical_educator) : "";
        // $role_interest['clinical_educator_definition'] = (isset($optyesno[$nurse->clinical_educator]) && $optyesno[$nurse->clinical_educator] != "") ? $optyesno[$nurse->clinical_educator] : "";
        $role_interest['is_daisy_award_winner'] = (isset($nurse->is_daisy_award_winner)) ? strval($nurse->is_daisy_award_winner) : "";
        // $role_interest['is_daisy_award_winner_definition'] = (isset($optyesno[$nurse->is_daisy_award_winner]) && $optyesno[$nurse->is_daisy_award_winner] != "") ? $optyesno[$nurse->is_daisy_award_winner] : "";
        $role_interest['languages'] = (isset($nurse->languages) && $nurse->languages != "") ? explode(",", $nurse->languages) : "";

        /* nurse assets */
        $role_interest['additional_pictures'] = $role_interest['additional_files'] = [];
        $nurse_assets = NurseAsset::where(['nurse_id' => $nurse->id, 'active' => '1'])->get();

        if ($nurse_assets->count() > 0) {
            foreach ($nurse_assets as $nac_ => $na) {
                if ($na->filter == "additional_photos") $role_interest['additional_pictures'][] = ['asset_id' => $na->id, 'photo' => url('storage/assets/nurses/additional_photos/' . $nurse->id . '/' . $na->name)];
                else $role_interest['additional_files'][] = ['asset_id' => $na->id, 'photo' => url('storage/assets/nurses/additional_files/' . $nurse->id . '/' . $na->name)];
            }
        }
        /* nurse assets */
        $return_data['role_interest'] = $role_interest;
        /* role interest */
        
        // new check
        if (
            (isset($user->date_of_birth) && $user->date_of_birth != "") &&
            (isset($user->driving_license) && $user->driving_license != "") &&
            (isset($user->security_number) && $user->security_number != "")
        ){
            $profile_completion++;
            $return_data['profile_details'] = 'true';
        }else{
            $return_data['profile_details'] = 'false';
        } 
        // end new check

        if(!empty($return_data['highest_nursing_degree'])){
            $profile_completion++;
            $return_data['qualification_details'] = 'true';
        }else{
            $return_data['qualification_details'] = 'false';
        }

        if(!empty($return_data['nursing_license_number'])){
            $profile_completion++;
            $return_data['license_details'] = 'true';
        }else{
            $return_data['license_details'] = 'false';
        }

        if(!empty($return_data['resume'])){
            $profile_completion++;
            $return_data['resume_details'] = 'true';
        }else{
            $return_data['resume_details'] = 'false';
        }

        if(!empty($return_data['certitficate'])){
            $profile_completion++;
            $return_data['certificate_details'] = 'true';
        }else{
            $return_data['certificate_details'] = 'false';
        }

        if(!empty($return_data['experience'])){
            $profile_completion++;
            $return_data['experience_details'] = 'true';
        } else{
            $return_data['experience_details'] = 'false';
        }

        if($profile_completion ==  6){
            $return_data['isUserProfile'] = 'true';
        }else{
            $return_data['isUserProfile'] = 'false';
        }
        $return_data['worker_goodwork_number'] = (isset($nurse->worker_goodwork_number) && $nurse->worker_goodwork_number != "") ? $nurse->worker_goodwork_number : "";
        $return_data['profile_completion'] = $profile_completion;
        // end profile completion
        return $return_data;
    }

    public function workerExperience(Request $request)
    {
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'worker_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $worker = NURSE::where('id', $request->worker_id)->get()->first();
            $user = USER::where('id', $worker->user_id)->get()->first();
            if(isset($worker))
            {
                $experience = [];
                $exp = Experience::where(['nurse_id' => $request->worker_id])->whereNull('deleted_at')->get();
                if ($exp->count() > 0) {
                    $e = $exp;
                    foreach ($e as $key => $v) {
                        $crt_data['experience_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                        $crt_data['organization_name'] = (isset($v->organization_name) && $v->organization_name != "") ? $v->organization_name : "";
                        $crt_data['organization_department_name'] = (isset($v->organization_department_name) && $v->organization_department_name != "") ? $v->organization_department_name : "";
                        $crt_data['position_title'] = (isset($v->position_title) && $v->position_title != "") ? $v->position_title : "";
                        $crt_data['exp_city'] = (isset($v->exp_city) && $v->exp_city != "") ? $v->exp_city : "";
                        $crt_data['facility_type'] = (isset($v->facility_type) && $v->facility_type != "") ? $v->facility_type : "";
                        $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                        
                        $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                        $crt_data['position_title'] = (isset($v->position_title) && $v->position_title != "") ? $v->position_title : "";
                        $crt_data['unit'] = (isset($v->unit) && $v->unit != "") ? $v->unit : "";
                        $crt_data['start_date'] = (isset($v->start_date) && $v->start_date != "") ? date('m/d/Y', strtotime($v->start_date)) : "";
                        $crt_data['end_date'] = (isset($v->end_date) && $v->end_date != "") ? date('m/d/Y', strtotime($v->end_date)) : "";
                        $crt_data['is_current_job'] = (isset($v->is_current_job) && $v->is_current_job != "") ? $v->is_current_job : "";
                        
                        $experience[] = $crt_data;
        
                    }
                }
                
                $this->check = "1";
                $this->message = "Worker exprience details listed successfully";
                $this->return_data = $experience;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse_data = [];
            $cert = 0;
            $cert_progress = 0.00;
            $ref = 0;
            $ref_progress = 0.00;
            $vacc = 0;
            $vacc_progress = 0.00;
            $basic_profile_comp = 0;
            $basic_progress = 0.00;
            $profileCompOverlay = 0;

            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            $user = USER::where('id', $request->user_id)->get()->first();
            $worker_reference = NurseReference::where('nurse_id', $request->nurse_id)->get();
            $worker_asset = NurseAsset::where('nurse_id', $request->nurse_id)->get();
            $reference = [];
            $worker_vaccination_name = $worker['worker_vaccination'];
            if(isset($worker_reference)){
                foreach($worker_reference as $rec){
                    // Reference
                    if(isset($rec) && !empty($rec)){
                        $ref = 25;
                        $ref_progress = 100.00; 
                        $rec['image'] = url("public/images/nurses/reference/" . $rec['image']);
                    }
                    $reference[] = $rec;
                }
            }
            
            $vaccination = [];
            $skill = [];
            $driving_license = [];
            $diploma = [];
            $flu = 0;
            $covid = 0;
            $vaccination_names = isset($worker_vaccination_name)?json_decode($worker_vaccination_name):'';
            $z = 0;
            if(isset($worker_asset) && !empty($worker_asset)){
                foreach($worker_asset as $rec)
                {
                    if(($rec['filter'] == 'vaccination') && !empty($vaccination_names)){
                        $vacc_progress = 100.00;
                        $vacc = 25;
                        $rec['name'] = url("public/images/nurses/vaccination/" . $rec['name']);
                        $rec['vaccination_name'] = $vaccination_names[$z];
                        $rec['using_date'] = isset($rec['using_date'])?$rec['using_date']:"";
                        $vaccination[] = $rec;
                        $z++;
                    }
                    
                    if($rec['filter'] == 'skill'){
                        $rec['name'] = url("public/images/nurses/skill/" . $rec['name']);
                        $rec['using_date'] = isset($rec['using_date'])?$rec['using_date']:"";
                        $skill[] = $rec;
                    }
    
                    if($rec['filter'] == 'driving_license'){
                        $rec['name'] = url("public/images/nurses/driving_license/" . $rec['name']);
                        $rec['using_date'] = isset($rec['using_date'])?$rec['using_date']:"";
                        $driving_license[] = $rec;
                    }
                    if($rec['filter'] == 'diploma'){
                        $rec['name'] = url("public/images/nurses/diploma/" . $rec['name']);
                        $rec['using_date'] = isset($rec['using_date'])?$rec['using_date']:"";
                        $diploma[] = $rec;
                    }
                }
            }

            if(isset($worker))
            {
                $nurse_data = $worker;
                // Basic Profile Information calculateion 
                // Basic Info
                if(isset($worker->credential_title)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->credential_title="";}
                if(isset($worker->highest_nursing_degree)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->highest_nursing_degree="";}
                if(isset($worker->specialty)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->specialty="";}
                if(isset($worker->license_type)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->license_type="";}
                // Skills checklist
                if(isset($worker->diploma)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->diploma="";}
                if(isset($worker->driving_license)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->driving_license="";}
                if(isset($worker->recent_experience)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->recent_experience="";}
                if(isset($worker->worked_at_facility_before)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worked_at_facility_before="";}
                if(isset($worker->worker_ss_number)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_ss_number="";}
                if(isset($worker->eligible_work_in_us)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->eligible_work_in_us="";}
                if(isset($worker->skills_checklists)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->skills_checklists="";}
                // Urgency
                if(isset($worker->worker_urgency)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_urgency="";}
                if(isset($worker->available_position)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->available_position="";}
                if(isset($worker->MSP)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->MSP="";}
                if(isset($worker->VMS)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->VMS="";}
                if(isset($worker->submission_VMS)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->submission_VMS="";}
                if(isset($worker->block_scheduling)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->block_scheduling="";}
                // Float requirement
                if(isset($worker->float_requirement)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->float_requirement="";}
                if(isset($worker->facility_shift_cancelation_policy)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->facility_shift_cancelation_policy="";}
                if(isset($worker->contract_termination_policy)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->contract_termination_policy="";}
                if(isset($worker->distance_from_your_home)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->distance_from_your_home="";}
                if(isset($worker->facilities_you_like_to_work_at)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->facilities_you_like_to_work_at="";}
                if(isset($worker->worker_facility_parent_system)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_facility_parent_system="";}
                if(isset($worker->avg_rating_by_facilities)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->avg_rating_by_facilities="";}
                if(isset($worker->worker_avg_rating_by_recruiters)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_avg_rating_by_recruiters="";}
                if(isset($worker->worker_avg_rating_by_employers)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_avg_rating_by_employers="";}
                if(isset($worker->clinical_setting_you_prefer)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->clinical_setting_you_prefer="";}
                // Patient Ratio
                if(isset($worker->worker_patient_ratio)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_patient_ratio="";}
                if(isset($worker->worker_emr)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_emr="";}
                if(isset($worker->worker_unit)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_unit="";}
                if(isset($worker->worker_department)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_department="";}
                if(isset($worker->worker_bed_size)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_bed_size="";}
                if(isset($worker->worker_trauma_level)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_trauma_level="";}
                if(isset($worker->worker_scrub_color)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_scrub_color="";}
                if(isset($worker->worker_facility_city)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_facility_city="";}
                if(isset($worker->worker_facility_state_code)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_facility_state_code="";}
                // Interview dates
                if(isset($worker->worker_interview_dates)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_interview_dates="";}
                if(isset($worker->worker_start_date)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_start_date="";}
                if(isset($worker->worker_shift_time_of_day)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_shift_time_of_day="";}
                if(isset($worker->worker_hours_per_week)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_hours_per_week="";}
                if(isset($worker->worker_guaranteed_hours)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_guaranteed_hours="";}
                if(isset($worker->worker_hours_shift)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_hours_shift="";}
                if(isset($worker->worker_weeks_assignment)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_weeks_assignment="";}
                if(isset($worker->worker_shifts_week)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_shifts_week="";}
                if(isset($worker->worker_referral_bonus)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_referral_bonus="";}
                // Worker Bonus
                if(isset($worker->worker_sign_on_bonus)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_sign_on_bonus=0;}
                if(isset($worker->worker_completion_bonus)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_completion_bonus=0;}
                if(isset($worker->worker_extension_bonus)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_extension_bonus=0;}
                if(isset($worker->worker_other_bonus)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_other_bonus=0;}
                if(isset($worker->how_much_k)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->how_much_k="";}
                if(isset($worker->worker_health_insurance)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_health_insurance="";}
                if(isset($worker->worker_dental)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_dental="";}
                if(isset($worker->worker_vision)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_vision="";}
                if(isset($worker->worker_actual_hourly_rate)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_actual_hourly_rate="";}
                // Feels $/hr
                if(isset($worker->worker_overtime)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_overtime="";}
                if(isset($worker->worker_holiday)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_holiday="";}
                if(isset($worker->worker_on_call)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_on_call="";}
                if(isset($worker->worker_call_back)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_call_back="";}
                if(isset($worker->worker_orientation_rate)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_orientation_rate="";}
                if(isset($worker->worker_weekly_taxable_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_weekly_taxable_amount=0;}
                if(isset($worker->worker_weekly_non_taxable_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_weekly_non_taxable_amount=0;}
                if(isset($worker->worker_employer_weekly_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_employer_weekly_amount=0;}
                if(isset($worker->worker_goodwork_weekly_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_goodwork_weekly_amount=0;}
                if(isset($worker->worker_total_employer_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_total_employer_amount=0;}
                if(isset($worker->worker_total_goodwork_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_total_goodwork_amount=0;}
                if(isset($worker->worker_total_contract_amount)){$basic_profile_comp=$basic_profile_comp+0.373;}else{$worker->worker_total_contract_amount=0;}
                // check null or not
                $worker->skills = isset($worker->skills)?$worker->skills:"";
                $worker->license_issue_date = isset($worker->license_issue_date)?$worker->license_issue_date:"";
                $worker->license_expiry_date = isset($worker->license_expiry_date)?$worker->license_expiry_date:"";
                $worker->worker_vaccination = isset($worker->worker_vaccination)?$worker->worker_vaccination:0;
                $worker->worked_at_facility_before = isset($worker->worked_at_facility_before)?$worker->worked_at_facility_before:"";
                $worker->worker_number_of_references = isset($worker->worker_number_of_references)?$worker->worker_number_of_references:0;
                $worker->worker_people_you_have_reffered = isset($worker->worker_people_you_have_reffered)?$worker->worker_people_you_have_reffered:"";
                $worker->clinical_educator = isset($worker->clinical_educator)?$worker->clinical_educator:0;
                $worker->slug = isset($worker->slug)?$worker->slug:"";
                $worker->updated_at = isset($worker->updated_at)?$worker->updated_at:"";
                $worker->created_at = isset($worker->created_at)?$worker->created_at:"";
                $worker->deleted_at = isset($worker->deleted_at)?$worker->deleted_at:"";
                $worker->recent_experience = isset($worker->recent_experience)?$worker->recent_experience:"";
                $worker->experience = isset($worker->experience)?$worker->experience:"";
                $worker->hourly_pay_rate = isset($worker->hourly_pay_rate)?$worker->hourly_pay_rate:"";
                $worker->highest_nursing_degree = isset($worker->highest_nursing_degree)?$worker->highest_nursing_degree:"";
                $worker->nursing_license_number = isset($worker->nursing_license_number)?$worker->nursing_license_number:"";
                $worker->license_type = isset($worker->license_type)?$worker->license_type:"";
                $worker->nursing_license_state = isset($worker->nursing_license_state)?$worker->nursing_license_state:"";
                $worker->specialty = isset($worker->specialty)?$worker->specialty:"";
                $worker->worker_feels_like_hour = isset($worker->worker_feels_like_hour)?$worker->worker_feels_like_hour:"";
                $worker->other_certificate_name = isset($worker->other_certificate_name)?$worker->other_certificate_name:"";
                $worker->worker_goodwork_number = isset($worker->id)?$worker->id:"";
                $worker->worker_employer_weekly_amount = isset($worker->worker_employer_weekly_amount)?$worker->worker_employer_weekly_amount:0;
                $worker->eligible_work_in_us = isset($worker->eligible_work_in_us)?$worker->eligible_work_in_us:"";
                

                if($basic_profile_comp >= 24.5){
                    $basic_profile_comp = 25.00;
                }

                $nurse_data['worker_reference'] = $reference;
                $nurse_data['worker_vaccination'] = $vaccination;
                $nurse_data['worker_vaccination_name'] = isset($worker_vaccination_name)?json_decode($worker_vaccination_name):'';
                $nurse_data['skills_checklists'] = $skill;
                $nurse_data['driving_license'] = $driving_license;
                $nurse_data['diploma'] = $diploma;
                $nurse_data['worker_id'] = $worker->id;

                if(isset($worker->worker_certificate_name) && !empty($worker->worker_certificate_name)){
                    $worker_certificate = [];
                    $data = [];
                    $count = 0;
                    foreach(explode(',', $worker->worker_certificate) as $rec){
                        $image[] = url("public/images/nurses/certificate/" . $rec);
                    }
                    foreach(json_decode($worker->worker_certificate_name) as $info){
                        $data['name'][] = $info;
                        $data['image'][] = $image[$count];
                        $count++;
                    }
                    
                    for($j=0; $j< $count; $j++){
                        $worker_certificate[$j]['name'] = $data['name'][$j]; 
                        $worker_certificate[$j]['image'] = $data['image'][$j]; 
                    }
                    $nurse_data['worker_certificate'] = $worker_certificate;
                    $nurse_data['worker_certificate_name'] = json_decode($worker->worker_certificate_name);
                    
                    $cert = 25;
                    $cert_progress = 100.00;
                }else{
                    $nurse_data['worker_certificate'] = [];
                    $nurse_data['worker_certificate_name'] = [];
                }

                if($cert == 25){
                    $nurse_data['certifications_check'] = 1;
                }else{
                    $nurse_data['certifications_check'] = 0;
                }
                if($basic_profile_comp == 25){
                    $nurse_data['profession_information_check'] = 1;
                }else{
                    $nurse_data['profession_information_check'] = 0;
                }
                if($vacc == 25){
                    $nurse_data['vaccination_immunization_check'] = 1;
                }else{
                    $nurse_data['vaccination_immunization_check'] = 0;
                }
                if($ref == 25){
                    $nurse_data['references_check'] = 1;
                }else{
                    $nurse_data['references_check'] = 0;
                }

                $nurse_data['profile_comp'] = $cert+$vacc+$ref+$basic_profile_comp;
                $nurse_data['profile_comp'] = round($nurse_data['profile_comp']);
                $nurse_data['profileCompOverlay'] = round($nurse_data['profile_comp'])/100;
                $nurse_data['profession_information_per'] = $basic_profile_comp;
                $nurse_data['vaccination_immunization_per'] = $vacc;
                $nurse_data['references_per'] = $ref;
                $nurse_data['certifications_per'] = $cert;
                $nurse_data['certification_Progress'] = $cert_progress/100;
                $nurse_data['vaccination_Progress'] = $vacc_progress/100;
                $nurse_data['references_Progress'] = $ref_progress/100;
                $basic_progress = $basic_profile_comp*4;
                $nurse_data['profile_Basic_Progress'] = $basic_progress/100;
                
                if(isset($user)){
                    $nurse_data['user_id'] = $user->id;
                    if(isset($user->image)){
                        $nurse_data['image'] = url("public/images/nurses/profile/" . $user->image);
                    }else{
                        $nurse_data['image'] = "";
                    }
                    $nurse_data['Worker_name'] = $user->first_name.' '.$user->last_name;
                    $nurse_data['country'] = isset($user->country)?$user->country:"";
                    $nurse_data['state'] = isset($user->state)?$user->state:"";
                    $nurse_data['city'] = isset($user->city)?$user->city:"";
                    $nurse_data['date_of_birth'] = isset($user->date_of_birth)?$user->date_of_birth:"";
                    $nurse_data['street_address'] = isset($user->street_address)?$user->street_address:"";
                    $nurse_data['postcode'] = isset($user->postcode)?$user->postcode:"";
                }else{
                    $nurse_data['user_id'] = '';
                    $nurse_data['image'] = '';
                    $nurse_data['Worker_name'] = '';
                }
                
                // Specialty and experience
                if(isset($worker->specialty) && !empty($worker->specialty))
                {
                    $speciality = explode(',',$worker->specialty);
                    $experiences = explode(',',$worker->experience);
                    $exp = [];
                    $spe = [];
                    $specialities = [];
                    $i = 0;
                    foreach($speciality as $special){
                        $spe[] = $special;
                        $i++;
                    }
                    foreach($experiences as $experience){
                        $exp[] = $experience;
                    }
                   
                    for($j=0; $j< $i; $j++){
                        $specialities[$j]['spe'] = $spe[$j]; 
                        $specialities[$j]['exp'] = $exp[$j]; 
                    }
                }else{
                    $specialities = [];
                }
                $nurse_data['specialty'] = $specialities;
                if(isset($basic_profile_comp)){
                    Nurse::where('id', $request->nurse_id)->update(['profession_information_per' => $basic_profile_comp, 'worker_goodwork_number' => $request->nurse_id]);
                }
                $this->check = "1";
                $this->message = "Worker profile details listed successfully";
                $this->return_data = $nurse_data;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerBasicInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            // 'user_id' => 'required',
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                $worker->credential_title = isset($request->title)?$request->title:$worker->credential_title;
                $worker->highest_nursing_degree = isset($request->profession)?$request->profession:$worker->highest_nursing_degree;
                $worker->specialty = isset($request->specialty)?$request->specialty:$worker->specialty;
                $worker->license_type = isset($request->licence)?$request->licence:$worker->license_type;
                $worker->nursing_license_number = isset($request->nursing_license_number)?$request->nursing_license_number:$worker->nursing_license_number;
                $worker->nursing_license_state = isset($request->nursing_license_state)?$request->nursing_license_state:$worker->nursing_license_state;
                $worker->license_expiry_date = isset($request->license_expiry_date)?$request->license_expiry_date:$worker->license_expiry_date;
                $worker->compact_license = isset($request->compact_license)?$request->compact_license:$worker->compact_license;
                $worker->experience = isset($request->experience)?$request->experience:$worker->experience;
                if(isset($worker->worker_goodwork_number) && $worker->worker_goodwork_number != 0 && $worker->worker_goodwork_number !== null && $worker->worker_goodwork_number !== ''){
                    $goodwork_number = $worker->worker_goodwork_number;
                }else{
                    $goodwork_number = uniqid();
                }
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                            'credential_title' => $worker->credential_title,
                                            'highest_nursing_degree' => $worker->highest_nursing_degree,
                                            'specialty' => $worker->specialty,
                                            'experience' => $worker->experience,
                                            'license_expiry_date' => $worker->license_expiry_date,
                                            'license_type' => $worker->license_type,
                                            'compact_license' => $worker->compact_license,
                                            'nursing_license_number' => $worker->nursing_license_number,
                                            'nursing_license_state' => $worker->nursing_license_state,
                                            'worker_goodwork_number' => $goodwork_number
                                        ]);
                
                $worker = NURSE::where('id', $request->nurse_id)->get()->first();           
                $this->check = "1";
                $this->message = "Worker profile details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerSkills(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                // Upload driving license
                if ($request->hasFile('driving_license') && $request->file('driving_license') != null) 
                {    
                    NurseAsset::where('nurse_id', $request->nurse_id)->where('filter', 'driving_license')->forceDelete();
                    if(!empty($worker->driving_license)){
                        // unlink(public_path('images/nurses/driving_license/').$worker->driving_license);
                        if(\File::exists(public_path('images/nurses/driving_license/').$worker->driving_license))
                        {
                            \File::delete(public_path('images/nurses/driving_license/').$worker->driving_license);
                        }
                    }

                    $driving_license_name_full = $request->file('driving_license')->getClientOriginalName();
                    $driving_license_name = pathinfo($driving_license_name_full, PATHINFO_FILENAME);
                    $driving_license_ext = $request->file('driving_license')->getClientOriginalExtension();
                    $driving_license = $driving_license_name.'_'.time().'.'.$driving_license_ext;
                    $destinationPath = 'images/nurses/driving_license';
                    $request->file('driving_license')->move(public_path($destinationPath), $driving_license);
                    
                    // write image name in worker table
                    $worker->driving_license = $driving_license;
                    $license_expiration_date = isset($request->license_expiration_date)?$request->license_expiration_date:'';
                    $driving_license_asset = NurseAsset::create([
                                                'nurse_id' => $request->nurse_id,
                                                'using_date' => $license_expiration_date,
                                                'name' => $driving_license,
                                                'filter' => 'driving_license',
                                            ]);

                    if(isset($driving_license_asset)){
                        $update = NurseAsset::where(['id' => $driving_license_asset['id']])->update([
                            'using_date' => $license_expiration_date
                        ]);
                    }
                }else{
                    $worker->driving_license = NULL;
                }
                
                // Upload diploma
                if ($request->hasFile('diploma') && $request->file('diploma') != null) 
                {
                    NurseAsset::where('nurse_id', $request->nurse_id)->where('filter', 'diploma')->forceDelete();
                    if(!empty($worker->diploma)){
                        // unlink(public_path('images/nurses/diploma/').$worker->diploma);
                        if(\File::exists(public_path('images/nurses/diploma/').$worker->diploma))
                        {
                            \File::delete(public_path('images/nurses/diploma/').$worker->diploma);
                        }
                    }

                    $diploma_name_full = $request->file('diploma')->getClientOriginalName();
                    $diploma_name = pathinfo($diploma_name_full, PATHINFO_FILENAME);
                    $diploma_ext = $request->file('diploma')->getClientOriginalExtension();
                    $diploma = $diploma_name.'_'.time().'.'.$diploma_ext;
                    $destinationPath = 'images/nurses/diploma';
                    $request->file('diploma')->move(public_path($destinationPath), $diploma);

                    // write image name in worker table
                    $worker->diploma = $diploma;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->nurse_id,
                        'name' => $diploma,
                        'filter' => 'diploma'
                    ]);
                }else{
                    $worker->diploma = NULL;
                }
                // Upload skills
                $using_date = [];
                $count_num = 0;
                if ($request->hasFile('skill') && $request->file('skill') != null) {
                    $images = $request->file('skill');
                    $imageName='';
                    $skills_img = explode(',', $worker->skills_checklists);
                    NurseAsset::where('nurse_id', $request->nurse_id)->where('filter', 'skill')->forceDelete();
                    if(isset($request->completion_date)){
                        $using_date = explode(",",$request->completion_date);
                    }
                   
                    foreach($skills_img as $img_rec){
                        if(isset($img_rec) && !empty($img_rec)){
                            // unlink(public_path('images/nurses/skill/').$img_rec);
                            if(\File::exists(public_path('images/nurses/skill/').$img_rec))
                            {
                                \File::delete(public_path('images/nurses/skill/').$img_rec);
                            }
                        }
                    }
                    foreach($images as $image)
                    {
                        $skill_name_full = $image->getClientOriginalName();
                        $skill_name = pathinfo($skill_name_full, PATHINFO_FILENAME);
                        $skill_ext = $image->getClientOriginalExtension();
                        $skill = $skill_name.'_'.time().'.'.$skill_ext;
                        $destinationPath = 'images/nurses/skill';
                        $image->move(public_path($destinationPath), $skill);
                        $imageName=$imageName.$skill.',';

                        // write image name in worker table
                        // $completion_date = isset($request->completion_date)?$request->completion_date:'';
                        $skill_asset = NurseAsset::create([
                            'nurse_id' => $request->nurse_id,
                            'name' => $skill,
                            'filter' => 'skill',
                            'using_date' => $using_date[$count_num]
                        ]);
                        if(isset($skill_asset)){
                            $update = NurseAsset::where(['id' => $skill_asset['id']])->update([
                                'using_date' => $using_date[$count_num]
                            ]);
                        }
                        $count_num++;
                    }
                    $worker->skills_checklists = $imageName;
 
                }else{
                    $worker->skills_checklists = NULL;
                    $worker->skills = NULL;
                }
                $worker->recent_experience = isset($request->recent_experience) ? $request->recent_experience : $worker->recent_experience;
                $worker->worked_at_facility_before = isset($request->worked_at_facility_before) ? $request->worked_at_facility_before : $worker->worked_at_facility_before;
                $worker->worker_ss_number = isset($request->ss_card) ? $request->ss_card : $worker->worker_ss_number;
                $worker->skills = isset($request->skills_name) ? $request->skills_name : $worker->skills;
                $worker->eligible_work_in_us = isset($request->eligible_work_in_us) ? $request->eligible_work_in_us : $worker->eligible_work_in_us;
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                            'worker_ss_number' => $worker->worker_ss_number,
                                            'driving_license' => $worker->driving_license,
                                            'recent_experience' => $worker->recent_experience,
                                            'worked_at_facility_before' => $worker->worked_at_facility_before,
                                            'eligible_work_in_us' => $worker->eligible_work_in_us,
                                            'skills_checklists' => $worker->skills_checklists,
                                            'skills' => $worker->skills,
                                            'diploma' => $worker->diploma,
                                        ]);
                $worker = NURSE::where('id', $request->nurse_id)->get()->first();
                $this->check = "1";
                $this->message = "Worker Skills details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerVaccination(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            // 'user_id' => 'required',
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            $vaccination = [];
            $imageName='';
            if(isset($worker))
            {
                if(isset($request->worker_vaccination) && !empty($request->worker_vaccination))
                {
                    $worker_vaccination = explode(',', $request->worker_vaccination);
                    $vaccine_date = explode(',', $request->date);
                    foreach($worker_vaccination as $vac){
                        $vaccination[] = $vac;
                    }
                    foreach($vaccine_date as $dates){
                        $date[] = $dates;
                    }
                    
                    // upload vaccination
                    if ($request->hasFile('image') && $request->file('image') != null) 
                    {
                        $images = $request->file('image');
                        $workerVaccinationExist = NurseAsset::where(['nurse_id' => $request->nurse_id,'filter' => 'vaccination'])->get();
                        if(isset($request->worker_vaccination))
                        {
                            if(isset($workerVaccinationExist) && !empty($workerVaccinationExist)){
                                NurseAsset::where('nurse_id', $request->nurse_id)->where('filter', 'vaccination')->forceDelete();
                                foreach($workerVaccinationExist as $record) 
                                {
                                    if(\File::exists(public_path('images/nurses/vaccination/').$record['name']))
                                    {
                                        \File::delete(public_path('images/nurses/vaccination/').$record['name']);
                                    }
                                } 
                            }
                        }
                        $i = 0;
                        foreach($images as $image){
                            $vaccination_name_full = $image->getClientOriginalName();
                            $vaccination_name = pathinfo($vaccination_name_full, PATHINFO_FILENAME);
                            $vaccination_ext = $image->getClientOriginalExtension();
                            $vaccinationation = $vaccination_name.'_'.time().'.'.$vaccination_ext;
                            $destinationPath = 'images/nurses/vaccination';
                            $image->move(public_path($destinationPath), $vaccinationation);
                            if(isset($vaccinationation)){
                                $imageName=$imageName.$vaccinationation.',';
                            }
                            
                
                            // write image name in worker table
                            $vaccination_asset = NurseAsset::create([
                                'nurse_id' => $request->nurse_id,
                                'name' => $vaccinationation,
                                'using_date' => $date[$i],
                                'filter' => 'vaccination'
                            ]);
                            $update = NurseAsset::where(['id' => $vaccination_asset['id']])->update([
                                'using_date' => $date[$i]
                            ]);
                            $i++;
                        }
                    }

                    $vaccination = json_encode($vaccination);
                    $nurse_update = NURSE::where(['id' => $worker->id])
                                        ->update([
                                                'worker_vaccination' => $vaccination,
                                            ]);
                    $worker = NURSE::where('id', $request->nurse_id)->get()->first();

                    $this->check = "1";
                    $this->message = "Worker Skills details listed successfully";
                    $this->return_data = $worker;
                }else{
                    $nurse_update = NURSE::where(['id' => $worker->id])
                                        ->update([
                                                // 'worker_vaccination' => $worker->worker_vaccination,
                                                'worker_vaccination' => NULL,
                                            ]);
                    $worker = NURSE::where('id', $request->nurse_id)->get()->first();
                    $this->check = "1";
                    $this->message = "Worker Skills details listed successfully";
                    $this->return_data = $worker;
                }
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerReferrence(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            $workerReferenceExist = NurseReference::where('nurse_id', $request->nurse_id)->get();
           
            if(isset($worker))
            {
                if(isset($request->number_of_reference) && $request->number_of_reference > 0){
                    if(isset($workerReferenceExist) && !empty($workerReferenceExist)){
                        NurseReference::where('nurse_id', $request->nurse_id)->forceDelete();
                        foreach($workerReferenceExist as $record) 
                        {
                            if(\File::exists(public_path('images/nurses/reference/').$record['image']))
                            {
                                \File::delete(public_path('images/nurses/reference/').$record['image']);
                            }
                        } 
                    }

                    $worker->worker_number_of_references = isset($request->number_of_reference) ? $request->number_of_reference : $worker->worker_number_of_references;
                    if(isset($request->name) && !empty($request->name)){
                        $name = explode(",",$request->name);
                    }
                    if(isset($request->phone) && !empty($request->phone)){
                        $phone = explode(",",$request->phone);
                    }
                    if(isset($request->email) && !empty($request->email)){
                        $email = explode(",",$request->email);
                    }
                    if(isset($request->date_referred) && !empty($request->date_referred)){
                        $date_referred = explode(",",$request->date_referred);
                    }
                    if(isset($request->title_of_reference) && !empty($request->title_of_reference)){
                        $title_of_reference = explode(",",$request->title_of_reference);
                    }
                    if(isset($request->recency_of_reference) && !empty($request->recency_of_reference)){
                        $recency_of_reference = explode(",",$request->recency_of_reference);
                    }
                    
                    if ($request->hasFile('image') && $request->file('image') != null) {
                        $images = $request->file('image');
                        $imageName='';
                        $i=0;
                        foreach($images as $image){
                            $reference_name_full = $image->getClientOriginalName();
                            $reference_name = pathinfo($reference_name_full, PATHINFO_FILENAME);
                            $reference_ext = $image->getClientOriginalExtension();
                            $reference = $reference_name.'_'.time().'.'.$reference_ext;
                            $destinationPath = 'images/nurses/reference';
                            $image->move(public_path($destinationPath), $reference);
                            $imageName=$imageName.$reference.',';
                
                            // write image name in worker table
                            $reference_asset = NurseReference::create([
                                'nurse_id' => $request->nurse_id,
                                'name' => $name[$i],
                                'email' => $email[$i],
                                'phone' => $phone[$i],
                                'date_referred' => $date_referred[$i],
                                'min_title_of_reference' => $title_of_reference[$i],
                                'recency_of_reference' => $recency_of_reference[$i],
                                'image' => $reference
                            ]);
                            if(isset($reference_asset)){
                                $update = NurseReference::where(['id' => $reference_asset['id']])->update([
                                    'date_referred' => $date_referred[$i]
                                ]);
                            }
                            $i++;
                        }
                    }else{
                        $pointnum = $worker->worker_number_of_references;
                        if(isset($request->name) && !empty($request->name)){
                            $name = explode(",",$request->name);
                        }
                        if(isset($request->phone) && !empty($request->phone)){
                            $phone = explode(",",$request->phone);
                        }
                        if(isset($request->email) && !empty($request->email)){
                            $email = explode(",",$request->email);
                        }
                        if(isset($request->date_referred) && !empty($request->date_referred)){
                            $date_referred = explode(",",$request->date_referred);
                        }
                        if(isset($request->title_of_reference) && !empty($request->title_of_reference)){
                            $title_of_reference = explode(",",$request->title_of_reference);
                        }
                        if(isset($request->recency_of_reference) && !empty($request->recency_of_reference)){
                            $recency_of_reference = explode(",",$request->recency_of_reference);
                        }
                        // $i=0;
                        for($i=0; $i<$pointnum; $i++)
                        {
                            $reference_asset = NurseReference::create([
                                'nurse_id' => $request->nurse_id,
                                'name' => isset($name[$i])?$name[$i]:"",
                                'email' => isset($email[$i])?$email[$i]:"",
                                'phone' => isset($phone[$i])?$phone[$i]:"",
                                'date_referred' => isset($date_referred[$i])?$date_referred[$i]:"",
                                'min_title_of_reference' => isset($title_of_reference[$i])?$title_of_reference[$i]:"",
                                'recency_of_reference' => isset($recency_of_reference[$i])?$recency_of_reference[$i]:"",
                                'image' => null
                            ]);
                            if(isset($reference_asset)){
                                $update = NurseReference::where(['id' => $reference_asset['id']])->update([
                                    'date_referred' => $date_referred[$i]
                                ]);
                            }
                        }
                    }
                }
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_number_of_references' => $worker->worker_number_of_references,
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Reference details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerCertificates(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            $imageName='';
            if(isset($worker))
            {
                $workerCertificateExist = NurseAsset::where(['nurse_id' => $request->nurse_id,'filter' => 'certificate'])->get();
                if(isset($request->worker_certificate_name) && $request->worker_certificate_name != '')
                {
                    if(isset($workerCertificateExist) && !empty($workerCertificateExist)){
                        NurseAsset::where('nurse_id', $request->nurse_id)->where('filter', 'certificate')->forceDelete();
                        foreach($workerCertificateExist as $record) 
                        {
                            if(\File::exists(public_path('images/nurses/certificate/').$record['name']))
                            {
                                \File::delete(public_path('images/nurses/certificate/').$record['name']);
                            }
                        } 
                    }
                }

                if ($request->hasFile('worker_certificate') && $request->file('worker_certificate') != null) {
                    $images = $request->file('worker_certificate');
                    
                    foreach($images as $image){
                        $certificate_name_full = $image->getClientOriginalName();
                        $certificate_name = pathinfo($certificate_name_full, PATHINFO_FILENAME);
                        $certificate_ext = $image->getClientOriginalExtension();
                        $certificate = $certificate_name.'_'.time().'.'.$certificate_ext;
                        $destinationPath = 'images/nurses/certificate';
                        $image->move(public_path($destinationPath), $certificate);
                        if(isset($certificate) && !empty($certificate)){
                            $imageName=$imageName.$certificate.',';
                        }
                        
                        // write image name in worker table
                        $certificate_asset = NurseAsset::create([
                            'nurse_id' => $request->nurse_id,
                            'name' => $certificate,
                            'filter' => 'certificate'
                        ]);
                    }
                }else{
                    $imageName = NULL;
                }
                
                if(!empty($request->worker_certificate_name)){
                    $worker->worker_certificate_name = explode(",",$request->worker_certificate_name);
                }else{
                    $worker->worker_certificate_name = NULL;
                }
               
                $nurse_update = NURSE::where(['id' => $worker->id])
                                ->update([
                                    'worker_certificate_name' => $worker->worker_certificate_name,
                                    'worker_certificate' => $imageName
                                ]);

                
                
                $this->check = "1";
                $this->message = "Worker certification details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerUrgency(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            
            if(isset($worker))
            {
                $worker->worker_urgency = isset($request->worker_urgency) ? $request->worker_urgency : $worker->worker_urgency;
                $worker->available_position = isset($request->available_position) ? $request->available_position : $worker->available_position;
                $worker->MSP = isset($request->MSP) ? $request->MSP : $worker->MSP;
                $worker->VMS = isset($request->VMS) ? $request->VMS : $worker->VMS;
                $worker->submission_VMS = isset($request->submission_VMS) ? $request->submission_VMS : $worker->submission_VMS;
                $worker->block_scheduling = isset($request->block_scheduling) ? $request->block_scheduling : $worker->block_scheduling;
                if(!empty($worker->worker_recency_of_reference)){
                    $title = explode(",",$worker->worker_min_title_of_reference);
                    $recency = explode(",",$worker->worker_recency_of_reference);
                }
                
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_urgency' => $worker->worker_urgency,
                                        'available_position' => $worker->available_position,
                                        'MSP' => $worker->MSP,
                                        'VMS' => $worker->VMS,
                                        'submission_VMS' => $worker->submission_VMS,
                                        'block_scheduling' => $worker->block_scheduling,
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Urgency details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerFacilityInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            
            if(isset($worker))
            {
                $worker->float_requirement = isset($request->float_requirement) ? $request->float_requirement : $worker->float_requirement;
                $worker->facility_shift_cancelation_policy = isset($request->facility_shift_cancelation_policy) ? $request->facility_shift_cancelation_policy : $worker->facility_shift_cancelation_policy;
                $worker->contract_termination_policy = isset($request->contract_termination_policy) ? $request->contract_termination_policy : $worker->contract_termination_policy;
                $worker->distance_from_your_home = isset($request->distance_from_your_home) ? $request->distance_from_your_home : $worker->distance_from_your_home;
                $worker->facilities_you_like_to_work_at = isset($request->facilities_you_like_to_work_at) ? $request->facilities_you_like_to_work_at : $worker->facilities_you_like_to_work_at;
                $worker->worker_facility_parent_system = isset($request->worker_facility_parent_system) ? $request->worker_facility_parent_system : $worker->worker_facility_parent_system;
                $worker->avg_rating_by_facilities = isset($request->avg_rating_by_facilities) ? $request->avg_rating_by_facilities : $worker->avg_rating_by_facilities;
                $worker->worker_avg_rating_by_recruiters = isset($request->worker_avg_rating_by_recruiters) ? $request->worker_avg_rating_by_recruiters : $worker->worker_avg_rating_by_recruiters;
                $worker->worker_avg_rating_by_employers = isset($request->worker_avg_rating_by_employers) ? $request->worker_avg_rating_by_employers : $worker->worker_avg_rating_by_employers;
                $worker->clinical_setting_you_prefer = isset($request->clinical_setting_you_prefer) ? $request->clinical_setting_you_prefer : $worker->clinical_setting_you_prefer;
                
                if($worker->distance_from_your_home == 'NA'){
                    $worker->distance_from_your_home = 0;
                }
                if($worker->avg_rating_by_facilities == 'NA'){
                    $worker->avg_rating_by_facilities = 0;
                }
                if($worker->worker_avg_rating_by_recruiters == 'NA'){
                    $worker->worker_avg_rating_by_recruiters = 0;
                }
                if($worker->worker_avg_rating_by_employers == 'NA'){
                    $worker->worker_avg_rating_by_employers = 0;
                }
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'float_requirement' => $worker->float_requirement,
                                        'facility_shift_cancelation_policy' => $worker->facility_shift_cancelation_policy,
                                        'contract_termination_policy' => $worker->contract_termination_policy,
                                        'distance_from_your_home' => $worker->distance_from_your_home,
                                        'facilities_you_like_to_work_at' => $worker->facilities_you_like_to_work_at,
                                        'worker_facility_parent_system' => $worker->worker_facility_parent_system,
                                        'avg_rating_by_facilities' => $worker->avg_rating_by_facilities,
                                        'worker_avg_rating_by_recruiters' => $worker->worker_avg_rating_by_recruiters,
                                        'worker_avg_rating_by_employers' => $worker->worker_avg_rating_by_employers,
                                        'clinical_setting_you_prefer' => $worker->clinical_setting_you_prefer
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Facility Info details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function patientRatio(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                $worker->worker_patient_ratio = isset($request->worker_patient_ratio) ? $request->worker_patient_ratio : $worker->worker_patient_ratio;
                $worker->worker_emr = isset($request->emr) ? $request->emr : $worker->worker_emr;
                $worker->worker_unit = isset($request->unit) ? $request->unit : $worker->worker_unit;
                $worker->worker_department = isset($request->department) ? $request->department : $worker->worker_department;
                $worker->worker_bed_size = isset($request->bed_size) ? $request->bed_size : $worker->worker_bed_size;
                $worker->worker_trauma_level = isset($request->trauma_level) ? $request->trauma_level : $worker->worker_trauma_level;
                $worker->worker_scrub_color = isset($request->scrub_color) ? $request->scrub_color : $worker->worker_scrub_color;
                $worker->worker_facility_city = isset($request->facility_city) ? $request->facility_city : $worker->worker_facility_city;
                $worker->worker_facility_state_code = isset($request->facility_state_code) ? $request->facility_state_code : $worker->worker_facility_state_code;
                
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_patient_ratio' => $worker->worker_patient_ratio,
                                        'worker_emr' => $worker->worker_emr,
                                        'worker_unit' => $worker->worker_unit,
                                        'worker_department' => $worker->worker_department,
                                        'worker_bed_size' => $worker->worker_bed_size,
                                        'worker_trauma_level' => $worker->worker_trauma_level,
                                        'worker_scrub_color' => $worker->worker_scrub_color,
                                        'worker_facility_city' => $worker->worker_facility_city,
                                        'worker_facility_state_code' => $worker->worker_facility_state_code
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Skills details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function interviewDate(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                $worker->worker_interview_dates = isset($request->interview_date) ? $request->interview_date : $worker->worker_interview_dates;
                $worker->worker_start_date = isset($request->start_date) ? $request->start_date : $worker->worker_start_date;
                $worker->worker_as_soon_as_posible = isset($request->worker_as_soon_as_posible) ? $request->worker_as_soon_as_posible : $worker->worker_as_soon_as_posible;
                $worker->worker_shift_time_of_day = isset($request->shift_time_of_day) ? $request->shift_time_of_day : $worker->worker_shift_time_of_day;
                $worker->worker_hours_per_week = isset($request->hours_per_week) ? $request->hours_per_week : $worker->worker_hours_per_week;
                $worker->worker_guaranteed_hours = isset($request->guaranteed_hours) ? $request->guaranteed_hours : $worker->worker_guaranteed_hours;
                $worker->worker_hours_shift = isset($request->hour_shift) ? $request->hour_shift : $worker->worker_hours_shift;
                $worker->worker_weeks_assignment = isset($request->weeks_assignment) ? $request->weeks_assignment : $worker->worker_weeks_assignment;
                $worker->worker_shifts_week = isset($request->shift_week) ? $request->shift_week : $worker->worker_shifts_week;
                $worker->worker_referral_bonus = isset($request->referral_bonus) ? $request->referral_bonus : $worker->worker_referral_bonus;
                
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_interview_dates' => $worker->worker_interview_dates,
                                        'worker_start_date' => $worker->worker_start_date,
                                        'worker_as_soon_as_posible' => $worker->worker_as_soon_as_posible,
                                        'worker_shift_time_of_day' => $worker->worker_shift_time_of_day,
                                        'worker_hours_per_week' => $worker->worker_hours_per_week,
                                        'worker_guaranteed_hours' => $worker->worker_guaranteed_hours,
                                        'worker_hours_shift' => $worker->worker_hours_shift,
                                        'worker_weeks_assignment' => $worker->worker_weeks_assignment,
                                        'worker_shifts_week' => $worker->worker_shifts_week,
                                        'worker_referral_bonus' => $worker->worker_referral_bonus
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Skills details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerBonus(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                $worker->worker_sign_on_bonus = isset($request->sign_on_bonus) ? $request->sign_on_bonus : $worker->worker_sign_on_bonus;
                $worker->worker_completion_bonus = isset($request->completion_bonus) ? $request->completion_bonus : $worker->worker_completion_bonus;
                $worker->worker_extension_bonus = isset($request->extension_bonus) ? $request->extension_bonus : $worker->worker_extension_bonus;
                $worker->worker_other_bonus = isset($request->other_bonus) ? $request->other_bonus : $worker->worker_other_bonus;
                $worker->how_much_k = isset($request->how_much_k) ? $request->how_much_k : $worker->how_much_k;
                $worker->worker_health_insurance = isset($request->health_insurance) ? $request->health_insurance : $worker->worker_health_insurance;
                $worker->worker_dental = isset($request->dental) ? $request->dental : $worker->worker_dental;
                $worker->worker_vision = isset($request->vision) ? $request->vision : $worker->worker_vision;
                $worker->worker_actual_hourly_rate = isset($request->actual_hourly_rate) ? $request->actual_hourly_rate : $worker->worker_actual_hourly_rate;
                
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_sign_on_bonus' => $worker->worker_sign_on_bonus,
                                        'worker_completion_bonus' => $worker->worker_completion_bonus,
                                        'worker_extension_bonus' => $worker->worker_extension_bonus,
                                        'worker_other_bonus' => $worker->worker_other_bonus,
                                        'how_much_k' => $worker->how_much_k,
                                        'worker_health_insurance' => $worker->worker_health_insurance,
                                        'worker_dental' => $worker->worker_dental,
                                        'worker_vision' => $worker->worker_vision,
                                        'worker_actual_hourly_rate' => $worker->worker_actual_hourly_rate
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Skills details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerFeelsLikeHour(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'nurse_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = NURSE::where('id', $request->nurse_id)->get()->first();
            if(isset($worker))
            {
                $worker->worker_overtime = isset($request->overtime) ? $request->overtime : $worker->worker_overtime;
                $worker->worker_holiday = isset($request->holiday) ? $request->holiday : $worker->worker_holiday;
                $worker->worker_on_call = isset($request->on_call) ? $request->on_call : $worker->worker_on_call;
                $worker->worker_call_back = isset($request->call_back) ? $request->call_back : $worker->worker_call_back;
                $worker->worker_orientation_rate = isset($request->orientation_rate) ? $request->orientation_rate : $worker->worker_orientation_rate;
                $worker->worker_weekly_non_taxable_amount = isset($request->weekly_non_taxable_amount) ? $request->weekly_non_taxable_amount : $worker->worker_weekly_non_taxable_amount;
                
                
                if($worker->worker_weekly_non_taxable_amount == 'NA'){
                    $worker->worker_weekly_non_taxable_amount = 0;
                }
                if($worker->worker_weekly_taxable_amount == 'NA'){
                    $worker->worker_weekly_taxable_amount = 0;
                }
                if($worker->worker_sign_on_bonus == 'NA'){
                    $worker->worker_sign_on_bonus = 0;
                }
                if($worker->worker_completion_bonus == 'NA'){
                    $worker->worker_completion_bonus = 0;
                }
                if($worker->worker_hours_per_week == 'NA'){
                    $worker->worker_hours_per_week = 0;
                }
                if($worker->worker_actual_hourly_rate == 'NA'){
                    $worker->worker_actual_hourly_rate = 0;
                }
                if($worker->worker_weeks_assignment == 'NA'){
                    $worker->worker_weeks_assignment = 0;
                }
                $worker->worker_weekly_taxable_amount = $worker->worker_hours_per_week*$worker->worker_actual_hourly_rate;
                $worker->worker_employer_weekly_amount = $worker->worker_weekly_taxable_amount+$worker->worker_weekly_non_taxable_amount;
                $worker->worker_goodwork_weekly_amount = $worker->worker_employer_weekly_amount*0.05;
                $worker->worker_total_employer_amount = ($worker->worker_weeks_assignment*$worker->worker_employer_weekly_amount)+$worker->worker_sign_on_bonus+$worker->worker_completion_bonus;
                $worker->worker_total_goodwork_amount = $worker->worker_weeks_assignment*$worker->worker_goodwork_weekly_amount;
                $worker->worker_total_contract_amount = $worker->worker_total_employer_amount+$worker->worker_total_goodwork_amount;
                if($worker->worker_hours_per_week == 0){
                    $worker->worker_feels_like_hour = 0;
                }else{
                    $worker->worker_feels_like_hour = $worker->worker_employer_weekly_amount/$worker->worker_hours_per_week;
                }
                $nurse_update = NURSE::where(['id' => $worker->id])
                                    ->update([
                                        'worker_overtime' => $worker->worker_overtime,
                                        'worker_holiday' => $worker->worker_holiday,
                                        'worker_on_call' => $worker->worker_on_call,
                                        'worker_call_back' => $worker->worker_call_back,
                                        'worker_orientation_rate' => $worker->worker_orientation_rate,
                                        'worker_weekly_taxable_amount' => $worker->worker_weekly_taxable_amount,
                                        'worker_weekly_non_taxable_amount' => $worker->worker_weekly_non_taxable_amount,
                                        'worker_employer_weekly_amount' => $worker->worker_employer_weekly_amount,
                                        'worker_goodwork_weekly_amount' => $worker->worker_goodwork_weekly_amount,
                                        'worker_total_employer_amount' => $worker->worker_total_employer_amount,
                                        'worker_total_goodwork_amount' => $worker->worker_total_goodwork_amount,
                                        'worker_total_contract_amount' => $worker->worker_total_contract_amount,
                                        'worker_feels_like_hour' => $worker->worker_feels_like_hour,
                                    ]);
                
                $this->check = "1";
                $this->message = "Worker Feels Like/Hour details listed successfully";
                $this->return_data = $worker;
            }else{
                $this->check = "1";
                $this->message = "Worker not found";
                $this->return_data = [];
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function NurseProfileInfoBymobile(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'mobile' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('mobile', $request->mobile);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $this->check = "1";
                $this->message = "User profile details listed successfully";
                $this->return_data = $this->profileCompletionFlagStatus($type = "", $user);
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function updateRoleInterest(Request $request)
    {
        $messages = [
            "additional_pictures.max" => "Additional Photos can't be more than 4.",
            "additional_files.max" => "Additional Files can't be more than 4.",
            "additional_pictures.*.mimes" => "Additional Photos should be image or png jpg",
            "additional_files.*.mimes" => "Additional Files should be doc or pdf",
            "additional_pictures.*.max" => "Additional Photos should not be more than 5mb",
            "additional_files.*.max" => "Additional Files should not be more than 1mb",
            "leadership_roles.required_if" => "Please select leadership role",
            "nu_video.url" => "YouTube and Vimeo should be a valid link",
            "nu_video.max" => "YouTube and Vimeo should be a valid link"
        ];

        $validator = \Validator::make(
            $request->all(),
            [
                'user_id' => 'required',
                'additional_pictures' => 'max:4',
                'additional_pictures.*' => 'nullable|max:5120|image|mimes:jpeg,png,jpg',
                'serving_preceptor' => 'boolean',
                'serving_interim_nurse_leader' => 'boolean',
                'leadership_roles' => 'required_if:serving_interim_nurse_leader,1',
                'clinical_educator' => 'boolean',
                'is_daisy_award_winner' => 'boolean',
                'employee_of_the_mth_qtr_yr' => 'boolean',
                'other_nursing_awards' => 'boolean',
                'is_professional_practice_council' => 'boolean',
                'is_research_publications' => 'boolean',
                'additional_files' => 'max:4',
                'additional_files.*' => 'nullable|max:1024|mimes:pdf,doc,docx',
                'nu_video' => 'nullable|url|max:255',
                'api_key' => 'required',
            ],
            $messages
        );

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            $response = [];
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $user->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();

                    if (preg_match('/https?:\/\/(?:[\w]+\.)*youtube\.com\/watch\?v=[^&]+/', $request->nu_video, $vresult)) {
                        $youTubeID = $this->parse_youtube($request->nu_video);
                        $embedURL = 'https://www.youtube.com/embed/' . $youTubeID[1];
                        $nurse_array["nu_video_embed_url"] = $embedURL;
                    } elseif (preg_match('/https?:\/\/(?:[\w]+\.)*vimeo\.com(?:[\/\w]*\/videos?)?\/([0-9]+)[^\s]*+/', $request->nu_video, $vresult)) {
                        $vimeoID = $this->parse_vimeo($request->nu_video);
                        $embedURL = 'https://player.vimeo.com/video/' . $vimeoID[1];
                        $nurse_array["nu_video_embed_url"] = $embedURL;
                    }
                    if (isset($request->serving_preceptor) && $request->serving_preceptor != "") $nurse_array['serving_preceptor'] = $request->serving_preceptor;
                    else $nurse_array['serving_preceptor'] = "0";
                    if (isset($request->serving_interim_nurse_leader) && $request->serving_interim_nurse_leader != "") $nurse_array['serving_interim_nurse_leader'] = $request->serving_interim_nurse_leader;
                    else $nurse_array['serving_interim_nurse_leader'] = "0";
                    if (isset($request->clinical_educator) && $request->clinical_educator != "") $nurse_array['clinical_educator'] = $request->clinical_educator;
                    else $nurse_array['clinical_educator'] = "0";
                    if (isset($request->is_daisy_award_winner) && $request->is_daisy_award_winner != "") $nurse_array['is_daisy_award_winner'] = $request->is_daisy_award_winner;
                    else $nurse_array['is_daisy_award_winner'] = "0";
                    if (isset($request->employee_of_the_mth_qtr_yr) && $request->employee_of_the_mth_qtr_yr != "") $nurse_array['employee_of_the_mth_qtr_yr'] = $request->employee_of_the_mth_qtr_yr;
                    else $nurse_array['employee_of_the_mth_qtr_yr'] = "0";
                    if (isset($request->other_nursing_awards) && $request->other_nursing_awards != "") $nurse_array['other_nursing_awards'] = $request->other_nursing_awards;
                    else $nurse_array['other_nursing_awards'] = "0";
                    if (isset($request->is_professional_practice_council) && $request->is_professional_practice_council != "") $nurse_array['is_professional_practice_council'] = $request->is_professional_practice_council;
                    else $nurse_array['is_professional_practice_council'] = "0";
                    if (isset($request->is_research_publications) && $request->is_research_publications != "") $nurse_array['is_research_publications'] = $request->is_research_publications;
                    else $nurse_array['is_research_publications'] = "0";
                    if (isset($request->leadership_roles) && $request->leadership_roles != "") $nurse_array['leadership_roles'] = $request->leadership_roles;
                    if (isset($request->languages) && $request->languages != "") $nurse_array['languages'] = $request->languages;
                    if (isset($request->summary) && $request->summary != "") $nurse_array['summary'] = $request->summary;
                    /* if (isset($request->languages) && $request->languages) {
                        $explode = explode(",", $request->languages);
                        $nurse_array['languages'] = (is_array($explode) && !empty($explode)) ? implode(",", $explode) : "";
                    } */
                    $nurse_update = NURSE::where(['id' => $nurse->id])->update($nurse_array);

                    $additional_pictures_status = false;
                    if ($additional_photos = $request->file('additional_pictures')) {
                        foreach ($additional_photos as $additional_photo) {
                            $additional_photo_name_full = $additional_photo->getClientOriginalName();
                            $additional_photo_name = pathinfo($additional_photo_name_full, PATHINFO_FILENAME);
                            $additional_photo_ext = $additional_photo->getClientOriginalExtension();
                            $additional_photo_finalname = $additional_photo_name . '_' . time() . '.' . $additional_photo_ext;
                            //Upload Image
                            $additional_photo->storeAs('assets/nurses/additional_photos/' . $nurse->id, $additional_photo_finalname);
                            $additional_pictures_insert = NurseAsset::create([
                                'nurse_id' => $nurse->id,
                                'name' => $additional_photo_finalname,
                                'filter' => 'additional_photos'
                            ]);

                            if ($additional_pictures_insert) $additional_pictures_status = true;
                        }
                    }

                    $additional_files_status = false;
                    if ($additional_files = $request->file('additional_files')) {
                        foreach ($additional_files as $additional_file) {
                            $additional_file_name_full = $additional_file->getClientOriginalName();
                            $additional_file_name = pathinfo($additional_file_name_full, PATHINFO_FILENAME);
                            $additional_file_ext = $additional_file->getClientOriginalExtension();
                            $additional_file_finalname = $additional_file_name . '_' . time() . '.' . $additional_file_ext;
                            //Upload Image
                            $additional_file->storeAs('assets/nurses/additional_files/' . $nurse->id, $additional_file_finalname);
                            $additional_files_insert = NurseAsset::create([
                                'nurse_id' => $nurse->id,
                                'name' => $additional_file_finalname,
                                'filter' => 'additional_files'
                            ]);

                            if ($additional_files_insert) $additional_files_status = true;
                        }
                    }

                    if ($nurse_update == true || ($additional_pictures_status == true || $additional_files_status == true)) {
                        $this->check = "1";
                        $this->message = "Role Interest updated successfully";
                        $this->return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    } else {
                        $this->message = "Failed to update role interest, Please try again later";
                    }
                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }
            }else{
                $this->check = "1";
                $this->message = "User not exist";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function destroyRoleInterestDocument(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            "asset_id" => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse_info = NURSE::where('user_id', $request->user_id)->get();
            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();
                $nurse_assets = NurseAsset::where(['id' => $request->asset_id])->get();
                if ($nurse_assets->count() > 0) {
                    $nurseAsset = $nurse_assets->first();
                    $t = Storage::exists('assets/nurses/' . $nurseAsset->filter . '/' . $nurse->id . '/' . $nurseAsset->name);
                    if ($t && $nurseAsset->name) {
                        Storage::delete('assets/nurses/' . $nurseAsset->filter . '/' . $nurse->id . '/' . $nurseAsset->name);
                    }
                    $delete = $nurseAsset->delete();
                    if ($delete) {
                        $this->check = "1";
                        $this->message = "Document removed successfully";
                    } else {
                        $this->message = "Failed to remove document, Please try again later";
                    }
                } else {
                    $this->message = "Document already removed/not found";
                }
            } else {
                $this->message = "Nurse not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function profilePictureUpload(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'profile_image' => "required",
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            $response = [];
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $user->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();
                    if ($request->hasFile('profile_image') && $request->file('profile_image') != null) {
                        $profile_image_name_full = $request->file('profile_image')->getClientOriginalName();
                        $profile_image_name = pathinfo($profile_image_name_full, PATHINFO_FILENAME);
                        $profile_image_ext = $request->file('profile_image')->getClientOriginalExtension();
                        $profile_image = $profile_image_name.'_'.time().'.'.$profile_image_ext;

                        // $request->file('profile_image')->storeAs('assets/nurses/profile', $nurse->id);
                        
                        $destinationPath = 'images/nurses/profile';
                        $request->file('profile_image')->move(public_path($destinationPath), $profile_image);

                        $update_array['image'] = $profile_image;
                        $update = USER::where(['id' => $user->id])->update($update_array);
                        if ($update == true) {
                            $this->check = "1";
                            $this->message = "Profile picture updated successfully";
                        } else {
                            $this->message = "Failed to update profile picture, please try again later";
                        }
                    } else {
                        $this->message = "Profile image not found";
                    }
                } else {
                    $this->message = "NUrse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function termsAndConditions()
    {
        $this->message = "Terms and Conditions";
        $this->check = "1";
        $this->return_data = '<p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site.</p><p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p> <p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p>';
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function privacyPolicy(Request $request)
    {

        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $aboutapp =  \DB::table('setting')->where('slug', '=', 'privacy')->get();
            $this->return_data = $aboutapp[0]->content;
            $this->message = "Privacy Policy";
            $this->check = "1";
            $this->url = url('/privacy-policy');
            
            // $this->return_data = '<p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site.</p><p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p> <p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p>';
            return response()->json(["api_status" => $this->check, "About-web" => $this->url, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function aboutAPP(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $aboutapp =  \DB::table('setting')->where('slug', '=', 'about_app')->get();
            $this->return_data = $aboutapp[0]->content;
            $this->message = "About App";
            $this->check = "1";
            $this->url = url('/aboutus');
            // $this->return_data = '<p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site.</p><p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p> <p>Provides an online resource for health care professionals. These terms may be changed from time to time and without further notice. Your continued use of the Site after any such changes constitutes your acceptance of the new terms. If you do not agree to abide by these or any future terms, please do not use the Site or download materials from it. GE Healthcare, a division of General Electric Company ("GE"), may terminate, change, suspend or discontinue any aspect of the Site, including the availability of any features, at any time. GE may remove, modify or otherwise change any content, including that of third parties, on or from this Site. </p>';
            return response()->json(["api_status" => $this->check, "about_web" => $this->url, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function changePassword(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'password' => 'required|string|min:6|max:255|regex:/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[\[\]\{\}\';:\.,#?!@$%^&*-]).{6,}$/'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);

            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $user->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();
                    $update_array['password'] = Hash::make($request->password);
                    $update = USER::where(['id' => $user->id])->update($update_array);
                    if ($update == true) {
                        $this->check = "1";
                        $this->message = "Password changed successfully";
                    } else {
                        $this->message = "Failed to change password, please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityRatings(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'facility_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $user->id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();
                    $insert_array['nurse_id'] = $nurse->id;
                    if (isset($request->facility_id) && $request->facility_id != "")
                        $insert_array['facility_id'] = $request->facility_id;
                    if (isset($request->overall) && $request->overall != "")
                        $update_array['overall'] = $insert_array['overall'] = $request->overall;
                    if (isset($request->on_board) && $request->on_board != "")
                        $update_array['on_board'] = $insert_array['on_board'] = $request->on_board;
                    if (isset($request->nurse_team_work) && $request->nurse_team_work != "")
                        $update_array['nurse_team_work'] = $insert_array['nurse_team_work'] = $request->nurse_team_work;
                    if (isset($request->leadership_support) && $request->leadership_support != "")
                        $update_array['leadership_support'] = $insert_array['leadership_support'] = $request->leadership_support;
                    if (isset($request->tools_todo_my_job) && $request->tools_todo_my_job != "")
                        $update_array['tools_todo_my_job'] = $insert_array['tools_todo_my_job'] = $request->tools_todo_my_job;
                    if (isset($request->experience) && $request->experience != "")
                        $update_array['experience'] = $insert_array['experience'] = $request->experience;

                    $check_exists = FacilityRating::where(['nurse_id' => $nurse->id, 'facility_id' => $request->facility_id])->get();
                    if ($check_exists->count() > 0) {
                        $rating_row = $check_exists->first();
                        $data = FacilityRating::where(['id' => $rating_row->id])->update($update_array);
                    } else {
                        $data = FacilityRating::create($insert_array);
                    }

                    if (isset($data) && $data == true) {
                        $this->check = "1";
                        $this->message = "Your rating is submitted successfully";
                    } else {
                        $this->message = "Failed to update ratings, Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function newPhoneNumber(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'phone_number' => 'required|regex:/^[0-9 \+]+$/|min:4|max:20',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $otp = substr(str_shuffle("0123456789"), 0, 4);
                $rand_enc = substr(str_shuffle("0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), 0, 6);
                $update_otp = USER::where(['id' => $user->id])->update(['otp' => $otp, 'new_mobile' => $request->phone_number]);
                if ($update_otp) {
                    $this->check = "1";
                    $this->message = "OTP send successfully to this number";
                    $this->return_data = ['otp' => $otp];
                } else {
                    $this->message = "Failed to send otp, Please try again later";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function sendOtp(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            // 'phone_number' => 'required|regex:/^[0-9 \+]+$/|min:4|max:20',
            'id' => 'required',
            'role' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            $user_info = USER::where('email', $request->id)->orWhere('mobile',$request->id);
            // $user_info = USER::where('email', $request->id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                if($user->role == strtoupper($request->role)){
                    $otp = substr(str_shuffle("0123456789"), 0, 4);
                    $rand_enc = substr(str_shuffle("0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), 0, 6);
                    $update_otp = USER::where(['id' => $user->id])->update(['otp' => $otp]);
                    if ($update_otp) {
                        $message = "Hi <b>".$user->first_name.' '.$user->last_name."</b>,\r\n<br><br>".
                                    "OTP: <b>" . $otp."</b> is your one time password for sign in\r\n<br><br>".
                                    "Thank you,\r\n<br>".
                                    "Team Goodwork\r\n<br><br>".
                                    "<b>Please do not reply to this email. </b>\r\n<br><br>".
                                    "<b>© 2023 GOODWORK. ALL RIGHTS RESERVED.</b><br>";

                        $from_user = "=?UTF-8?B?" . base64_encode('Goodwork') . "?=";
                        $subject = "=?UTF-8?B?" . base64_encode('One Time Password for login') . "?=";
                        $user_mail    =  env("MAIL_USERNAME");
                        
                        // $headers = "From: $from_user <team@goodwork.com>\r\n" .
                        $headers = "From: $from_user <$user_mail>\r\n" .
                            "MIME-Version: 1.0" . "\r\n" .
                            "Content-type: text/html; charset=UTF-8" . "\r\n";
    
                        mail($user->email, $subject, $message, $headers);
    
                        $this->check = "1";
                        if($user->mobile == $request->id){
                            $this->message = "OTP send successfully to your number";
                        }else{
                            $this->message = "OTP send successfully to your email";
                        }
                        $this->return_data = ['user_id' => $user->id,'otp' => $otp];
                    } else {
                        $this->message = "Failed to send otp, Please try again later";
                    }
                }else{
                    $this->message = "Role does not match with your user id! Please check";
                }
                
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    

    }

    public function mobileOtp(Request $request)  
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'id' => 'required',
            'role' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('email', $request->id)->orWhere('mobile',$request->id);
            
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                if($user->role == strtoupper($request->role)){
                    $otp = substr(str_shuffle("0123456789"), 0, 4);
                    $rand_enc = substr(str_shuffle("0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), 0, 6);
                    $update_otp = USER::where(['id' => $user->id])->update(['otp' => $otp]);
                    if ($update_otp) {
                        $message = "OTP: " . $otp;
                        $sid    =  env("TWILIO_SID");
                        $token  =  env("TWILIO_AUTH_TOKEN");
                        $twilio = new Client($sid, $token);
                        $message = $twilio->messages
                        ->create($request->id, // to
                            array(
                            "from" => env("TWILIO_NUMBER"),
                            "body" => 'Your Account verification code is: '.$otp
                            )
                        );
                
                        $this->check = "1";
                        if($user->mobile == $request->id){
                            $this->message = "OTP send successfully to your number";
                        }else{
                            $this->message = "OTP send successfully to your email";
                        }
                        $this->return_data = ['user_id' => $user->id,'otp' => $otp];
                    } else {
                        $this->message = "Failed to send otp, Please try again later";
                    }
                }else{
                    $this->message = "Role does not match with your user id! Please check";
                }
                
            } else {
                $this->message = "User not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function confirmOTP(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'user_id' => 'required',
            'otp' => 'required|min:4|max:4',
            // 'fcm_token' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                if(isset($user->otp) && !empty($user->otp)){
                    
                    if ($user->otp == $request->otp) {
                        $update_otp = USER::where(['id' => $user->id])->update(['otp' => NULL, 'fcm_token' => $request->fcm_token, 'email_verified_at' => date('Y-m-d H:i:s')]);
                        if ($update_otp) {
    
                            if (isset($user->role) && $user->role == "NURSE") {
                                $return_data = $this->profileCompletionFlagStatus($type = "login", $user);
                                // $return_data = $this->profileCompletionFlagStatus($type = "login", $user);
                            } else {
                                $return_data['facility_details'] = $this->facilityProfileCompletionFlagStatus($type = "login", $user);
                                $return_data['user_details'] = $user;
                            }
                            
                            $this->check = "1";
                            $this->message = "Logged in successfully";
                        } else {
                            $this->check = "1";
                            $this->message = "User not found";
                        }
                    } else {
                        $this->check = "0";
                        $this->message = "Invalid OTP, Please enter the correct otp";
                        $return_data['user_details'] = $request->otp;
                    }
                }else{
                    $this->check = "0";
                    $this->message = "OTP not found";
                }
            } else {
                $this->check = "1";
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $return_data], 200);
    }

    public function userRecruiter(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'user_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse_info = NURSE::where('user_id', $request->user_id);
            $user_info = USER::where('id', $request->user_id);
            if($nurse_info->count() > 0){
                $nurse = $nurse_info->first();
                $nurse_id = $nurse['id'];
            }
            if ($user_info->count() > 0) {
                $whereCond = [
                    'users.id' => $request->user_id,
                ];
                // $return_data = [];
                $facilitys = [];
                $agency_name = '';
                $data = DB::table('users')
                                    ->leftJoin('facilities', 'facilities.id', '=', 'users.facility_id')
                                    ->where($whereCond)
                                    ->select('facilities.name as Agency_name', 'users.*')
                                    ->first();
                $user = User::where('users.id', $request->user_id)->first();
                $facility = isset($user['facility_id'])?json_decode($user['facility_id']):'';
                foreach($facility as $fac){
                    $facility_list = Facility::where('id', $fac)->select('name')->first();
                    $facilitys[] = $facility_list['name'];
                    
                } 
                    if(isset($nurse_id)){
                        $data['nurse_id']  = $nurse_id;
                    }
                    $return_data['about_me'] = (isset($data->about_me) && $data->about_me != "") ? strip_tags($data->about_me) : "";
                    $return_data['image'] = (isset($data->image) && $data->image != "") ? url("public/images/nurses/profile/" . $data->image) : "";
                    $return_data['qualities'] = (isset($data->qualities) && $data->qualities != "") ? json_decode($data->qualities) : [];
                    // $return_data['Agency_name'] = (isset($data->Agency_name) && $data->Agency_name != "") ? $data->Agency_name : "";
                    $return_data['Agency_name'] = (isset($facilitys) && $facilitys != "") ? $facilitys : "";
                    $return_data['first_name'] = (isset($data->first_name) && $data->first_name != "") ? $data->first_name : "";
                    $return_data['last_name'] = (isset($data->last_name) && $data->last_name != "") ? $data->last_name : "";
                    $return_data['user_name'] = (isset($data->user_name) && $data->user_name != "") ? $data->user_name : "";
                    $return_data['fcm_token'] = (isset($data->fcm_token) && $data->fcm_token != "") ? $data->fcm_token : "";
                    $return_data['email_verified_at'] = (isset($data->email_verified_at) && $data->email_verified_at != "") ? $data->email_verified_at : "";
                    $return_data['date_of_birth'] = (isset($data->date_of_birth) && $data->date_of_birth != "") ? $data->date_of_birth : "";
                    $return_data['driving_license'] = (isset($data->driving_license) && $data->driving_license != "") ? $data->driving_license : "";
                    $return_data['security_number'] = (isset($data->security_number) && $data->security_number != "") ? $data->security_number : "";
                    $return_data['mobile'] = (isset($data->mobile) && $data->mobile != "") ? $data->mobile : "";
                    $return_data['last_login_at'] = (isset($data->last_login_at) && $data->last_login_at != "") ? $data->last_login_at : "";
                    $return_data['last_login_ip'] = (isset($data->last_login_ip) && $data->last_login_ip != "") ? $data->last_login_ip : "";
                    $return_data['facility_id'] = (isset($data->facility_id) && $data->facility_id != "") ? json_decode($data->facility_id) : "";
                    
                $this->message = "Recruiter listed succcessfully";
                $this->check = "1";
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $return_data], 200);    
    }

    public function editUserRecruiter(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'user_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $user->about_me = isset($request->about_me)?$request->about_me:$user->about_me;
                $user->qualities = isset($request->qualities)?json_encode(explode(',', $request->qualities)):$user->qualities;
                // $user->facility_id = isset($request->facility_id)?json_encode(explode(',', $request->facility_id)):$user->facility_id;
                $update = User::where('id', $request->user_id)->update(['qualities' => $user->qualities, 'about_me' => $user->about_me]);
                // $update = User::where('id', $request->user_id)->update($user);
                if(isset($update)){
                    $this->message = "Recruiter Details update succcessfully";
                    $this->check = "1";
                    $return_data = '1';
                }else{
                    $this->message = "Recruiter Details not updated";
                    $this->check = "0";
                    $return_data = '0';
                }
                
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $return_data], 200);    
    }

    public function recruiterProfilePictureUpload(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'profile_image' => "required",
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            $response = [];
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                if ($request->hasFile('profile_image') && $request->file('profile_image') != null) {
                    $profile_image_name_full = $request->file('profile_image')->getClientOriginalName();
                    $profile_image_name = pathinfo($profile_image_name_full, PATHINFO_FILENAME);
                    $profile_image_ext = $request->file('profile_image')->getClientOriginalExtension();
                    $profile_image = $profile_image_name.'_'.time().'.'.$profile_image_ext;
                    
                    $destinationPath = 'images/nurses/profile';
                    $request->file('profile_image')->move(public_path($destinationPath), $profile_image);

                    $update_array['image'] = $profile_image;
                    $update = USER::where(['id' => $user->id])->update($update_array);
                    if ($update == true) {
                        $this->check = "1";
                        $this->return_data = $user;
                        $this->message = "Profile picture updated successfully";
                    } else {
                        $this->message = "Failed to update profile picture, please try again later";
                    }
                } else {
                    $this->message = "Profile image not found";
                }
                
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getCountries()
    {

        $controller = new controller();
        $countries = $controller->getCountries()->pluck('name', 'id');
        $data = [];
        foreach ($countries as $key => $value) {
            $data[] = ['country_id' => strval($key), "name" => $value];
        }
        // moved usa and canada to top of the row
        $this->moveElement($data, 235, 0);
        $this->moveElement($data, 40, 1);
        // moved usa and canada to top of the row
        $this->check = "1";
        $this->message = "Countries listed successfully";
        $this->return_data = $data;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    function moveElement(&$array, $a, $b)
    {
        $out = array_splice($array, $a, 1);
        array_splice($array, $b, 0, $out);
    }

    public function getStates(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'country_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $get_states = States::where(['country_id' => $request->country_id])->get();
            if ($get_states->count() > 0) {
                $states = $get_states;
                $data = [];
                foreach ($states as $key => $value) {
                    $data[] = ['state_id' => strval($value->id), "name" => $value->name, 'iso_name' => $value->iso2];
                }
                $this->check = "1";
                $this->message = "States listed successfully";
                $this->return_data = $data;
            } else {
                $this->return_data = [];
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getCities(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'state_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $get_cities = Cities::where(['state_id' => $request->state_id])->get();
            if ($get_cities->count() > 0) {
                $cities = $get_cities;
                $data = [];
                foreach ($cities as $key => $value) {
                    $data[] = ['city_id' => strval($value->id), "name" => $value->name];
                }
                $this->check = "1";
                $this->message = "Cities listed successfully";
                $this->return_data = $data;
            } else {
                $this->return_data = [];
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityProfileCompletionFlagStatus($type = "", $user)
    {
        $facility = $user->facilities()->get()->first();

        $states = $this->getStateOptions();
        $facilityTypes = $this->getFacilityType()->pluck('title', 'id');
        
        $eMedicalRecords = $this->getEMedicalRecords()->pluck('title', 'id');
        $eMedicalRecords['0'] = 'Other';

        $bCheckProviders = $this->getBCheckProvider()->pluck('title', 'id');
        $bCheckProviders['0'] = 'Other';

        $nCredentialingSoftwares = $this->getNCredentialingSoftware()->pluck('title', 'id');
        $nCredentialingSoftwares['0'] = 'Other';

        $nSchedulingSystems = $this->getNSchedulingSystem()->pluck('title', 'id');
        $nSchedulingSystems['0'] = 'Other';

        $timeAttendanceSystems = $this->getTimeAttendanceSystem()->pluck('title', 'id');
        $timeAttendanceSystems['0'] = 'Other';

        $traumaDesignations = $this->getTraumaDesignation()->pluck('title', 'id');
        $traumaDesignations['0'] = 'N/A';

        // $facility_info["facility_id"] = (isset($facility->id) && $facility->id != "") ? $facility->id : "";
        // $facility_info["created_by"] = (isset($facility->created_by) && $facility->created_by != "") ? $facility->created_by : "";
        $facility_info["role"] = "FACILITYADMIN";
        $facility_info["user_id"] = (isset($facility->pivot_user_id) && $facility->pivot_user_id != "") ? $facility->pivot_user_id : "";
        $facility_info["facility_id"] = (isset($facility->pivot_facility_id) && $facility->pivot_facility_id != "") ? $facility->pivot_facility_id : "";
        // $facility_info["user_id"] = (isset($facility->pivot->user_id) && $facility->pivot->user_id != "") ? $facility->pivot->user_id : "";
        // $facility_info["facility_id"] = (isset($facility->pivot->facility_id) && $facility->pivot->facility_id != "") ? $facility->pivot->facility_id : "";
        $facility_info["facility_name"] = (isset($facility->name) && $facility->name != "") ? $facility->name : "";
        $facility_info["facility_address"] = (isset($facility->address) && $facility->address != "") ? $facility->address : "";
        $facility_info["facility_city"] = (isset($facility->city) && $facility->city != "") ? $facility->city : "";
        $facility_info["facility_state"] = (isset($facility->state) && $facility->state != "") ? $facility->state : "";
        $facility_info["facility_postcode"] = (isset($facility->postcode) && $facility->postcode != "") ? $facility->postcode : "";

        $facility_info["facility_logo"] = (isset($facility->facility_logo) && $facility->facility_logo != "") ? url('public/images/facilities/' . $facility->facility_logo) : "";
        // $facility_logo = "";
        // if ($facility->facility_logo) {
        //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/facility_logo/' . $facility->facility_logo);
        //     if ($t) {
        //         $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/facilities/facility_logo/' . $facility->facility_logo);
        //     }
        // }
        // $facility_info["facility_logo_base"] = ($facility_logo != "") ? 'data:image/jpeg;base64,' . base64_encode($facility_logo) : "";
        
        $facility_info["facility_email"] = (isset($facility->facility_email) && $facility->facility_email != "") ? $facility->facility_email : "";
        $facility_info["facility_phone"] = (isset($facility->facility_phone) && $facility->facility_phone != "") ? $facility->facility_phone : "";
        $facility_info["specialty_need"] = (isset($facility->specialty_need) && $facility->specialty_need != "") ? $facility->specialty_need : "";
        
        $facility_info["facility_type"] = (isset($facility->type) && $facility->type != "") ? strval($facility->type) : "";
        if(isset($facility) && !empty($facility)){
            $facility_info["facility_type_definition"] = (isset($facilityTypes[$facility->type]) && $facilityTypes[$facility->type] != "") ? $facilityTypes[$facility->type] : "";
        }else{
            $facility_info["facility_type_definition"] = "";
        }
        
        // $facility_info["active"] = (isset($facility->active) && $facility->active != "") ? $facility->active : "";
        // $facility_info["deleted_at"] = (isset($facility->deleted_at) && $facility->deleted_at != "") ? $facility->deleted_at : "";
        // $facility_info["created_at"] = (isset($facility->created_at) && $facility->created_at != "") ? $facility->created_at : "";
        // $facility_info["updated_at"] = (isset($facility->updated_at) && $facility->updated_at != "") ? $facility->updated_at : "";

        $facility_info["slug"] = (isset($facility->slug) && $facility->slug != "") ? $facility->slug : "";
        $facility_info["cno_message"] = (isset($facility->cno_message) && $facility->cno_message != "") ? $facility->cno_message : "";
        $facility_info["cno_image"] = (isset($facility->cno_image) && $facility->cno_image != "") ? url('public/images/facilities/cno_image/' . $facility->cno_image) : "";

        // $cno_image = "";
        // if ($facility->cno_image) {
        //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/cno_image/' . $facility->cno_image);
        //     if ($t) {
        //         $cno_image = \Illuminate\Support\Facades\Storage::get('assets/facilities/cno_image/' . $facility->cno_image);
        //     }
        // }
        // $facility_info["cno_image_base"] = ($cno_image != "") ? 'data:image/jpeg;base64,' . base64_encode($cno_image) : "";

        $facility_info["gallary_images"] = (isset($facility->gallary_images) && $facility->gallary_images != "") ? $facility->gallary_images : "";

        $facility_info["video"] = (isset($facility->video) && $facility->video != "") ? $facility->video : "";

        $facility_info["about_facility"] = (isset($facility->about_facility) && $facility->about_facility != "") ? $facility->about_facility : "";
        $facility_info["facility_website"] = (isset($facility->facility_website) && $facility->facility_website != "") ? $facility->facility_website : "";
        $facility_info["video_embed_url"] = (isset($facility->video_embed_url) && $facility->video_embed_url != "") ? $facility->video_embed_url : "";
        // $facility_info["f_lat"] = (isset($facility->f_lat) && $facility->f_lat != "") ? $facility->f_lat : "";
        // $facility_info["f_lang"] = (isset($facility->f_lang) && $facility->f_lang != "") ? $facility->f_lang : "";

        /* facility_emr */
        $facility_info["facility_emr"] = (isset($facility->f_emr) && $facility->f_emr != "") ? strval($facility->f_emr) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["facility_emr_definition"] = (isset($eMedicalRecords[$facility->f_emr]) && $eMedicalRecords[$facility->f_emr] != "") ? $eMedicalRecords[$facility->f_emr] : "";
        }else{
            $facility_info["facility_emr_definition"] = "";
        }
        $facility_info["facility_emr_other"] = (($facility_info["facility_emr"] == "other" || $facility_info["facility_emr"] == "0") && ((isset($facility->f_emr_other) && $facility->f_emr_other != ""))) ? $facility->f_emr_other : "";
        /* facility_emr */

        /* facility_bcheck_provider */
        $facility_info["facility_bcheck_provider"] = (isset($facility->f_bcheck_provider) && $facility->f_bcheck_provider != "") ? strval($facility->f_bcheck_provider) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["facility_bcheck_provider_definition"] = (isset($bCheckProviders[$facility->f_bcheck_provider]) && $bCheckProviders[$facility->f_bcheck_provider] != "") ? $bCheckProviders[$facility->f_bcheck_provider] : "";
        }else{
            $facility_info["facility_bcheck_provider_definition"] = "";
        }
        $facility_info["facility_bcheck_provider_other"] = (($facility_info["facility_bcheck_provider"] == "other" || $facility_info["facility_bcheck_provider"] == "0") && ((isset($facility->f_bcheck_provider_other) && $facility->f_bcheck_provider_other != ""))) ? $facility->f_bcheck_provider_other : "";
        /* facility_bcheck_provider */

        /* nurse_cred_soft */
        $facility_info["nurse_cred_soft"] = (isset($facility->nurse_cred_soft) && $facility->nurse_cred_soft != "") ? strval($facility->nurse_cred_soft) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["nurse_cred_soft_definition"] = (isset($nCredentialingSoftwares[$facility->nurse_cred_soft]) && $nCredentialingSoftwares[$facility->nurse_cred_soft] != "") ? $nCredentialingSoftwares[$facility->nurse_cred_soft] : "";
        }else{
            $facility_info["nurse_cred_soft_definition"] = "";
        }
        $facility_info["nurse_cred_soft_other"] = (($facility_info["nurse_cred_soft"] == "other" || $facility_info["nurse_cred_soft"] == "0") && ((isset($facility->nurse_cred_soft_other) && $facility->nurse_cred_soft_other != ""))) ? $facility->nurse_cred_soft_other : "";
        /* nurse_cred_soft */

        /* nurse_scheduling_sys */
        $facility_info["nurse_scheduling_sys"] = (isset($facility->nurse_scheduling_sys) && $facility->nurse_scheduling_sys != "") ? strval($facility->nurse_scheduling_sys) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["nurse_scheduling_sys_definition"] = (isset($nSchedulingSystems[$facility->nurse_scheduling_sys]) && $nSchedulingSystems[$facility->nurse_scheduling_sys] != "") ? $nSchedulingSystems[$facility->nurse_scheduling_sys] : "";
        }else{
            $facility_info["nurse_scheduling_sys_definition"] = "";
        }
        $facility_info["nurse_scheduling_sys_other"] = (($facility_info["nurse_scheduling_sys"] == "other" || $facility_info["nurse_scheduling_sys"] == "0") && ((isset($facility->nurse_scheduling_sys_other) && $facility->nurse_scheduling_sys_other != ""))) ? $facility->nurse_scheduling_sys_other : "";
        /* nurse_scheduling_sys */

        /* time_attend_sys */
        $facility_info["time_attend_sys"] = (isset($facility->time_attend_sys) && $facility->time_attend_sys != "") ? strval($facility->time_attend_sys) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["time_attend_sys_definition"] = (isset($timeAttendanceSystems[$facility->time_attend_sys]) &&  $timeAttendanceSystems[$facility->time_attend_sys] != "") ?  $timeAttendanceSystems[$facility->time_attend_sys] : "";
        }else{
            $facility_info["time_attend_sys_definition"] = "";
        }
        $facility_info["time_attend_sys_other"] = (($facility_info["time_attend_sys"] == "other" || $facility_info["time_attend_sys"] == "0") && ((isset($facility->time_attend_sys_other) && $facility->time_attend_sys_other != ""))) ? $facility->time_attend_sys_other : "";
        /* time_attend_sys */

        $facility_info["licensed_beds"] = (isset($facility->licensed_beds) && $facility->licensed_beds != "") ? $facility->licensed_beds : "";

        /* trauma_designation */
        $facility_info["trauma_designation"] = (isset($facility->trauma_designation) && $facility->trauma_designation != "") ? strval($facility->trauma_designation) : "";
        
        if(isset($facility) && !empty($facility)){
            $facility_info["trauma_designation_definition"] = (isset($traumaDesignations[$facility->trauma_designation]) && $traumaDesignations[$facility->trauma_designation] != "") ? $traumaDesignations[$facility->trauma_designation] : "";
        }else{
            $facility_info["trauma_designation_definition"] = "";
        }
        /* trauma_designation */

        /* social logins */
        $facility_social = [];
        $facility_social["facebook"] = (isset($facility->facebook) && $facility->facebook != "") ? $facility->facebook : "";
        $facility_social["twitter"] = (isset($facility->twitter) && $facility->twitter != "") ? $facility->twitter : "";
        $facility_social["linkedin"] = (isset($facility->linkedin) && $facility->linkedin != "") ? $facility->linkedin : "";
        $facility_social["instagram"] = (isset($facility->instagram) && $facility->instagram != "") ? $facility->instagram : "";
        $facility_social["pinterest"] = (isset($facility->pinterest) && $facility->pinterest != "") ? $facility->pinterest : "";
        $facility_social["tiktok"] = (isset($facility->tiktok) && $facility->tiktok != "") ? $facility->tiktok : "";
        $facility_social["sanpchat"] = (isset($facility->sanpchat) && $facility->sanpchat != "") ? $facility->sanpchat : "";
        $facility_social["youtube"] = (isset($facility->youtube) && $facility->youtube != "") ? $facility->youtube : "";
        $facility_info['facility_social'] = $facility_social;
        /* social logins */

        $facility_info['facility_profile_flag'] = "0";
        if (
            $facility_info["facility_name"] != "" &&
            $facility_info["facility_type"] != "" &&
            $facility_info["facility_phone"] != "" &&
            $facility_info["facility_address"] != "" &&
            $facility_info["facility_city"] != "" &&
            $facility_info["facility_state"] != "" &&
            $facility_info["facility_postcode"] != "" &&
            $facility_info["facility_emr"] != "" &&
            $facility_info["facility_bcheck_provider"] != "" &&
            $facility_info["nurse_cred_soft"] != "" &&
            $facility_info["nurse_scheduling_sys"] != "" &&
            $facility_info["time_attend_sys"] != ""
        ) $facility_info['facility_profile_flag'] = "1";

        return $facility_info;
    }

    public function facilityDropdown($type)
    {
        if ($type == "getmedicalrecords") {
            $eMedicalRecords = $this->getEMedicalRecords()->pluck('title', 'id');
            $eMedicalRecords['0'] = 'Other';
            $data = [];
            foreach ($eMedicalRecords as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        } elseif ($type == "getbcheckprovider") {
            $bCheckProviders = $this->getBCheckProvider()->pluck('title', 'id');
            $bCheckProviders['0'] = 'Other';
            $data = [];
            foreach ($bCheckProviders as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        } elseif ($type == "getncredentialingsoftware") {
            $nCredentialingSoftwares = $this->getNCredentialingSoftware()->pluck('title', 'id');
            $nCredentialingSoftwares['0'] = 'Other';
            $data = [];
            foreach ($nCredentialingSoftwares as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        } elseif ($type == "getnschedulingsystem") {
            $nSchedulingSystems = $this->getNSchedulingSystem()->pluck('title', 'id');
            $nSchedulingSystems['0'] = 'Other';
            $data = [];
            foreach ($nSchedulingSystems as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        } elseif ($type == "gettraumadesignation") {
            $traumaDesignations = $this->getTraumaDesignation()->pluck('title', 'id');
            $traumaDesignations['0'] = 'N/A';
            $data = [];
            foreach ($traumaDesignations as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        } elseif ($type == 'gettimeattendancesystem') {
            $timeAttendanceSystems = $this->getTimeAttendanceSystem()->pluck('title', 'id');
            $timeAttendanceSystems['0'] = 'Other';
            $data = [];
            foreach ($timeAttendanceSystems as $key => $value) {
                $data[] = ["id" => $key, "name" => $value];
            }
            $this->return_data = $data;
        }

        $this->check = "1";
        $this->message = "Dropdown options listed successfully";
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityDetail(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'facility_id' => 'required',
            'name' => 'required|min:10|max:255',
            'type' => 'required',
            'facility_email' => 'nullable|email|max:255',
            'facility_phone' => 'required|min:10|max:15',
            'address' => 'required|min:5|max:190',
            'city' => 'required|min:3|max:20',
            'state' => 'required',
            'postcode' => 'required|min:4|max:6',
            'facility_logo' => 'nullable|max:1024|image|mimes:jpeg,png,jpg,gif',
            'cno_image' => 'nullable|max:1024|image|mimes:jpeg,png,jpg,gif',
            'video_link' => 'nullable|url|max:255',
            'facebook' => 'nullable|url|max:255',
            'twitter' => 'nullable|url|max:255',
            'linkedin' => 'nullable|url|max:255',
            'instagram' => 'nullable|url|max:255',
            'pinterest' => 'nullable|url|max:255',
            'tiktok' => 'nullable|url|max:255',
            'sanpchat' => 'max:255',
            'youtube' => 'nullable|url|max:255',
            'facility_website' => 'nullable|url|max:255',
            'f_emr' => 'required',
            'f_emr_other' => 'nullable|required_if:f_emr,0|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'f_bcheck_provider' => 'required',
            'f_bcheck_provider_other' => 'nullable|required_if:f_bcheck_provider,0|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'nurse_cred_soft' => 'required',
            'nurse_cred_soft_other' => 'nullable|required_if:nurse_cred_soft,0|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'nurse_scheduling_sys' => 'required',
            'nurse_scheduling_sys_other' => 'nullable|required_if:nurse_scheduling_sys,0|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'time_attend_sys' => 'required',
            'time_attend_sys_other' => 'nullable|required_if:time_attend_sys,0|regex:/^[a-zA-Z 0-9,\-\/]+$/|min:1|max:150',
            'licensed_beds' => 'nullable|regex:/^[0-9]+$/|min:1|max:20',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $update_array = [];

            $embedURL = "";
            if (preg_match('/https?:\/\/(?:[\w]+\.)*youtube\.com\/watch\?v=[^&]+/', $request->video_link)) {
                $youTubeID = $this->parse_youtube($request->video_link);
                $embedURL = 'https://www.youtube.com/embed/' . $youTubeID[1];
            } elseif (preg_match('/https?:\/\/(?:[\w]+\.)*vimeo\.com(?:[\/\w]*\/videos?)?\/([0-9]+)[^\s]*+/', $request->video_link)) {
                $vimeoID = $this->parse_vimeo($request->video_link);
                $embedURL = 'https://player.vimeo.com/video/' . $vimeoID[1];
            }
            if ($embedURL != "") $update_array['video_embed_url'] = $embedURL;

            /* required */
            $update_array['name'] = $request->name;
            $update_array['type'] = $request->type;
            $update_array['facility_phone'] = $request->facility_phone;
            $update_array['address'] = $request->address;
            $update_array['city'] = $request->city;
            $update_array['state'] = $request->state;
            $update_array['postcode'] = $request->postcode;
            $update_array['f_emr'] = $request->f_emr;
            $update_array['f_bcheck_provider'] = $request->f_bcheck_provider;
            $update_array['nurse_cred_soft'] = $request->nurse_cred_soft;
            $update_array['nurse_scheduling_sys'] = $request->nurse_scheduling_sys;
            $update_array['time_attend_sys'] = $request->time_attend_sys;
            /* required */

            $facility_id = "";
            if (isset($request->facility_id) && $request->facility_id != "") $facility_id = $request->facility_id;
            if (isset($request->facility_email) && $request->facility_email != "") $update_array["facility_email"] = $request->facility_email;
            if (isset($request->facebook) && $request->facebook != "") $update_array["facebook"] = $request->facebook;
            if (isset($request->twitter) && $request->twitter != "") $update_array["twitter"] = $request->twitter;
            if (isset($request->linkedin) && $request->linkedin != "") $update_array["linkedin"] = $request->linkedin;
            if (isset($request->instagram) && $request->instagram != "") $update_array["instagram"] = $request->instagram;
            if (isset($request->pinterest) && $request->pinterest != "") $update_array["pinterest"] = $request->pinterest;
            if (isset($request->tiktok) && $request->tiktok != "") $update_array["tiktok"] = $request->tiktok;
            if (isset($request->sanpchat) && $request->sanpchat != "") $update_array["sanpchat"] = $request->sanpchat;
            if (isset($request->youtube) && $request->youtube != "") $update_array["youtube"] = $request->youtube;
            if (isset($request->facility_website) && $request->facility_website != "") $update_array["facility_website"] = $request->facility_website;
            if (isset($request->trauma) && $request->trauma != "") $update_array["trauma_designation"] = $request->trauma;
            if (isset($request->senior_leader_message) && $request->senior_leader_message != "") $update_array["cno_message"] = $request->senior_leader_message;
            if (isset($request->about_facility) && $request->about_facility != "") $update_array["about_facility"] = $request->about_facility;

            if (isset($request->f_emr) && $request->f_emr != "") $update_array["f_emr"] = $request->f_emr;
            if (isset($update_array["f_emr"]) && ($update_array["f_emr"] == "other" || $update_array["f_emr"] == "0")) {
                if (isset($update_array["f_emr_other"]) && $update_array["f_emr_other"] != "")  $request->f_emr_other;
            } else $update_array["f_emr_other"] = "";

            if (isset($update_array["f_bcheck_provider"]) && ($update_array["f_bcheck_provider"] == "other" || $update_array["f_bcheck_provider"] == "0")) {
                if (isset($request->f_bcheck_provider_other) && $request->f_bcheck_provider_other != "") $update_array["f_bcheck_provider_other"] = $request->f_bcheck_provider_other;
            } else $update_array["f_bcheck_provider_other"] = "";

            if (isset($update_array["nurse_cred_soft"]) && ($update_array["nurse_cred_soft"] == "other" || $update_array["nurse_cred_soft"] == "0")) {
                if (isset($request->nurse_cred_soft_other) && $request->nurse_cred_soft_other != "") $update_array["nurse_cred_soft_other"] = $request->nurse_cred_soft_other;
            } else $update_array["nurse_cred_soft_other"] = "";

            if (isset($update_array["nurse_scheduling_sys"]) && ($update_array["nurse_scheduling_sys"] == "other" || $update_array["nurse_scheduling_sys"] == "0")) {
                if (isset($request->nurse_scheduling_sys_other) && $request->nurse_scheduling_sys_other != "") $update_array["nurse_scheduling_sys_other"] = $request->nurse_scheduling_sys_other;
            } else $update_array["nurse_scheduling_sys_other"] = "";

            if (isset($update_array["time_attend_sys"]) && ($update_array["time_attend_sys"] == "other" || $update_array["time_attend_sys"] == "0")) {
                if (isset($request->time_attend_sys_other) && $request->time_attend_sys_other != "") $update_array["time_attend_sys_other"] = $request->time_attend_sys_other;
            } else $update_array["time_attend_sys_other"] = "";

            if (isset($request->licensed_beds) && $request->licensed_beds != "") $update_array["licensed_beds"] = $request->licensed_beds;

            if ($request->hasFile('facility_logo')) {
                $facility_logo_name_full = $request->file('facility_logo')->getClientOriginalName();
                $facility_logo_name = pathinfo($facility_logo_name_full, PATHINFO_FILENAME);
                $facility_logo_ext = $request->file('facility_logo')->getClientOriginalExtension();
                $facility_logo = $facility_logo_name . '_' . time() . '.' . $facility_logo_ext;
                $update_array['facility_logo'] = $facility_logo;
                //Upload Image
                // $request->file('facility_logo')->storeAs('assets/facilities/facility_logo', $facility_logo);
                $destinationPath = 'images/facilities';
                $request->file('facility_logo')->move(public_path($destinationPath), $facility_logo);   
        
            }

            if ($request->hasFile('cno_image')) {
                $cno_image_name_full = $request->file('cno_image')->getClientOriginalName();
                $cno_image_name = pathinfo($cno_image_name_full, PATHINFO_FILENAME);
                $cno_image_ext = $request->file('cno_image')->getClientOriginalExtension();
                $cno_image = $cno_image_name . '_' . time() . '.' . $cno_image_ext;
                $update_array['cno_image'] = $cno_image;
                //Upload Image
                // $request->file('cno_image')->storeAs('assets/facilities/cno_image', $cno_image);
                // $facility->update();
                $destinationPath = 'images/facilities/cno_image';
                $request->file('cno_image')->move(public_path($destinationPath), $cno_image);   
        
            }

            if (isset($update_array) && !empty($update_array) && $facility_id != "") {
                $update = Facility::where(['id' => $facility_id])->update($update_array);
                if ($update) {
                    $user_id = $request->user_id;
                    $user = User::where(['id' => $user_id])->get()->first();
                    $this->check = "1";
                    $this->message = "Profile updated successfully";
                    $this->return_data = $this->facilityProfileCompletionFlagStatus($type = "", $user);
                } else {
                    $this->message = "Failed to update profile, Please try again later";
                }
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function changeFacilityLogo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'facility_id' => 'required',
            'facility_logo' => 'required|max:1024|image|mimes:jpeg,png,jpg,gif',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $facility_id = (isset($request->facility_id) && $request->facility_id != "") ? $request->facility_id : "";
            // dd($request->all());
            if ($request->hasFile('facility_logo') && $facility_id != "") {
                $facility_logo_name_full = $request->file('facility_logo')->getClientOriginalName();
                $facility_logo_name = pathinfo($facility_logo_name_full, PATHINFO_FILENAME);
                $facility_logo_ext = $request->file('facility_logo')->getClientOriginalExtension();
                $facility_logo = $facility_logo_name . '_' . time() . '.' . $facility_logo_ext;
                $update_array['facility_logo'] = $facility_logo;
                //Upload Image
                // $request->file('facility_logo')->storeAs('assets/facilities/facility_logo', $facility_logo);
                $destinationPath = 'images/facilities';
                $request->file('facility_logo')->move(public_path($destinationPath), $facility_logo);   
        

                $update = Facility::where(['id' => $facility_id])->update($update_array);
                if ($update) {
                    $this->check = "1";
                    $this->message = "Facility logo updated successfully";
                } else {
                    $this->message = "Failed to update profile, Please try again later";
                }
            } else {
                $this->message = "Required parameters not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function browseNurses(Request $request)
    {
        $whereCond = ['active' => true];
        if (isset($request->nurse_id) && $request->nurse_id != "") {
            $whereCond = array_merge($whereCond, ['id' => $request->nurse_id]);
        }
        $ret = [];
        Nurse::where($whereCond)
            ->orderBy('created_at', 'desc');
        /* new */

        // dd($request->all());
        $whereCond = [
            'active' => true
        ];
        $ret = Nurse::where($whereCond)
            ->orderBy('created_at', 'desc');

        $certification = $request->certification;

        $specialty = (isset($request->specialty) && $request->specialty != "") ? json_decode($request->specialty) : [];
        /*specialty filter nwe update 06/dec/2021 */
        if (is_array($specialty) && !empty($specialty)) {
            $ret->where(function (Builder $query) use ($specialty) {
                foreach ($specialty as $key => $search_spl_id) {
                    if ($search_spl_id != "")
                        $query->orWhere('specialty', 'like', '%' . $search_spl_id . '%');
                }
            });
        }
        /*specialty filter nwe update 06/dec/2021 */

        $availability = (isset($request->availability) && $request->availability != "") ? json_decode($request->availability) : [];
        if (is_array($availability) && !empty($availability)) {
            $ret->whereHas('availability', function (Builder $query1) use ($availability) {
                $query1->whereIn('days_of_the_week', $availability);
            });
        }

        $is_verified = (isset($request->is_verified) && $request->is_verified != "") ? $request->is_verified : "";
        if ($is_verified != "") {
            $ret->where(function (Builder $query1) use ($is_verified) {
                $query1->where('is_verified', array("1"));
            });
        }

        $search_status = (isset($request->search_status) && $request->search_status != "") ? $request->search_status : "";
        if ($search_status != "") {
            $ret->where(function (Builder $query1) use ($search_status) {
                $query1->where('search_status', array($search_status));
            });
        }

        $search_bill_rate_from = (isset($request->search_bill_rate_from) && $request->search_bill_rate_from != "") ? $request->search_bill_rate_from : "";
        $search_bill_rate_to = (isset($request->search_bill_rate_to) && $request->search_bill_rate_to != "") ? $request->search_bill_rate_to : "";
        if ($search_bill_rate_from != "" && $search_bill_rate_to != "") {
            $ret->where(function (Builder $query) use ($search_bill_rate_from,  $search_bill_rate_to) {
                $query->whereBetween('facility_hourly_pay_rate', array(intval($search_bill_rate_from), intval($search_bill_rate_to)));
            });
        }

        $search_tenure_from = (isset($request->search_tenure_from) && $request->search_tenure_from != "") ? $request->search_tenure_from : "";
        $search_tenure_to = (isset($request->search_tenure_to) && $request->search_tenure_to != "") ? $request->search_tenure_to : "";
        if ($search_tenure_from != "" && $search_tenure_to != "") {
            $ret->where(function (Builder $query) use ($search_tenure_from, $search_tenure_to) {
                $query->whereBetween('experience_as_acute_care_facility', array(intval($search_tenure_from), intval($search_tenure_to)));
                $query->orWhere(function (Builder $query) use ($search_tenure_from, $search_tenure_to) {
                    $query->whereBetween('experience_as_ambulatory_care_facility', array(intval($search_tenure_from), intval($search_tenure_to)));
                });
            });
        }

        $certification = (isset($request->certification) && $request->certification != "") ? $request->certification : "";
        if ($certification != "") {
            $ret->whereHas('certifications', function (Builder $query) use ($certification) {
                $query->whereIn('type', $certification);
            });
        }

        /* state city and postcode new update */
        $states = (isset($request->state) && $request->state != "") ? $request->state : "";
        if (isset($states) && $states != "") {
            $getStates = States::where(['id' => $states])->get();
            if ($getStates->count() > 0) {
                $selected_state = $getStates->first();
                $name = $selected_state->name;
                $iso2 = $selected_state->iso2;
                $ret->where(function (Builder $query1) use ($name, $iso2) {
                    $query1->where('state', array($name));
                    $query1->orWhere('state', array($iso2));
                });
            }
        }

        $cities = (isset($request->city) && $request->city != "") ? $request->city : "";
        if (isset($cities) && $cities != "") {
            $getCities = Cities::where(['id' => $cities])->get();
            if ($getCities->count() > 0) {
                $selected_city = $getCities->first();
                $name = $selected_city->name;
                $ret->where(function (Builder $query1) use ($name) {
                    $query1->where('city', array($name));
                });
            }
        }

        $zipcode = (isset($request->zipcode) && $request->zipcode != "") ? $request->zipcode : "";
        if (isset($zipcode) && $zipcode != "") {
            $zipcode_inp = [];
            $nearest = $this->getNearestMiles($zipcode);
            if (isset($nearest['results']) && !empty($nearest['results'])) {
                foreach ($nearest['results'] as $zipkey => $zip_res) {
                    $zipcode_inp[] = $zip_res['code'];
                }
            }
            if (!empty($zipcode_inp)) {
                $ret->where(function (Builder $query_zip) use ($zipcode_inp) {
                    $query_zip->whereIn('postcode', $zipcode_inp);
                });
            } else {
                $ret->where(function (Builder $query_zip) use ($zipcode) {
                    $query_zip->where('postcode', array($zipcode));
                });
            }
        }
        /* state city and postcode new update */

        /* keywords filter */
        $search_keyword = (isset($request->search_keyword) && $request->search_keyword != "") ? $request->search_keyword : "";
        if ($search_keyword) {
            $ret->search([
                'user.first_name',
                'user.last_name',
                'user.email',
                'nursing_license_state',
                'nursing_license_number',
                'availability.days_of_the_week',
                'experiences.organization_name',
                'experiences.organization_department_name',
                'experiences.description_job_duties'
            ], $search_keyword);
        }
        /* keywords filter */

        /* new */
        $nurses_list = $ret->count();
        if ($ret->count() > 0) {
            $limit = 25;
            $total_pages = ceil($ret->count() / $limit);
            $nurse_data = $ret->get();
            // $nurse_data = $ret->paginate($limit);
            $nurse_info['data'] = $this->nurseInfo($nurse_data);
            $nurse_info['total_pages_available'] =  strval($total_pages);
            $nurse_info["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
            $nurse_info['results_per_page'] = strval($limit);

            $this->check = "1";
            $this->message = "Nurses listed successfully";
            $this->return_data = $nurse_info;
        } else {
            $this->message = "No nurses found";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    /* average rating calculation */
    public function ratingCalculation($count, $array)
    {
        $max = 0;
        $n = $count; // get the count of comments
        if (!empty($array)) {
            foreach ($array as $key => $rating) { // iterate through array
                $max = $max + $rating;
            }
        }

        return ($max == 0 || $n == 0) ? "5" : strval(round(($max / $n), 1));
    }
    /* average rating calculation */

    /* major cities in us, */
    public function citiesList()
    {
        $cities_list = [
            "anchorage" => "99507", "juneau" => "99801", "fairbanks" => "99709", "badger" => "99705", "palmer" => "99645", "birmingham" => "35211", "huntsville" => "35810", "montgomery" => "36117", "mobile" => "36695", "tuscaloosa" => "35405", "little rock" => "72204", "fayetteville" => "72701", "fort smith" => "72903", "springdale" => "72764", "jonesboro" => "72401", "phoenix" => "85032", "tucson" => "85710", "mesa" => "85204", "chandler" => "85225", "scottsdale" => "85251", "los angeles" => "90011", "san diego" => "92154", "san jose" => "95123", "san francisco" => "94112", "fresno" => "93722", "denver" => "80219", "colorado springs" => "80918", "aurora" => "80013", "fort collins" => "80525", "lakewood" => "80226", "bridgeport" => "06606", "new haven" => "06511", "stamford" => "06902", "hartford" => "06106", "waterbury" => "06708", "washington" => "20011", "shaw" => "20001", "adams morgan" => "20009", "chevy chase" => "20015", "bloomingdale" => "20001", "wilmington" => "19805", "dover" => "19904", "newark" => "19711", "middletown" => "19709", "bear" => "19701", "jacksonville" => "32210", "miami" => "33186", "tampa" => "33647", "orlando" => "32811", "st. petersburg" => "33710", "atlanta" => "30349", "augusta" => "30906", "columbus" => "31907", "savannah" => "31405", "athens" => "30606", "honolulu" => "96817", "east honolulu" => "96818", "pearl city" => "96782", "hilo" => "96720", "kailua" => "96740", "des moines" => "50317", "cedar rapids" => "52402", "davenport" => "52806", "sioux city" => "51106", "iowa city" => "52240", "boise" => "83709", "meridian" => "83646", "nampa" => "83686", "idaho falls" => "83401", "caldwell" => "83605", "chicago" => "60629", "aurora" => "60505", "naperville" => "60565", "joilet" => "60435", "rockford" => "61107", "indianapolis" => "46227", "fort wayne" => "46835", "evansville" => "47714", "carmel" => "46032", "south bend" => "46614", "wichita" => "67212", "overland park" => "66212", "kansas city" => "66102", "olathe" => "66062", "topeka" => "66614", "louisville" => "40299", "lexington" => "40509", "bowling green" => "42101", "owensboro" => "42301", "covington" => "41011", "new orleans" => "70119", "baton rouge" => "70808", "shreveport" => "71106", "metairie" => "70003", "lafayette" => "70506", "boston" => "02124", "worcester" => "01604", "springfield" => "01109", "cambridge" => "02139", "lowell" => "01852", "baltimore" => "21215", "columbia" => "21044", "germantown" => "20874", "silver spring" => "20906", "waldorf" => "20602", "detroit" => "48228", "grand rapids" => "49504", "warren" => "48089", "sterling heights" => "48310", "lansing " => "48911", "minneapolis" => "55407", "st. paul" => "55106", "rochester" => "55901", "duluth" => "55811", "bloomington" => "55420", "kansas city" => "64114", "st. louis" => "63116", "springfield" => "65807", "columbia" => "65203", "independence " => "64055", "jackson" => "39212", "gulfport" => "39503", "southaven" => "38671", "biloxi" => "39531", "hattiesburg" => "39401", "billings" => "59101", "missoula" => "59808", "great falls" => "59401", "bozeman" => "59715", "butte" => "59701", "charlotte" => "28205", "raleigh" => "27603", "greensboro" => "27413", "durham" => "27703", "winston-salem" => "27101", "fargo" => "58102", "bismarck" => "58501", "grand forks" => "58201", "minot" => "58701", "west fargo" => "58078", "omaha" => "68007", "lincon " => "68501", "bellevue" => "68005", "grand island" => "68801", "kearney" => "68845", "manchester" => "03101", "nashua" => "03060", "concord" => "03301", "dover" => "03820", "rochester" => "03867", "newark" => "07101", "jersey city" => "07302", "paterson" => "07501", "elizabeth" => "07201", "toms river" => "08753", "albuquerque" => "87101", "las cruces" => "88001", "rio rancho" => "87144", "santa fe" => "87501", "roswell" => "88202", "las vegas" => "88901", "henderson" => "89002", "reno" => "89502", "north las vegas" => "89030", "paradise" => "89103", "new york" => "10011", "buffalo" => "14201", "rochester" => "14602", "yonkers" => "10701", "syracuse" => "13201", "columbus" => "43210", "cleveland" => "44101", "cincinnati" => "45003", "toledo" => "43604", "akron" => "44320", "oklahoma city" => "73008", "tulsa" => "74008", "norman" => "73019", "broken arrow" => "74011", "edmond" => "73003", "portland" => "97201", "salem" => "97301", "eugene" => "97402", "hillsboro" => "97124", "gresham" => "97080", "philadelphia" => "19102", "pittsburgh" => "15222", "allentown" => "18104", "erie" => "16504", "reading" => "19602", "providence" => "02901", "warwick" => "02886", "cranston" => "02920", "pawtucket" => "02861", "east providence" => "02914", "north charleston" => "29405", "mount pleasant" => "29464", "rock hill" => "29732", "greenville" => "29611", "summerville" => "29485", "sioux falls" => "57101", "rapid city" => "57701", "aberdeen" => "57401", "brookings" => "57006", "watertown" => "57201", "nashville" => "37011", "memphis" => "37501", "knoxville" => "37901", "clarksville" => "37040", "chattanooga" => "37341", "houston" => "77002", "austin" => "78701", "san antonio" => "78204", "dallas" => "75201", "fort worth" => "76102", "salt lake city" => "84101", "west valley city" => "84119", "west jordan" => "84081", "provo" => "84097", "orem" => "84058", "virginia beach" => "23451", "chesapeake" => "23320", "norfolk" => "23502", "arlington" => "22206", "richmond" => "23220", "burlington" => "05401", "south burlington" => "05403", "rutland" => "05701", "essex junction" => "05451", "bennington" => "05201", "seattle" => "98121", "spokane" => "99201", "tacoma" => "98402", "vancouver" => "98660", "kent" => "98032", "milwaukee" => "53201", "madison" => "53558", "green bay" => "54229", "kenosha" => "53140", "racine" => "53401", "charleston" => "25301", "huntington" => "25701", "morgantown" => "26501", "parkersburg" => "26101", "wheeling" => "26003", "cheyenne" => "82001", "casper" => "82609", "laramie" => "82070", "gillette" => "82716", "rock springs" => "82901"
        ];

        return $cities_list;
    }
    /* major cities in us, */

    public function nurseInfo($nurse)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');

        $nurse_result = [];
        foreach ($nurse as $key => $n) {
            $nurse_data["nurse_id"] = (isset($n->id) && $n->id != "") ? $n->id : "";
            $nurse_data["user_id"] = (isset($n->user_id) && $n->user_id != "") ? $n->user_id : "";

            /* user tables records */
            $nurse_data["role"] = (isset($n->user->role) && $n->user->role != "") ? $n->user->role : "";
            $nurse_data["first_name"] = (isset($n->user->first_name) && $n->user->first_name != "") ? $n->user->first_name : "";
            $nurse_data["last_name"] = (isset($n->user->last_name) && $n->user->last_name != "") ? $n->user->last_name : "";

            // $nurse_data["nurse_logo"] = (isset($n->user->image) && $n->user->image != "") ? url('storage/assets/nurses/profile/' . $n->user->image) : "";
            $nurse_data['nurse_logo'] = (isset($n->user->image) && $n->user->image != '') ? url('public/images/nurses/profile/'.$n->user->image) : '';
            // $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
            // if ($n->user->image) {
            //     $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $n->user->image);
            //     if ($t) {
            //         $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $n->user->image);
            //     }
            // }
            // $nurse_data["nurse_logo_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);

            $nurse_data["nurse_email"] = (isset($n->user->email) && $n->user->email != "") ? $n->user->email : "";
            $nurse_data["user_name"] = (isset($n->user->user_name) && $n->user->user_name != "") ? $n->user->user_name : "";
            $nurse_data["fcm_token"] = (isset($n->user->fcm_token) && $n->user->fcm_token != "") ? $n->user->fcm_token : "";
            // $nurse_data["email_verified_at"] = (isset($n->user->email_verified_at) && $n->user->email_verified_at != "") ? $n->user->email_verified_at : "";
            $nurse_data["date_of_birth"] = (isset($n->user->date_of_birth) && $n->user->date_of_birth != "") ? $n->user->date_of_birth : "";
            $nurse_data["mobile"] = (isset($n->user->mobile) && $n->user->mobile != "") ? $n->user->mobile : "";
            $nurse_data["new_mobile"] = (isset($n->user->new_mobile) && $n->user->new_mobile != "") ? $n->user->new_mobile : "";
            // $nurse_data["otp"] = (isset($n->user->otp) && $n->user->otp != "") ? $n->user->otp : "";
            $nurse_data["email_notification"] = (isset($n->user->email_notification) && $n->user->email_notification != "") ? strval($n->user->email_notification) : "";
            $nurse_data["sms_notification"] = (isset($n->user->sms_notification) && $n->user->sms_notification != "") ? strval($n->user->sms_notification) : "";
            // $nurse_data["active"] = (isset($n->user->active) && $n->user->active != "") ? $n->user->active : "";
            // $nurse_data["remember_token"] = (isset($n->user->remember_token) && $n->user->remember_token != "") ? $n->user->remember_token : "";
            // $nurse_data["deleted_at"] = (isset($n->user->deleted_at) && $n->user->deleted_at != "") ? $n->user->deleted_at : "";
            // $nurse_data["created_at"] = (isset($n->user->created_at) && $n->user->created_at != "") ? $n->user->created_at : "";
            // $nurse_data["updated_at"] = (isset($n->user->updated_at) && $n->user->updated_at != "") ? $n->user->updated_at : "";
            // $nurse_data["banned_until"] = (isset($n->user->banned_until) && $n->user->banned_until != "") ? $n->user->banned_until : "";
            // $nurse_data["last_login_at"] = (isset($n->user->last_login_at) && $n->user->last_login_at != "") ? $n->user->last_login_at : "";
            // $nurse_data["last_login_ip"] = (isset($n->user->last_login_ip) && $n->user->last_login_ip != "") ? $n->user->last_login_ip : "";
            /* user tables records */

            $nurse_data["specialty"] = (isset($n->specialty) && $n->specialty != "") ? $n->specialty : "";
            $specialties_array = ($nurse_data["specialty"] != "") ? $spl = explode(",", $nurse_data["specialty"]) : [];
            $nurse_data["specialty_definition"] = [];
            foreach ($specialties_array as $spl) {
                $spl_name = (isset($specialties[$spl]) && $specialties[$spl] != "") ? $specialties[$spl] : "";
                if ($spl_name != "")
                    $nurse_data["specialty_definition"][] = ['id' => $spl, 'name' => $spl_name];
            }
            $nurse_data["nursing_license_state"] = (isset($n->nursing_license_state) && $n->nursing_license_state != "") ? $n->nursing_license_state : "";
            $nurse_data["nursing_license_number"] = (isset($n->nursing_license_number) && $n->nursing_license_number != "") ? $n->nursing_license_number : "";
            $nurse_data["highest_nursing_degree"] = (isset($n->highest_nursing_degree) && $n->highest_nursing_degree != "") ? strval($n->highest_nursing_degree) : "";
            $nurse_data["serving_preceptor"] = (isset($n->serving_preceptor) && $n->serving_preceptor != "") ? strval($n->serving_preceptor) : "";
            $nurse_data["serving_interim_nurse_leader"] = (isset($n->serving_interim_nurse_leader) && $n->serving_interim_nurse_leader != "") ? strval($n->serving_interim_nurse_leader) : "";
            $nurse_data["leadership_roles"] = (isset($n->leadership_roles) && $n->leadership_roles != "") ? strval($n->leadership_roles) : "";
            $nurse_data["address"] = (isset($n->address) && $n->address != "") ? $n->address : "";
            $nurse_data["city"] = (isset($n->city) && $n->city != "") ? $n->city : "";
            $nurse_data["state"] = (isset($n->state) && $n->state != "") ? $n->state : "";
            $nurse_data["postcode"] = (isset($n->postcode) && $n->postcode != "") ? $n->postcode : "";
            $nurse_data["country"] = (isset($n->country) && $n->country != "") ? $n->country : "";
            $nurse_data["hourly_pay_rate"] = (isset($n->hourly_pay_rate) && $n->hourly_pay_rate != "") ? $n->hourly_pay_rate : "";
            $nurse_data["experience_as_acute_care_facility"] = (isset($n->experience_as_acute_care_facility) && $n->experience_as_acute_care_facility != "") ? $n->experience_as_acute_care_facility : "";
            $nurse_data["experience_as_ambulatory_care_facility"] = (isset($n->experience_as_ambulatory_care_facility) && $n->experience_as_ambulatory_care_facility != "") ? $n->experience_as_ambulatory_care_facility : "";
            // $nurse_data["active"] = (isset($n->active) && $n->active != "") ? $n->active : "";
            // $nurse_data["deleted_at"] = (isset($n->deleted_at) && $n->deleted_at != "") ? $n->deleted_at : "";
            // $nurse_data["created_at"] = (isset($n->created_at) && $n->created_at != "") ? $n->created_at : "";
            // $nurse_data["updated_at"] = (isset($n->updated_at) && $n->updated_at != "") ? $n->updated_at : "";

            $nurse_data["ehr_proficiency_cerner"] = (isset($n->ehr_proficiency_cerner) && $n->ehr_proficiency_cerner != "") ? strval($n->ehr_proficiency_cerner) : "";
            $nurse_data["ehr_proficiency_cerner_definition"] = (isset($ehrProficienciesExp[$n->ehr_proficiency_cerner]) && $ehrProficienciesExp[$n->ehr_proficiency_cerner] != "") ? $ehrProficienciesExp[$n->ehr_proficiency_cerner] : "";
            $nurse_data["ehr_proficiency_meditech"] = (isset($n->ehr_proficiency_meditech) && $n->ehr_proficiency_meditech != "") ? strval($n->ehr_proficiency_meditech) : "";
            $nurse_data["ehr_proficiency_meditech_definition"] = (isset($ehrProficienciesExp[$n->ehr_proficiency_meditech]) && $ehrProficienciesExp[$n->ehr_proficiency_meditech] != "") ? $ehrProficienciesExp[$n->ehr_proficiency_meditech] : "";
            $nurse_data["ehr_proficiency_epic"] = (isset($n->ehr_proficiency_epic) && $n->ehr_proficiency_epic != "") ? strval($n->ehr_proficiency_epic) : "";
            $nurse_data["ehr_proficiency_epic_definition"] = (isset($ehrProficienciesExp[$n->ehr_proficiency_epic]) && $ehrProficienciesExp[$n->ehr_proficiency_epic] != "") ? $ehrProficienciesExp[$n->ehr_proficiency_epic] : "";


            $nurse_data["slug"] = (isset($n->slug) && $n->slug != "") ? $n->slug : "";
            $nurse_data["summary"] = (isset($n->summary) && $n->summary != "") ? $n->summary : "";
            $nurse_data["nurses_video"] = (isset($n->nurses_video) && $n->nurses_video != "") ? $n->nurses_video : "";
            $nurse_data["nurses_facebook"] = (isset($n->nurses_facebook) && $n->nurses_facebook != "") ? $n->nurses_facebook : "";
            $nurse_data["nurses_twitter"] = (isset($n->nurses_twitter) && $n->nurses_twitter != "") ? $n->nurses_twitter : "";
            $nurse_data["nurses_linkedin"] = (isset($n->nurses_linkedin) && $n->nurses_linkedin != "") ? $n->nurses_linkedin : "";
            $nurse_data["nurses_instagram"] = (isset($n->nurses_instagram) && $n->nurses_instagram != "") ? $n->nurses_instagram : "";
            $nurse_data["nurses_pinterest"] = (isset($n->nurses_pinterest) && $n->nurses_pinterest != "") ? $n->nurses_pinterest : "";
            $nurse_data["nurses_tiktok"] = (isset($n->nurses_tiktok) && $n->nurses_tiktok != "") ? $n->nurses_tiktok : "";
            $nurse_data["nurses_sanpchat"] = (isset($n->nurses_sanpchat) && $n->nurses_sanpchat != "") ? $n->nurses_sanpchat : "";
            $nurse_data["nurses_youtube"] = (isset($n->nurses_youtube) && $n->nurses_youtube != "") ? $n->nurses_youtube : "";
            $nurse_data["clinical_educator"] = (isset($n->clinical_educator) && $n->clinical_educator != "") ? strval($n->clinical_educator) : "";
            $nurse_data["is_daisy_award_winner"] = (isset($n->is_daisy_award_winner) && $n->is_daisy_award_winner != "") ? strval($n->is_daisy_award_winner) : "";
            $nurse_data["employee_of_the_mth_qtr_yr"] = (isset($n->employee_of_the_mth_qtr_yr) && $n->employee_of_the_mth_qtr_yr != "") ? strval($n->employee_of_the_mth_qtr_yr) : "";
            $nurse_data["other_nursing_awards"] = (isset($n->other_nursing_awards) && $n->other_nursing_awards != "") ? strval($n->other_nursing_awards) : "";
            $nurse_data["is_professional_practice_council"] = (isset($n->is_professional_practice_council) && $n->is_professional_practice_council != "") ? strval($n->is_professional_practice_council) : "";
            $nurse_data["is_research_publications"] = (isset($n->is_research_publications) && $n->is_research_publications != "") ? $n->is_research_publications : "";
            $nurse_data["credential_title"] = (isset($n->credential_title) && $n->credential_title != "") ? $n->credential_title : "";
            $nurse_data["mu_specialty"] = (isset($n->mu_specialty) && $n->mu_specialty != "") ? $n->mu_specialty : "";
            $nurse_data["additional_photos"] = (isset($n->additional_photos) && $n->additional_photos != "") ? $n->additional_photos : "";
            $nurse_data["languages"] = (isset($n->languages) && $n->languages != "") ? $n->languages : "";
            $nurse_data["additional_files"] = (isset($n->additional_files) && $n->additional_files != "") ? $n->additional_files : "";
            $nurse_data["college_uni_name"] = (isset($n->college_uni_name) && $n->college_uni_name != "") ? $n->college_uni_name : "";
            $nurse_data["college_uni_city"] = (isset($n->college_uni_city) && $n->college_uni_city != "") ? $n->college_uni_city : "";
            $nurse_data["college_uni_state"] = (isset($n->college_uni_state) && $n->college_uni_state != "") ? $n->college_uni_state : "";
            $nurse_data["college_uni_country"] = (isset($n->college_uni_country) && $n->college_uni_country != "") ? $n->college_uni_country : "";
            $nurse_data["facility_hourly_pay_rate"] = (isset($n->facility_hourly_pay_rate) && $n->facility_hourly_pay_rate != "") ? $n->facility_hourly_pay_rate : "";
            $nurse_data["n_lat"] = (isset($n->n_lat) && $n->n_lat != "") ? $n->n_lat : "";
            $nurse_data["n_lang"] = (isset($n->n_lang) && $n->n_lang != "") ? $n->n_lang : "";
            $nurse_data["resume"] = (isset($n->resume) && $n->resume != "") ? $n->resume : "";
            $nurse_data["nu_video"] = (isset($n->nu_video) && $n->nu_video != "") ? $n->nu_video : "";
            $nurse_data["nu_video_embed_url"] = (isset($n->nu_video_embed_url) && $n->nu_video_embed_url != "") ? $n->nu_video_embed_url : "";
            $nurse_data["is_verified"] = (isset($n->is_verified) && $n->is_verified != "") ? $n->is_verified : "";
            $nurse_data["is_verified_nli"] = (isset($n->is_verified_nli) && $n->is_verified_nli != "") ? $n->is_verified_nli : "";
            $nurse_data["gig_account_id"] = (isset($n->gig_account_id) && $n->gig_account_id != "") ? $n->gig_account_id : "";
            $nurse_data["is_gig_invite"] = (isset($n->is_gig_invite) && $n->is_gig_invite != "") ? $n->is_gig_invite : "";
            $nurse_data["gig_account_create_date"] = (isset($n->gig_account_create_date) && $n->gig_account_create_date != "") ? $n->gig_account_create_date : "";
            $nurse_data["gig_account_invite_date"] = (isset($n->gig_account_invite_date) && $n->gig_account_invite_date != "") ? $n->gig_account_invite_date : "";
            $nurse_data["search_status"] = (isset($n->search_status) && $n->search_status != "") ? strval($n->search_status) : "";
            $nurse_data["search_status_definition"] = (isset($n->search_status) && $n->search_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($n->search_status) : "";
            $nurse_data["license_type"] = (isset($n->license_type) && $n->license_type != "") ? strval($n->license_type) : "";
            $nurse_data["license_type_definition"] = (isset($n->license_type) && $n->license_type != "") ? \App\Providers\AppServiceProvider::keywordTitle($n->license_type) : "";
            /* rating */
            // for these below columns need to be created in DB
            /* $rating['over_all'] = (isset($n->over_all) && $n->over_all != "") ? $n->over_all : "0";
            $rating['clinical_skills'] = (isset($n->clinical_skills) && $n->clinical_skills != "") ? $n->clinical_skills : "0";
            $rating['nurse_teamwork'] = (isset($n->nurse_teamwork) && $n->nurse_teamwork != "") ? $n->nurse_teamwork : "0";
            $rating['interpersonal_skills'] = (isset($n->interpersonal_skills) && $n->interpersonal_skills != "") ? $n->interpersonal_skills : "0";
            $rating['work_ethic'] = (isset($n->work_ethic) && $n->work_ethic != "") ? $n->work_ethic : "0"; */

            $rating_info = NurseRating::where(['nurse_id' => $n->id]);
            $overall = $clinical_skills = $nurse_teamwork = $interpersonal_skills = $work_ethic = $a = [];
            if ($rating_info->count() > 0) {
                foreach ($rating_info->get() as $key => $r) {
                    $overall[] = $r->overall;
                    $clinical_skills[] = $r->clinical_skills;
                    $nurse_teamwork[] = $r->nurse_teamwork;
                    $interpersonal_skills[] = $r->interpersonal_skills;
                    $work_ethic[] = $r->work_ethic;
                }
            }
            $rating['over_all'] = $this->ratingCalculation(count($overall), $overall);
            $rating['clinical_skills'] = $this->ratingCalculation(count($clinical_skills), $clinical_skills);
            $rating['nurse_teamwork'] = $this->ratingCalculation(count($nurse_teamwork), $nurse_teamwork);
            $rating['interpersonal_skills'] = $this->ratingCalculation(count($interpersonal_skills), $interpersonal_skills);
            $rating['work_ethic'] = $this->ratingCalculation(count($work_ethic), $work_ethic);
            $nurse_data["rating"] = $rating;
            /* rating */
            $nurse_data['work_experience'] = (isset($n->work_experience) && $n->work_experience != "") ? $n->work_experience : "";

            $nurse_result[] = $nurse_data;
        }
        return $nurse_result;
    }

    public function getFacilityList(Request $request)
    {
        $validation_array = [
            'api_key' => 'required',
            'recruiter_id' => 'required'
        ];
        $validator = \Validator::make($request->all(), $validation_array);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            // $record = Facility::where(['created_by' => $request->recruiter_id,'active' => '1'])->get();
            $record = Facility::where(['active' => '1'])->get();
            
            if(isset($record) && !empty($record)){
                $this->check =  1;
                $this->message = 'Facility records listed successfully';
            }else{
                $this->check =  0;
                $this->message = 'Facility records not listed successfully';
                
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $record], 200);
    }

    public function getShift(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $keywords = Keyword::where('filter', 'PreferredShift')->get()->pluck('title', 'id');
            $data = [];
            foreach ($keywords as $key => $value) {
                $data[] = ['id' => $key, "name" => $value];
            }
            $this->check = "1";
            $this->message = "Setting Types has been listed successfully";
            $this->return_data = $data;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function createJob($check_type = "create", Request $request)
    {
        $messages = [
            "job_photos.*.mimes" => "Photos should be image or png jpg",
            "job_photos.*.max" => "Photos should not be more than 5mb"
        ];

        $validation_array = [
            'user_id' => 'required',
            'api_key' => 'required',
            'job_name' => 'required',
            'type' => 'required'
            
        ];
        if ($check_type == "update") {
            $validation_array = array_merge($validation_array, ['job_id' => 'required']);
        }
        $validator = \Validator::make($request->all(), $validation_array, $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            $facility_id = Facility::where('created_by', $request->user_id)->get()->first();
            if(isset($facility_id) && !empty($facility_id)){
                $facility_id = $facility_id->id;
            }else{
                $facility_id =  '';
            }
            $update_array["job_name"] = $request->job_name;
            $update_array["type"] = isset($request->type)?$request->type:'';
            $update_array["compact"] = isset($request->compact)?$request->compact:'';
            $update_array["terms"] = isset($request->term)?$request->term:'';
            $update_array["profession"] = isset($request->profession)?$request->profession:'';
            $update_array["preferred_specialty"] = isset($request->specialty)?$request->specialty:'';
            $update_array["preferred_experience"] = isset($request->experience)?$request->experience:'';
            $update_array["job_location"] = isset($request->professional_licensure)?$request->professional_licensure:'';
            $update_array["vaccinations"] = isset($request->vaccinations)?$request->vaccinations:'';
            $update_array["number_of_references"] = isset($request->number_of_references)?$request->number_of_references:'';
            $update_array["min_title_of_reference"] = isset($request->min_title_of_reference)?$request->min_title_of_reference:'';
            $update_array["recency_of_reference"] = isset($request->recency_of_reference)?$request->recency_of_reference:'';
            $update_array["certificate"] = isset($request->certificate)?$request->certificate:'';
            $update_array["skills"] = isset($request->skills_checklist)?$request->skills_checklist:'';
            $update_array["urgency"] = isset($request->urgency)?$request->urgency:'';
            $update_array["position_available"] = isset($request->position_available)?$request->position_available:'';
            $update_array["msp"] = isset($request->msp)?$request->msp:'';
            $update_array["vms"] = isset($request->vms)?$request->vms:'';
            $update_array["submission_of_vms"] = isset($request->submission_of_vms)?$request->submission_of_vms:'';
            $update_array["block_scheduling"] = isset($request->block_scheduling)?$request->block_scheduling:'';
            $update_array["float_requirement"] = isset($request->float_requirement)?$request->float_requirement:'';
            $update_array["facility_shift_cancelation_policy"] = isset($request->facility_shift_cancelation_policy)?$request->facility_shift_cancelation_policy:'';
            $update_array["contract_termination_policy"] = isset($request->contract_termination_policy)?$request->contract_termination_policy:'';
            $update_array["traveler_distance_from_facility"] = isset($request->traveler_distance_from_facility)?$request->traveler_distance_from_facility:'';
            $update_array["facility"] = isset($request->facility)?$request->facility:'';
            // $update_array["facility_id"] = isset($request->facility_id)?$request->facility_id:$facility_id;
            $update_array["facility"] = 'Testing Facility';
            $update_array["facility_id"] = "GWf000001";
            
            $update_array["clinical_setting"] = isset($request->clinical_setting)?$request->clinical_setting:'';
            $update_array["Patient_ratio"] = isset($request->Patient_ratio)?$request->Patient_ratio:'';
            $update_array["emr"] = isset($request->emr)?$request->emr:'';
            $update_array["Unit"] = isset($request->Unit)?$request->Unit:'';
            $update_array["Department"] = isset($request->Department)?$request->Department:'';
            $update_array["Bed_Size"] = isset($request->Bed_Size)?$request->Bed_Size:'';
            $update_array["Trauma_Level"] = isset($request->Trauma_Level)?$request->Trauma_Level:'';
            $update_array["scrub_color"] = isset($request->scrub_color)?$request->scrub_color:'';
            $update_array["as_soon_as"] = isset($request->as_soon_as)?$request->as_soon_as:'';
            if($update_array["as_soon_as"] == '1'){
                $update_array["start_date"] = isset($request->start_date)?$request->start_date:date('M j Y');
            }else{
                $update_array["start_date"] = isset($request->start_date)?$request->start_date:'';
            }
            
            $update_array["rto"] = isset($request->rto)?$request->rto:'';
            $update_array["preferred_shift"] = isset($request->preferred_shift)?$request->preferred_shift:'';
            $update_array["hours_per_week"] = isset($request->hours_per_week)?$request->hours_per_week:'';
            $update_array["guaranteed_hours"] = isset($request->guaranteed_hours)?$request->guaranteed_hours:'';
            $update_array["hours_shift"] = isset($request->hours_shift)?$request->hours_shift:'';
            $update_array["weeks_shift"] = isset($request->weeks_shift)?$request->weeks_shift:'';
            $update_array["preferred_assignment_duration"] = isset($request->preferred_assignment_duration)?$request->preferred_assignment_duration:'';
            $update_array["referral_bonus"] = isset($request->referral_bonus)?$request->referral_bonus:'';
            $update_array["sign_on_bonus"] = isset($request->sign_on_bonus)?$request->sign_on_bonus:'';
            $update_array["completion_bonus"] = isset($request->completion_bonus)?$request->completion_bonus:'';
            $update_array["extension_bonus"] = isset($request->extension_bonus)?$request->extension_bonus:'';
            $update_array["other_bonus"] = isset($request->other_bonus)?$request->other_bonus:'';
            $update_array["four_zero_one_k"] = isset($request->four_zero_one_k)?$request->four_zero_one_k:'';
            $update_array["health_insaurance"] = isset($request->health_insaurance)?$request->health_insaurance:'';
            $update_array["dental"] = isset($request->dental)?$request->dental:'';
            $update_array["vision"] = isset($request->vision)?$request->vision:'';
            $update_array["actual_hourly_rate"] = isset($request->actual_hourly_rate)?$request->actual_hourly_rate:'';
            $update_array["overtime"] = isset($request->overtime)?$request->overtime:'';
            $update_array["holiday"] = isset($request->holiday)?$request->holiday:'';
            $update_array["on_call"] = isset($request->on_call)?$request->on_call:'';
            $update_array["orientation_rate"] = isset($request->orientation_rate)?$request->orientation_rate:'';
            $update_array["weekly_non_taxable_amount"] = isset($request->weekly_non_taxable_amount)?$request->weekly_non_taxable_amount:'';
            $update_array["description"] = isset($request->description)?$request->description:'';
            if($update_array["hours_per_week"] == ''){
                $update_array["hours_per_week"] = 0;
            }
            if($update_array["actual_hourly_rate"] == ''){
                $update_array["actual_hourly_rate"] = 0;
            }
            if($update_array["weekly_non_taxable_amount"] == ''){
                $update_array["weekly_non_taxable_amount"] = 0;
            }
            if($update_array["preferred_assignment_duration"] == ''){
                $update_array["preferred_assignment_duration"] = 0;
            }
            if($update_array["sign_on_bonus"] == ''){
                $update_array["sign_on_bonus"] = 0;
            }
            if($update_array["completion_bonus"] == ''){
                $update_array["completion_bonus"] = 0;
            }
            $update_array["weekly_taxable_amount"] = $update_array["hours_per_week"]*$update_array["actual_hourly_rate"];
            $update_array["employer_weekly_amount"] = $update_array["weekly_taxable_amount"]+$update_array["weekly_non_taxable_amount"];
            $update_array["goodwork_weekly_amount"] = $update_array["employer_weekly_amount"]*0.05;
            $update_array["total_employer_amount"] = ($update_array["preferred_assignment_duration"]*$update_array["employer_weekly_amount"])+$update_array["sign_on_bonus"]+$update_array["completion_bonus"];
            $update_array["total_goodwork_amount"] = $update_array["preferred_assignment_duration"]*$update_array["goodwork_weekly_amount"];
            $update_array["total_contract_amount"] = $update_array["total_employer_amount"]+$update_array["total_goodwork_amount"];
            if($update_array["hours_per_week"] == 0){
                $update_array["feels_like_per_hour"] = 0;
            }else{
                $update_array["feels_like_per_hour"] = $update_array["employer_weekly_amount"]/$update_array["hours_per_week"];
            }
            $update_array['weekly_pay'] = $update_array["employer_weekly_amount"];
            $update_array["facilitys_parent_system"] = isset($request->facilitys_parent_system)?$request->facilitys_parent_system:'';
            $update_array["facility_average_rating"] = isset($request->facility_average_rating)?$request->facility_average_rating:'';
            $update_array["recruiter_average_rating"] = isset($request->recruiter_average_rating)?$request->recruiter_average_rating:'';
            $update_array["employer_average_rating"] = isset($request->employer_average_rating)?$request->employer_average_rating:'';
            $update_array["job_city"] = isset($request->city)?$request->city:'';
            $update_array["job_state"] = isset($request->state)?$request->state:'';
            $update_array["active"] = isset($request->active)?$request->active:'0';
            
            if ($check_type == "update") {
                /* update job */
                if(isset($request->job_id)){
                    $job_id = $request->job_id;
                    $job = Job::where(['id' => $job_id])->update($update_array);
                }else{
                    $this->check = "0";
                    $this->message = "Something went wrong! Please check job_id";
                }
                /* update job */
            } else {
                /* create job */
                $update_array["created_by"] = (isset($request->user_id) && $request->user_id != "") ? $request->user_id : "";
                $update_array["recruiter_id"] = (isset($request->user_id) && $request->user_id != "") ? $request->user_id : "";
                $update_array["goodwork_number"] = uniqid();
                $job = Job::create($update_array);
                Job::where('id', $job['id'])->update(['goodwork_number' => $job['id']]);
                $job = Job::where('id', $job['id'])->first();
                /* create job */
            }

            if (!empty($job) && $job_photos = $request->file('job_photos')) {
                foreach ($job_photos as $job_photo) {
                    $job_photo_name_full = $job_photo->getClientOriginalName();
                    $job_photo_name = pathinfo($job_photo_name_full, PATHINFO_FILENAME);
                    $job_photo_ext = $job_photo->getClientOriginalExtension();
                    $job_photo_finalname = $job_photo_name . '_' . time() . '.' . $job_photo_ext;
                    //Upload Image
                    $job_id_val = ($type == "update") ? $job_id : $job->id;
                    $job_photo->storeAs('assets/jobs/' . $job_id_val, $job_photo_finalname);
                    JobAsset::create(['job_id' => $job_id_val, 'name' => $job_photo_finalname, 'filter' => 'job_photos']);
                }
            }

            if ($job) {
                $this->check = "1";
                $this->message = "Job " . $check_type . "d successfully";
                if ($check_type == "update") {
                    $job_data = Job::where(['id' => $job_id]);
                    if ($job_data->count() > 0) {
                        $this->return_data = $job_data->first();
                    }
                } else {
                    $this->return_data = $job;
                }
            } else {
                $this->check = "0";
                $this->message = "Failed to create job, Please try again later";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function removeJobDocument(Request $request)
    {
        $validator = \Validator::make($request->all(), ['job_id' => 'required', 'asset_id' => 'required',
        'api_key' => 'required',]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $id = (isset($request->asset_id) && $request->asset_id != "") ? $request->asset_id : "";
            $job_id = (isset($request->job_id) && $request->job_id != "") ? $request->job_id : "";

            $jobAsset = JobAsset::where(['id' => $id, 'job_id' => $job_id, 'active' => '1', 'deleted_at' => NULL]);
            if ($jobAsset->count() > 0) {
                $job_asset = $jobAsset->first();
                $t = Storage::exists('assets/jobs/' . $job_asset->id . '/' . $job_asset->name);
                if ($t && $job_asset->name) {
                    Storage::delete('assets/jobs/' . $job_asset->id . '/' . $job_asset->name);
                }
                $delete = $job_asset->delete();
                if ($delete) {
                    $this->check = "1";
                    $this->message = "Job photo removed successfully";
                } else {
                    $this->message = "Job photo not found or already removed";
                }
            } else {
                $this->message = "Job photo not found or already removed";
            }
        }


        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getSeniorityLevelOptions()
    {
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $data = [];
        foreach ($seniorityLevels as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Seniority level's has been listed successfully";
        $this->return_data = $data;
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getJobFunctionOptions()
    {
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $data = [];
        foreach ($jobFunctions as $key => $value) {
            $data[] = ['id' => $key, "name" => $value];
        }
        $this->check = "1";
        $this->message = "Job function's has been listed successfully";
        $this->return_data = $data;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function apiJobInvite(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'nurse_id' => 'required',
            'facility_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $insert_offer["nurse_id"] = $request->nurse_id;
            $insert_offer["created_by"] = $request->facility_id;
            $insert_offer["job_id"] = $request->job_id;
            $insert_offer["expiration"] = date("Y-m-d H:i:s", strtotime('+48 hours'));

            $offer = Offer::create($insert_offer);
            if ($offer) {

                $off_data["id"] = (isset($offer->id) && $offer->id != "") ? $offer->id : "";
                $off_data["nurse_id"] = (isset($offer->nurse_id) && $offer->nurse_id != "") ? $offer->nurse_id : "";
                $off_data["facility"] = (isset($offer->created_by) && $offer->created_by != "") ? $offer->created_by : "";
                $off_data["job_id"] = (isset($offer->job_id) && $offer->job_id != "") ? $offer->job_id : "";
                $off_data["expiration"] = (isset($offer->expiration) && $offer->expiration != "") ? date('d-m-Y', strtotime($offer->expiration)) : "";

                /* mail */
                $nurse_info = Nurse::where(['id' => $request->nurse_id]);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->first();
                    $user_info = User::where(['id' => $nurse->user_id]);
                    if ($user_info->count() > 0) {
                        $user = $user_info->first(); // nurse user info
                        $facility_user_info = User::where(['id' => $offer->created_by]);
                        if ($facility_user_info->count() > 0) {
                            $facility_user = $facility_user_info->first(); // facility user info
                            $data = [
                                'to_email' => $user->email,
                                'to_name' => $user->first_name . ' ' . $user->last_name
                            ];
                            $replace_array = [
                                '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                '###FACILITYNAME###' => $facility_user->facilities[0]->name,
                                '###LOCATION###' => $facility_user->facilities[0]->city . ',' . $facility_user->facilities[0]->state,
                                '###SPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                '###STARTDATE###' => date('d F Y', strtotime($offer->job->start_date)),
                                '###DURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_assignment_duration),
                                '###SHIFT###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift),
                                '###WORKINGDAYS###' => $offer->job->preferred_days_of_the_week,
                            ];
                            $this->basic_email($template = "facility_make_offer", $data, $replace_array);
                        }
                    }
                }
                /* mail */

                $this->check = "1";
                $this->message = "Offer sent successfully";
                $this->return_data = $off_data;
            } else {
                $this->check = "0";
                $this->message = "Failed to sent offer, Please try again later";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function apiJobApply(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'nurse_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required',
            // 'start_date' => 'required',
            'user_id' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $insert_offer["nurse_id"] = $request->nurse_id;
            $insert_offer["created_by"] = $request->nurse_id;
            $insert_offer["job_id"] = $request->job_id;
            $now = date("Y-m-d");
            // $now = isset($request->start_date)?$request->start_date:date("Y-m-d", strtotime('+48 hours', strtotime($now)));
            
            $insert_offer["expiration"] = date("Y-m-d", strtotime('+48 hours', strtotime($now)));
            $insert_offer["start_date"] = $now;
            // follow records
            $insert_follow["user_id"] = $request->user_id;
            $insert_follow["job_id"] = $request->job_id;
            $insert_follow["applied_status"] = '1';
            $insert_follow["like_status"] = '0';
            $insert_follow["status"] = '1';
            // end follow data
            $check_offer = Offer::where(['nurse_id' => $request->nurse_id, 'job_id' => $request->job_id])->get()->first();
            $today = date('Y-m-d H:i:s');
            
            if(isset($check_offer) && $check_offer['expiration'] > $today){
                $this->check = "0";
                $this->message = "You are already apply for this job";
            }else{
                DB::table('offers')->where('nurse_id', $request->nurse_id)->where('job_id', $request->job_id)->delete();
                $offer = Offer::create($insert_offer);
                Follows::create($insert_follow);
                if ($offer) {

                    $off_data["id"] = (isset($offer->id) && $offer->id != "") ? $offer->id : "";
                    $off_data["nurse_id"] = (isset($offer->nurse_id) && $offer->nurse_id != "") ? $offer->nurse_id : "";
                    $off_data["start_date"] = (isset($offer->start_date) && $offer->start_date != "") ? $offer->start_date : "";
                    $off_data["job_id"] = (isset($offer->job_id) && $offer->job_id != "") ? $offer->job_id : "";
                    $off_data["expiration"] = (isset($offer->expiration) && $offer->expiration != "") ? $offer->expiration : "";
    
                    /* mail */
                    $nurse_info = Nurse::where(['id' => $request->nurse_id]);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();
                        $user_info = User::where(['id' => $nurse->user_id]);
                        if ($user_info->count() > 0) {
                            $user = $user_info->first(); // nurse user info
                            $facility_user_info = User::where(['id' => $offer->created_by]);
                            if ($facility_user_info->count() > 0) {
                                $facility_user = $facility_user_info->first(); // facility user info
                                $data = [
                                    'to_email' => $user->email,
                                    'to_name' => $user->first_name . ' ' . $user->last_name
                                ];
                                $replace_array = [
                                    '###NURSENAME###' => $user->first_name . ' ' . $user->last_name,
                                    '###FACILITYNAME###' => $facility_user->facilities[0]->name,
                                    '###LOCATION###' => $facility_user->facilities[0]->city . ',' . $facility_user->facilities[0]->state,
                                    '###SPECIALITY###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_specialty),
                                    '###STARTDATE###' => date('d F Y', strtotime($offer->job->start_date)),
                                    '###DURATION###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_assignment_duration),
                                    '###SHIFT###' => \App\Providers\AppServiceProvider::keywordTitle($offer->job->preferred_shift),
                                    '###WORKINGDAYS###' => $offer->job->preferred_days_of_the_week,
                                ];
                                $this->basic_email($template = "facility_make_offer", $data, $replace_array);
                            }
                        }
                    }
                    /* mail */
    
                    $this->check = "1";
                    $this->message = "Job applied successfully";
                    $this->return_data = $off_data;
                } else {
                    $this->check = "0";
                    $this->message = "Failed to apply for job, Please try again later";
                }
            }
            
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
  

    }

    public function offeredNurses($type, Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
            /*  dropdown data's */
            $user_info = USER::where(['id' => $request->user_id])->get();
            if ($user_info->count() > 0) {
                $user = $user_info->first();

                $page = (isset($request->page_number) && $request->page_number != "") ? $request->page_number : "1";
                if ($type == "active")  $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Active'];
                elseif ($type == "completed") $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Active'];
                else $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Pending'];

                $limit = 25;
                $offers_info = Offer::where($where)
                    ->orderBy('created_at', 'desc')
                    // ->paginate($limit);
                    ->get();

                $total_pages = ceil($offers_info->count() / $limit);
                $offered['total_pages_available'] =  strval($total_pages);
                $offered["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
                $offered['results_per_page'] = strval($limit);

                $offered['data'] = [];
                if ($offers_info->count() > 0) {
                    foreach ($offers_info as $key => $off) {
                        /* $o['creator'] = $off->creator;
                        $o['nurse'] = $off->nurse;
                        $o['job'] = $off->job; */

                        $nurse_info = USER::where(['id' => $off->nurse->user_id])->get();
                        $first_name = $last_name = $image = "";
                        if ($user_info->count() > 0) {
                            $nurse = $nurse_info->first();
                            $first_name = (isset($nurse->first_name) && $nurse->first_name != "") ? $nurse->first_name : "";
                            $last_name = (isset($nurse->last_name) && $nurse->last_name != "") ? $nurse->last_name : "";
                            $image = (isset($nurse->image) && $nurse->image != "") ? url('public/images/nurses/profile/' . $nurse->image) : "";

                            $image_base = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                            if ($nurse->image) {
                                $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $nurse->image);
                                if ($t) {
                                    $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $nurse->image);
                                }
                            }
                            $image_base = 'data:image/jpeg;base64,' . base64_encode($profileNurse);
                        }
                        $o['nurse_first_name'] = $first_name;
                        $o['nurse_last_name'] = $last_name;
                        $o['nurse_image'] = $image;
                        // $o['nurse_image_base'] = $image_base;

                        if($off->job){

                            $o['preferred_shift'] = (isset($off->job->preferred_shift) && $off->job->preferred_shift != "") ? strval($off->job->preferred_shift) : "";
                            $o['preferred_shift_definition'] = (isset($preferredShifts[$off->job->preferred_shift]) && $preferredShifts[$off->job->preferred_shift] != "") ? $preferredShifts[$off->job->preferred_shift] : "";
                            $o['preferred_shift_duration'] = (isset($off->job->preferred_shift_duration) && $off->job->preferred_shift_duration != "") ? strval($off->job->preferred_shift_duration) : "";
                            $o['preferred_shift_duration_definition'] = (isset($specialties[$off->job->preferred_shift_duration]) && $specialties[$off->job->preferred_shift_duration] != "") ? $specialties[$off->job->preferred_shift_duration] : "";
                            $o['preferred_specialty'] = (isset($off->job->preferred_specialty) && $off->job->preferred_specialty != "") ? strval($off->job->preferred_specialty) : "";
                            $o['preferred_specialty_definition'] = (isset($specialties[$off->job->preferred_specialty]) && $specialties[$off->job->preferred_specialty] != "") ? $specialties[$off->job->preferred_specialty] : "";
                            $o['preferred_assignment_duration'] = (isset($off->job->preferred_assignment_duration) && $off->job->preferred_assignment_duration != "") ? strval($off->job->preferred_assignment_duration) : "0";
                            $o['preferred_assignment_duration_definition'] = (isset($assignmentDurations[$off->job->preferred_assignment_duration]) && $assignmentDurations[$off->job->preferred_assignment_duration] != "") ? $assignmentDurations[$off->job->preferred_assignment_duration] : "0";
                            if(isset($o['preferred_assignment_duration_definition'])){
                                $assignment = explode(" ", $assignmentDurations[$off->job->preferred_assignment_duration]);
                                $o['preferred_assignment_duration_definition'] = $assignment[0]; // 12 Week
                            }
                            /* nurse_info */
                            $nurse_info = USER::where(['id' => $request->user_id])->get();
                            /* nurse_info */
                            $o['preferred_hourly_pay_rate'] = (isset($off->job->preferred_hourly_pay_rate) && $off->job->preferred_hourly_pay_rate != "") ? strval($off->job->preferred_hourly_pay_rate) : "0";
                            $o['preferred_days_of_the_week'] = (isset($off->job->preferred_days_of_the_week) && $off->job->preferred_days_of_the_week != "") ? $off->job->preferred_days_of_the_week : "";
                            $days = [];
                            if (isset($off->job->preferred_days_of_the_week)) {
                                $day_s = explode(",", $off->job->preferred_days_of_the_week);
                                if (is_array($day_s) && !empty($day_s)) {
                                    foreach ($day_s as $day) {
                                        if ($day == "Sunday") $days[] = "Su";
                                        elseif ($day == "Monday") $days[] = "M";
                                        elseif ($day == "Tuesday") $days[] = "T";
                                        elseif ($day == "Wednesday") $days[] = "W";
                                        elseif ($day == "Thursday") $days[] = "Th";
                                        elseif ($day == "Friday") $days[] = "F";
                                        elseif ($day == "Saturday") $days[] = "Sa";
                                    }
                                }
                            }
                            $o['preferred_days_of_the_week_array'] = ($o['preferred_days_of_the_week'] != "") ? $days : [];
                            $o['preferred_days_of_the_week_string'] = ($o['preferred_days_of_the_week'] != "") ? implode(",", $days) : "";
                            $o['offered_at'] = (isset($off->created_at) && $off->created_at != "") ? date('D h:i A', strtotime($off->created_at)) : date('D h:i A');

                            /* rating */
                            $nurse_rating_info = NurseRating::where(['nurse_id' => $off->nurse_id, 'status' => '1', 'is_deleted' => '0']);
                            $overall = [];
                            $rating_flag = "0";
                            if ($nurse_rating_info->count() > 0) {
                                $rating_flag = "1";
                                foreach ($nurse_rating_info->get() as $key => $r) {
                                    $overall[] = $r->overall;
                                }
                            }
                            $rating = $this->ratingCalculation(count($overall), $overall);
                            /* rating */

                            if ($type == "active" || $type == "completed") {
                                $o['start_date'] = date('d F Y', strtotime($off->job->start_date));
                            }
                            if ($type == "completed") {
                                $o['end_date'] = date('d F Y', strtotime($off->job->end_date));
                            }

                            if (($type == "completed") && ($off->job->end_date < date('Y-m-d'))) {
                                $o['rating_flag'] = $rating_flag;
                                $o['rating'] = $rating;
                                $o['ck_end'] = $off->job->end_date;
                                $offered['data'][] = $o;
                            } elseif (($type == "active") && ($off->job->end_date >= date('Y-m-d'))) {
                                $offered['data'][] = $o;
                            } elseif ($type == "list") {
                                $offered['data'][] = $o;
                            }
                        }
                    }

                    $this->check = "1";
                    $this->message = "Job offered listed successfully";
                    $this->return_data = $offered;
                } else {
                    $this->message = "Currently nothing " . $type;
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function facilityPostedJobs($type, Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            /*  dropdown data's */
            $user_info = USER::where(['id' => $request->user_id])->get();
            if ($user_info->count() > 0) {
                $user = $user_info->first();

                // $page = (isset($request->page_number) && $request->page_number != "") ? $request->page_number : "1";
                /* if ($type == "active")  $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Active'];
                elseif ($type == "completed") $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Completed'];
                else $where = ['active' => '1', 'created_by' => $user->id, 'status' => 'Pending']; */

                $limit = 25;
                $whereCond = ['active' => '1', 'created_by' => $user->id];
                $ret = Job::where($whereCond)
                    ->orderBy('created_at', 'desc');
                $jobs_info = $ret->get();
                // $jobs_info = $ret->paginate($limit);


                $tot_res = 0;
                $my_jobs['data'] = [];
                if ($jobs_info->count() > 0) {
                    foreach ($jobs_info as $key => $job) {
                        /* $o['creator'] = $job->creator;
                        $o['nurse'] = $job->nurse;
                        $o['job'] = $job->job; */

                        $o['job_id'] = (isset($job->id) && $job->id != "") ? $job->id : "";
                        $o['facility_first_name'] = (isset($job->creator->first_name) && $job->creator->first_name != "") ? $job->creator->first_name : "";
                        $o['facility_last_name'] = (isset($job->creator->last_name) && $job->creator->last_name != "") ? $job->creator->last_name : "";
                        // $o['faci'] = $job->facility;
                        $o['facility_image'] = (isset($job->facility->facility_logo) && $job->facility->facility_logo != "") ? url('public/images/facilities/' . $job->facility->facility_logo) : "";

                        $o['preferred_shift'] = (isset($job->preferred_shift) && $job->preferred_shift != "") ? strval($job->preferred_shift) : "";
                        $o['preferred_shift_definition'] = (isset($job->preferred_shift) && $job->preferred_shift != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_shift) : "";
                        $o['preferred_specialty'] = (isset($job->preferred_specialty) && $job->preferred_specialty != "") ? strval($job->preferred_specialty) : "";
                        $o['preferred_specialty_definition'] = (isset($specialties[$job->preferred_specialty]) && $specialties[$job->preferred_specialty] != "") ? $specialties[$job->preferred_specialty] : "";
                        $o['preferred_assignment_duration'] = (isset($job->preferred_assignment_duration) && $job->preferred_assignment_duration != "") ? strval($job->preferred_assignment_duration) : "0";
                        $o['preferred_assignment_duration_definition'] = (isset($assignmentDurations[$job->preferred_assignment_duration]) && $assignmentDurations[$job->preferred_assignment_duration] != "") ? $assignmentDurations[$job->preferred_assignment_duration] : "0";
                        if(isset($o['preferred_assignment_duration_definition'])){
                            $assignment = explode(" ", $assignmentDurations[$job->preferred_assignment_duration]);
                            $o['preferred_assignment_duration_definition'] = $assignment[0]; // 12 Week
                        }
                        $o['preferred_hourly_pay_rate'] = (isset($job->preferred_hourly_pay_rate) && $job->preferred_hourly_pay_rate != "") ? strval($job->preferred_hourly_pay_rate) : "0";
                        $o['preferred_days_of_the_week'] = (isset($job->preferred_days_of_the_week) && $job->preferred_days_of_the_week != "") ? $job->preferred_days_of_the_week : "";
                        $days = [];
                        if (isset($job->preferred_days_of_the_week)) {
                            $day_s = explode(",", $job->preferred_days_of_the_week);
                            if (is_array($day_s) && !empty($day_s)) {
                                foreach ($day_s as $day) {
                                    if ($day == "Sunday") $days[] = "Su";
                                    elseif ($day == "Monday") $days[] = "M";
                                    elseif ($day == "Tuesday") $days[] = "T";
                                    elseif ($day == "Wednesday") $days[] = "W";
                                    elseif ($day == "Thursday") $days[] = "Th";
                                    elseif ($day == "Friday") $days[] = "F";
                                    elseif ($day == "Saturday") $days[] = "Sa";
                                }
                            }
                        }
                        $o['preferred_days_of_the_week_array'] = ($o['preferred_days_of_the_week'] != "") ? $days : [];
                        $o['preferred_days_of_the_week_string'] = ($o['preferred_days_of_the_week'] != "") ? implode(",", $days) : "";

                        $o['facility_id'] = (isset($job->facility_id) && $job->facility_id != "") ? $job->facility_id : "";

                        $o['seniority_level'] = (isset($job->seniority_level) && $job->seniority_level != "") ? $job->seniority_level : "";
                        $o['seniority_level_definition'] = (isset($job->seniority_level) && $job->seniority_level != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->seniority_level) : "";

                        $o['job_function'] = (isset($job->job_function) && $job->job_function != "") ? strval($job->job_function) : "";
                        $o['job_function_definition'] = (isset($job->job_function) && $job->job_function != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->job_function) : "";

                        $o['preferred_shift_duration'] = (isset($job->preferred_shift_duration) && $job->preferred_shift_duration != "") ? strval($job->preferred_shift_duration) : "";
                        $o['preferred_shift_duration_definition'] = (isset($job->preferred_shift_duration) && $job->preferred_shift_duration != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_shift_duration) : "";

                        $o['preferred_work_location'] = (isset($job->preferred_work_location) && $job->preferred_work_location != "") ? strval($job->preferred_work_location) : "";
                        $o['preferred_work_location_definition'] = (isset($job->preferred_work_location) && $job->preferred_work_location != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_work_location) : "";

                        $o['preferred_experience'] = (isset($job->preferred_experience) && $job->preferred_experience != "") ? strval($job->preferred_experience) : "";
                        $o['preferred_experience_definition'] = (isset($job->preferred_experience) && $job->preferred_experience != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_experience) : "";

                        $o['job_cerner_exp'] = (isset($job->job_cerner_exp) && $job->job_cerner_exp != "") ? strval($job->job_cerner_exp) : "";
                        $o['job_cerner_exp_definition'] = (isset($job->job_cerner_exp) && $job->job_cerner_exp != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->job_cerner_exp) : "";

                        $o['job_meditech_exp'] = (isset($job->job_meditech_exp) && $job->job_meditech_exp != "") ? strval($job->job_meditech_exp) : "";
                        $o['job_meditech_exp_definition'] = (isset($job->job_meditech_exp) && $job->job_meditech_exp != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->job_meditech_exp) : "";

                        $o['job_epic_exp'] = (isset($job->job_epic_exp) && $job->job_epic_exp != "") ? strval($job->job_epic_exp) : "";
                        $o['job_epic_exp_definition'] = (isset($job->job_epic_exp) && $job->job_epic_exp != "") ? \App\Providers\AppServiceProvider::keywordTitle($job->job_epic_exp) : "";

                        $o['job_other_exp'] = (isset($job->job_other_exp) && $job->job_other_exp != "") ? $job->job_other_exp : "";
                        $o['description'] = (isset($job->description) && $job->description != "") ? $job->description : "";
                        $o['responsibilities'] = (isset($job->responsibilities) && $job->responsibilities != "") ? $job->responsibilities : "";
                        $o['qualifications'] = (isset($job->qualifications) && $job->qualifications != "") ? $job->qualifications : "";
                        $o['job_video'] = (isset($job->job_video) && $job->job_video != "") ? $job->job_video : "";
                        $o['active'] = (isset($job->active) && $job->active != "") ? $job->active : "";

                        /* offered nurse id */
                        $o['offered_nurse_id'] = "";
                        if (isset($job->offers) && !empty($job->offers)) {
                            foreach ($job->offers as $key => $val) {
                                if (isset($val->status) && $val->status == "Active") {
                                    $o['offered_nurse_id'] = (isset($val->nurse_id) && $val->nurse_id != "") ? $val->nurse_id : "";
                                }
                            }
                        }

                        $comment = [];
                        if ($o['offered_nurse_id'] != "") {
                            $nurse_rating_info = NurseRating::where(['nurse_id' => $o['offered_nurse_id'], 'job_id' => $job->id]);
                            if ($nurse_rating_info->count() > 0) {
                                $facility_commented = $nurse_rating_info->first();
                                $comment['rating'] = (isset($facility_commented->overall) && $facility_commented->overall != "") ? $facility_commented->overall : "0";
                                $comment['experience'] = (isset($facility_commented->experience) && $facility_commented->experience != "") ? $facility_commented->experience : "";
                                $nurse_user_id = (isset($facility_commented->nurse->user_id) && $facility_commented->nurse->user_id != "") ? $facility_commented->nurse->user_id : "";
                                if ($nurse_user_id != "") {
                                    $nurse_user_info = User::where(['id' => $nurse_user_id]);
                                    if ($nurse_user_info->count() > 0) {
                                        $nui = $nurse_user_info->first();
                                        $comment['nurse_name'] = $nui->first_name . ' ' . $nui->last_name;
                                        $comment['nurse_image'] = (isset($nui->image) && $nui->image != "") ? url('public/images/nurses/profile/' . $nui->image) : "";

                                        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                                        if ($nui->image) {
                                            $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $nui->image);
                                            if ($t) {
                                                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $nui->image);
                                            }
                                        }
                                        $comment["nurse_image_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);
                                    }
                                }
                            }
                        }
                        $o['rating_comment'] = (!empty($comment)) ? $comment : (object)array();

                        /* offered nurse id */

                        /* job assets */
                        $job_uploads = [];
                        $job_assets = JobAsset::where(['active' => '1', 'job_id' => $job->id, "deleted_at" => NULL]);
                        if ($job_assets->count() > 0) {
                            foreach ($job_assets->get() as $key => $asset) {
                                $job_uploads[] = ['asset_id' => $asset->id, 'name' => url('storage/assets/jobs/' . $job->id . '/' . $asset->name)];
                            }
                        }
                        $o["job_photos"] = $job_uploads;
                        /* job assets */


                        if ($type == "posted") {
                            $count_applied = Follows::where(['job_id' => $job->id])->count();
                            $o['applied'] = strval($count_applied);
                        }

                        $o['start_date'] = date('d F Y', strtotime($job->start_date));
                        $o['end_date'] = date('d F Y', strtotime($job->end_date));

                        if ($type == "posted" && ((empty($job->offers[0])) || (isset($job->offers[0]->status) && $job->offers[0]->status == "Pending"))) {
                            if ($tot_res == 0) $tot_res += 1; //initialized first page`
                            $tot_res += 1;
                            $my_jobs['data'][] = $o;
                        } elseif ($type == "active" && (isset($job->offers[0]->status) && $job->offers[0]->status == "Active" && ($job->end_date >= date('Y-m-d')))) {
                            if ($tot_res == 0) $tot_res += 1; //initialized first page`
                            $tot_res += 1;
                            $my_jobs['data'][] = $o;
                        } elseif ($type == "completed" && (isset($job->offers[0]->status) && $job->offers[0]->status == "Active" && ($job->end_date < date('Y-m-d')))) {
                            if ($tot_res == 0) $tot_res += 1; //initialized first page`
                            $tot_res += 1;
                            $rating_info = NurseRating::where(['job_id' => $job->id]);
                            $o['rating_flag'] = ($rating_info->count() > 0) ? "1" : "0";
                            $my_jobs['data'][] = $o;
                        }
                    }

                    $this->check = "1";
                    $this->message = "Job offered listed successfully";
                } else {
                    $this->message = "Currently nothing " . $type;
                }
                $total_pages = ceil($tot_res / $limit);
                $my_jobs['total_pages_available'] =  strval($total_pages);
                $my_jobs["current_page"] = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : "1";
                $my_jobs['results_per_page'] = strval($limit);

                $this->return_data = $my_jobs;
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function apiJobsList(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'facility_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $jobs = [];
            $ret = Job::where('active', true)
                ->orderBy('created_at', 'desc');

            $ret->where('facility_id', $request->facility_id);

            $ids = [];
            $nurse = Nurse::where(['user_id' => $request->user_id])->first();
            if ($nurse->count() > 0) {
                if (isset($nurse->offers) && count($nurse->offers) > 0) {
                    $ids = $nurse->offers->whereNotNull('job_id')->pluck('id');
                }
            }
            $ret->whereDoesntHave('offers', function (Builder $query) use ($ids) {
                $query->whereIn('id', $ids);
            });
            $temp = $ret->get();
            foreach ($temp as $job) {
                $job_info = Job::where(['id' => $job->id, 'active' => '1']);
                $content = [];
                if ($job_info->count() > 0) {
                    $job = $job_info->first();
                    $content = [
                        'name' => $job->facility->name,
                        'location' => $job->facility->city . ', ' . $job->facility->state,
                        'specialty' => $job->preferred_specialty ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_specialty) : 'N/A',
                        'jobDetail' => [
                            'start_date' => $job->start_date ? date("jS F Y", strtotime($job->start_date)) : 'N/A',
                            'duration' => $job->preferred_assignment_duration ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_assignment_duration) : 'N/A',
                            'shift' => $job->preferred_shift_duration ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_shift_duration) : 'N/A',
                            'workdays' => $job->preferred_days_of_the_week ?: 'N/A',
                        ], 'terms' => '<p><strong>TERMS ACKNOWLEDGMENT</strong></p> <p>By clicking on the &ldquo;Make an Offer&rdquo; your facility agrees to pay the hourly bill rate reflected on the nurse&rsquo;s profile page per the terms established in the Nurseify vendor agreement</p> <p><strong>NEXT STEPS</strong></p> <ul> <li><strong>Webo User</strong>&nbsp;will have 48 hours to accept your booking request</li> <li>You will receive an email notice after the nurse accepts or rejects the request</li> <li>Assuming the nurse accepts, a Nurseify Consultant will contact you to coordinate onboarding logistics</li> <li>If the nurse rejects, we will provide additional nurses that may meet your need</li> <li>Contact us anytime at&nbsp;<a href="mailto:info@nurseify.app">info@nurseify.app</a></li> </ul>'
                    ];
                }

                $jobs[] = ['job_id' => $job->id, 'job' => $job->facility->name . ' - ' . \App\Providers\AppServiceProvider::keywordTitle($job->preferred_specialty), 'content' => $content];
            }

            if (!empty($jobs)) {
                $this->check = "1";
                $this->message = "Invite nurse for the jobs. Listed successfully";
                $this->return_data = $jobs;
            } else {
                $this->message = "No jobs available for this nurse";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function apiJobFacility(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $job_info = Job::where(['id' => $request->job_id, 'active' => '1']);
            if ($job_info->count() > 0) {
                $job = $job_info->first();
                $this->check = "1";
                $this->message = "Job information listed successfully";
                $this->return_data = [
                    'name' => $job->facility->name,
                    'location' => $job->facility->city . ', ' . $job->facility->state,
                    'specialty' => $job->preferred_specialty ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_specialty) : 'N/A',
                    'jobDetail' => [
                        'startdate' => $job->created_at ? date("jS F Y", strtotime($job->created_at)) : 'N/A',
                        'duration' => $job->preferred_assignment_duration ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_assignment_duration) : 'N/A',
                        'shift' => $job->preferred_shift_duration ? \App\Providers\AppServiceProvider::keywordTitle($job->preferred_shift_duration) : 'N/A',
                        'workdays' => $job->preferred_days_of_the_week ?: 'N/A',
                    ]
                ];
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function appliedNurses(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_exists = Follows::where([
                'status' => '1',
                'job_id' => $request->job_id,
            ]);

            if ($check_exists->count() > 0) {
                $nurses_applied = $check_exists->get();
                $response = [];
                foreach ($nurses_applied as $key => $applied) {
                    $data['nurse_user_id']  = (isset($applied->creator->id) && $applied->creator->id != "") ? $applied->creator->id : "";
                    $nurse_info = NURSE::where(['user_id' => $data['nurse_user_id']]);

                    $data['nurse_id'] = "";
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();
                        $data['nurse_id'] = $nurse->id;
                    }
                    $fname = (isset($applied->creator->first_name) && $applied->creator->first_name != "") ? $applied->creator->first_name : "";
                    $lname = (isset($applied->creator->last_name) && $applied->creator->last_name != "") ? $applied->creator->last_name : "";
                    $data['name'] = $fname . ' ' . $lname;
                    $data['profile'] = (isset($applied->creator->image) && $applied->creator->image != "") ? url('public/images/nurses/profile/' . $applied->creator->image) : "";

                    $profileNurse = "";
                    if ($applied->creator->image) {
                        $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $applied->creator->image);
                        if ($t) {
                            $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $applied->creator->image);
                        }
                    }
                    $data["profile_base"] = ($profileNurse != "") ? 'data:image/jpeg;base64,' . base64_encode($profileNurse) : "";
                    /* rating */
                    $data['rating'] = "0";
                    $overall = [];
                    if ($data['nurse_id'] != "") {
                        $nurse_rating_info = NurseRating::where(['nurse_id' => $data['nurse_id'], 'status' => '1', 'is_deleted' => '0']);
                        if ($nurse_rating_info->count() > 0) {
                            foreach ($nurse_rating_info->get() as $key => $r) {
                                $overall[] = $r->overall;
                            }
                        }
                    }
                    $data['rating'] = $this->ratingCalculation(count($overall), $overall);
                    /* rating */

                    $response[] = $data;
                }
                if (!empty($response)) {
                    $this->check = "1";
                    $this->message = "Applied nurses listed successfully";
                    $this->return_data = $response;
                } else {
                    $this->message = "Nurse applied jobs looks empty";
                }
            } else {
                $this->message = "Nurse applied jobs looks empty";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function nurseRating(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'nurse_id' => 'required',
            'job_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('id', $request->nurse_id);
                if ($nurse_info->count() > 0) {
                    $nurse = $nurse_info->get()->first();
                    $insert_array['nurse_id'] = $nurse->id;
                    if (isset($request->job_id) && $request->job_id != "")
                        $insert_array['job_id'] = $request->job_id;
                    if (isset($request->overall) && $request->overall != "")
                        $update_array['overall'] = $insert_array['overall'] = $request->overall;
                    if (isset($request->clinical_skills) && $request->clinical_skills != "")
                        $update_array['clinical_skills'] = $insert_array['clinical_skills'] = $request->clinical_skills;
                    if (isset($request->nurse_teamwork) && $request->nurse_teamwork != "")
                        $update_array['nurse_teamwork'] = $insert_array['nurse_teamwork'] = $request->nurse_teamwork;
                    if (isset($request->interpersonal_skills) && $request->interpersonal_skills != "")
                        $update_array['interpersonal_skills'] = $insert_array['interpersonal_skills'] = $request->interpersonal_skills;
                    if (isset($request->work_ethic) && $request->work_ethic != "")
                        $update_array['work_ethic'] = $insert_array['work_ethic'] = $request->work_ethic;
                    if (isset($request->experience) && $request->experience != "")
                        $update_array['experience'] = $insert_array['experience'] = $request->experience;

                    $check_exists = NurseRating::where(['nurse_id' => $nurse->id, 'job_id' => $request->job_id]);
                    if ($check_exists->count() > 0) {
                        $rating_row = $check_exists->first();
                        $data = NurseRating::where(['id' => $rating_row->id])->update($update_array);
                    } else {
                        $data = NurseRating::create($insert_array);
                    }

                    if (isset($data) && $data == true) {
                        $this->check = "1";
                        $this->message = "Your rating is submitted successfully";
                    } else {
                        $this->message = "Failed to update ratings, Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            } else {
                $this->message = "User not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function settingsFacility(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'facility_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $facility_id = (isset($request->facility_id) && $request->facility_id != "") ? $request->facility_id : "";
            $facility_info = Facility::where(['id' => $facility_id, 'active' => '1']);
            if ($facility_info->count() > 0) {
                $facility = $facility_info->first();

                $return_data['facility_name'] = (isset($facility->name) && $facility->name != "") ? $facility->name : "";
                $return_data['address'] = (isset($facility->address) && $facility->address != "") ? $facility->address : "";
                $return_data['city'] = (isset($facility->city) && $facility->city != "") ? $facility->city : "";
                $return_data['state'] = (isset($facility->state) && $facility->state != "") ? $facility->state : "";
                $return_data['postcode'] = (isset($facility->postcode) && $facility->postcode != "") ? $facility->postcode : "";


                /* rating */
                $rating_info = FacilityRating::where(['facility_id' => $facility->id]);
                $overall = $on_board = $nurse_team_work = $leadership_support = $tools_todo_my_job = $a = [];
                if ($rating_info->count() > 0) {
                    foreach ($rating_info->get() as $key => $r) {
                        $overall[] = $r->overall;
                        $on_board[] = $r->on_board;
                        $nurse_team_work[] = $r->nurse_team_work;
                        $leadership_support[] = $r->leadership_support;
                        $tools_todo_my_job[] = $r->tools_todo_my_job;
                    }
                }
                $rating['over_all'] = $this->ratingCalculation(count($overall), $overall);
                $rating['on_board'] = $this->ratingCalculation(count($on_board), $on_board);
                $rating['nurse_team_work'] = $this->ratingCalculation(count($nurse_team_work), $nurse_team_work);
                $rating['leadership_support'] = $this->ratingCalculation(count($leadership_support), $leadership_support);
                $rating['tools_todo_my_job'] = $this->ratingCalculation(count($tools_todo_my_job), $tools_todo_my_job);
                $return_data["rating"] = $rating;
                /* rating */
                $return_data['review'] = strval($rating_info->count());
                $follow_count = FacilityFollows::where(['facility_id' => $facility->id])->count();
                $return_data['followers'] = strval($follow_count);

                $this->check = "1";
                $this->message = "Facility settings data listed successfully";
                $this->return_data = $return_data;
            } else {
                $this->message = "Facility not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function notificationFacility(Request $request)
    {

        $created_by = (isset($request->user_id) && $request->user_id != "") ? $request->user_id : "";

        $ret = Offer::whereIn('job_id', function ($query) use ($created_by) {
            $query->select('id')
                ->from(with(new Job)->getTable())
                // ->whereIn('category_id', ['223', '15'])
                ->where('created_by', $created_by)
                ->where('active', '1');
        })->where('is_view', false)
            ->where('expiration', '>=', date('m/d/Y H:i:s'))
            ->orderBy('created_at', 'desc');

        if ($ret->count() > 0) {
            $n = [];
            $notifications = $ret->get();
            foreach ($notifications as $notification) {
                $user = USER::where(['id' => $notification->nurse->user_id])->first();
                $n[] = [
                    "notification_id" => $notification->id, "message" => "You have sent a new offer to " . $user->first_name . ' ' . $user->last_name . " that matches your <b style='color:#2BE3BD'> " . \App\Providers\AppServiceProvider::keywordTitle($notification->job->preferred_specialty) . " </b> job assignment preference and or profile."
                ];
            }
            $this->check = "1";
            $this->message = "Notifications has been listed successfully";
            $this->return_data = $n;
        } else {
            $this->check = "1";
            $this->message = "Currently there are no notifications";
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function userImages(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_ids' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_ids = (isset($request->user_ids) && $request->user_ids != "") ? $request->user_ids : "";
            if ($user_ids != "") {
                $user_id = explode(",", $user_ids);
                if (is_array($user_id) && !empty($user_id)) {
                    $user_info = User::whereIn('id', $user_id);
                    if ($user_info->count() > 0) {
                        $users = $user_info->get();
                        $a = [];
                        foreach ($users as $key => $u) {
                            if ($u->role == "NURSE") {
                                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                                if ($u->image) {
                                    $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $u->image);
                                    if ($t) {
                                        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $u->image);
                                    }
                                }

                                $a[] = ['id' => $u->id, 'image' => 'data:image/jpeg;base64,' . base64_encode($profileNurse)];
                            } elseif ($u->role == "FACILITYADMIN") {
                                $facility_logo = "";
                                if ($u->facilities[0]->facility_logo) {
                                    $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/facility_logo/' . $u->facilities[0]->facility_logo);
                                    if ($t) {
                                        $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/facilities/facility_logo/' . $u->facilities[0]->facility_logo);
                                    }
                                }
                                $facility_logo_base = ($facility_logo != "") ? 'data:image/jpeg;base64,' . base64_encode($facility_logo) : "";

                                $a[] = ['id' => $u->id, 'image' => $facility_logo_base];
                            }
                        }

                        $this->check = "1";
                        $this->message = "Users images listed successfully";
                        $this->return_data = $a;
                    } else {
                        $this->message = "No users found";
                    }
                } else {
                    $this->message = "Input error";
                }
            } else {
                $this->message = "User ids looks empty";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getSearchStatusOptions()
    {
        $jobFunctions = $this->getSearchStatus()->pluck('title', 'id');
        $data = [];
        foreach ($jobFunctions as $key => $value) {
            $data[] = ['id' => strval($key), "name" => $value];
        }
        $this->check = "1";
        $this->message = "Search statuses has been listed successfully";
        $this->return_data = $data;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getLicenseTypeOptions()
    {
        // $jobFunctions = $this->getLicenseType()->pluck('title', 'id');
        // $data = [];
        // foreach ($jobFunctions as $key => $value) {
        //     $data[] = ['id' => strval($key), "name" => $value];
        // }
        $controller = new Controller();
        $charting = Keyword::where('filter', 'LicenseType')->get()->pluck('title', 'id');
        $spl = [];
        if (!empty($charting)) {
            foreach ($charting as $key => $val) {
                $spl[] = ['id' => $key, 'name' => $val];
            }
        }
        $this->check = "1";
        $this->message = "Nurse license type has been listed successfully";
        $this->return_data = $spl;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getLicenseStatusOptions()
    {
        $jobFunctions = $this->getLicenseStatus()->pluck('title', 'id');
        $data = [];
        foreach ($jobFunctions as $key => $value) {
            $data[] = ['id' => strval($key), "name" => $value];
        }
        $this->check = "1";
        $this->message = "Nurse license type has been listed successfully";
        $this->return_data = $data;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function addUserActivity(Request $request){
        // echo $request->user_id;exit;
        // print_r($request->all());exit;
        if (
            isset($request->user_id) && $request->user_id != "" &&
            isset($request->activity_type) && $request->activity_type != "" &&
            isset($request->ip) && $request->ip != "" &&
            isset($request->device_type) && $request->device_type != ""
        ) {

                $insert = array(
                    "user_id" => $request->user_id,
                    'activity_type' => $request->activity_type,
                    'ip' => $request->ip,
                    'device_type' => $request->device_type,
                    'device_company' => $request->device_company,
                    'device_version' => $request->device_version,
                    'device_location' => $request->device_location,
                    'device_lat' => $request->device_lat,
                    'device_lang' => $request->device_lang
                );
                \DB::table('user_activity')->insert($insert);
            
                $this->check = "1";
                $this->message = "User activity has been added successfully";
                $this->return_data = $insert;
             
        } else {
            $this->message = $this->param_missing;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getAvailability(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'nurse_id' => 'required',
            'month' => 'required',
            'year' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            $availability = Availability::where('nurse_id', '=', $request->nurse_id)->get()->first();

            $unavailable_dates = explode(',',$availability->unavailable_dates);

            $unavailable_datesArr['unavailable_dates'] = array();
            foreach($unavailable_dates as $row){
                $month = date('m',strtotime($row));
                $year = date('Y',strtotime($row));

                if($request->month == $month && $request->year == $year){
                    array_push($unavailable_datesArr['unavailable_dates'], $row);
                }
            }

            if ($unavailable_datesArr) {
                // $user = $user_info->first();
                $this->check = "1";
                $this->message = "Unavailable dates listed successfully";
                $this->return_data = $unavailable_datesArr;
            } else {
                $this->message = "Data not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
   


    }

    public function explore_jobData($jobdata, $user_id = "")
    {
        $result = [];
        if (!empty($jobdata)) {
            $controller = new Controller();
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $shifts = $this->getShifts()->pluck('title', 'id');
            $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
            $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
            $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
            $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
            $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
            $weekDays = $this->getWeekDayOptions();

            foreach ($jobdata as $key => $job) 
            {    
                $j_data["keyword_id"] = isset($job->keyword_id) ? $job->keyword_id : "";
                $j_data["job_title"] = isset($job->job_title) ? $job->job_title : "";
                $j_data["job_filter"] = isset($job->job_filter) ? $job->job_filter : "";
                $j_data["offer_id"] = isset($job->offer_id) ? $job->offer_id : "";
                $j_data["job_id"] = isset($job->job_id) ? $job->job_id : "";
                $j_data["job_type"] = isset($job->job_type) ? $job->job_type : "";
                $j_data["type"] = isset($job->type) ? $job->type : "";
                $j_data["job_name"] = isset($job->job_name) ? $job->job_name : "";
                $j_data["job_location"] = isset($job->job_location) ? $job->job_location : "";
                $j_data["employer_weekly_amount"] = isset($job->employer_weekly_amount) ? $job->employer_weekly_amount : "";
                $j_data["weekly_pay"] = isset($job->weekly_pay) ? $job->weekly_pay : "";
                $j_data["hours_per_week"] = isset($job->hours_per_week) ? $job->hours_per_week : "";

                $j_data["preferred_specialty"] = isset($job->preferred_specialty) ? $job->preferred_specialty : "";
                $j_data["preferred_specialty_definition"] = isset($specialties[$job->preferred_specialty])  ? $specialties[$job->preferred_specialty] : "";
                
                $j_data["preferred_assignment_duration"] = isset($job->preferred_assignment_duration) ? $job->preferred_assignment_duration : "";
                $j_data["preferred_assignment_duration_definition"] = isset($assignmentDurations[$job->preferred_assignment_duration]) ? $assignmentDurations[$job->preferred_assignment_duration] : "";
                
                $j_data["preferred_shift"] = isset($job->preferred_shift) ? $job->preferred_shift : "";
                $j_data["preferred_shift_duration"] = isset($job->preferred_shift_duration) ? $job->preferred_shift_duration : "";
                $j_data["preferred_shift_duration_definition"] = isset($shifts[$job->preferred_shift_duration]) ? $shifts[$job->preferred_shift_duration] : "";

                $j_data["preferred_work_location"] = isset($job->preferred_work_location) ? $job->preferred_work_location : "";
                $j_data["preferred_work_location_definition"] = isset($workLocations[$job->preferred_work_location]) ? $workLocations[$job->preferred_work_location] : "";
                
                $j_data["preferred_work_area"] = isset($job->preferred_work_area) ? $job->preferred_work_area : "";
                $j_data["preferred_days_of_the_week"] = isset($job->preferred_days_of_the_week) ? explode(",", $job->preferred_days_of_the_week) : [];
                $j_data["preferred_hourly_pay_rate"] = isset($job->preferred_hourly_pay_rate) ? $job->preferred_hourly_pay_rate : "";
                $j_data["preferred_experience"] = isset($job->preferred_experience) ? $job->preferred_experience : "";
                $j_data["description"] = isset($job->description) ? $job->description : "";
                $j_data["created_at"] = isset($job->created_at) ? date('d-F-Y h:i A', strtotime($job->created_at)) : "";
                $j_data["created_at_definition"] = isset($job->created_at) ? "Posted " . $this->timeAgo(date(strtotime($job->created_at))) : "";
                $j_data["updated_at"] = isset($job->updated_at) ? date('d F Y', strtotime($job->updated_at)) : "";
                $j_data["deleted_at"] = isset($job->deleted_at) ? date('d-F-Y h:i A', strtotime($job->deleted_at)) : "";
                $j_data["created_by"] = isset($job->created_by) ? $job->created_by : "";
                $j_data["slug"] = isset($job->slug) ? $job->slug : "";
                $j_data["active"] = isset($job->active) ? $job->active : "";
                $j_data["facility_id"] = isset($job->facility_id) ? $job->facility_id : "";
                $j_data["job_video"] = isset($job->job_video) ? $job->job_video : "";

                $j_data["seniority_level"] = isset($job->seniority_level) ? $job->seniority_level : "";
                $j_data["seniority_level_definition"] = isset($seniorityLevels[$job->seniority_level]) ? $seniorityLevels[$job->seniority_level] : "";
                
                $j_data["job_function"] = isset($job->job_function) ? $job->job_function : "";
                $j_data["job_function_definition"] = isset($jobFunctions[$job->job_function]) ? $jobFunctions[$job->job_function] : "";

                $j_data["responsibilities"] = isset($job->responsibilities) ? $job->responsibilities : "";
                $j_data["qualifications"] = isset($job->qualifications) ? $job->qualifications : "";

                $j_data["job_cerner_exp"] = isset($job->job_cerner_exp) ? $job->job_cerner_exp : "";
                $j_data["job_cerner_exp_definition"] = isset($ehrProficienciesExp[$job->job_cerner_exp]) ? $ehrProficienciesExp[$job->job_cerner_exp] : "";

                $j_data["job_meditech_exp"] = isset($job->job_meditech_exp) ? $job->job_meditech_exp : "";
                $j_data["job_meditech_exp_definition"] = isset($ehrProficienciesExp[$job->job_meditech_exp]) ? $ehrProficienciesExp[$job->job_meditech_exp] : "";

                $j_data["job_epic_exp"] = isset($job->job_epic_exp) ? $job->job_epic_exp : "";
                $j_data["job_epic_exp_definition"] = isset($ehrProficienciesExp[$job->job_epic_exp]) ? $ehrProficienciesExp[$job->job_epic_exp] : "";
                
                $j_data["job_other_exp"] = isset($job->job_other_exp) ? $job->job_other_exp : "";
                // $j_data["job_photos"] = isset($job->job_photos) ? $job->job_photos : "";
                $j_data["video_embed_url"] = isset($job->video_embed_url) ? $job->video_embed_url : "";
                $j_data["is_open"] = isset($job->is_open) ? $job->is_open : "";
                $j_data["name"] = isset($job->facility->name) ? $job->facility->name : "";
                $j_data["address"] = isset($job->facility->address) ? $job->facility->address : "";
                $j_data["city"] = isset($job->facility->city) ? $job->facility->city : "";
                $j_data["state"] = isset($job->facility->state) ? $job->facility->state : "";
                $j_data["postcode"] = isset($job->facility->postcode) ? $job->facility->postcode : "";
                $j_data["type"] = isset($job->facility->type) ? $job->facility->type : "";

                $j_data["facility_logo"] = isset($job->facility->facility_logo) ? url("public/images/facilities/" . $job->facility->facility_logo) : "";
         
                $j_data["facility_email"] = isset($job->facility->facility_email) ? $job->facility->facility_email : "";
                $j_data["facility_phone"] = isset($job->facility->facility_phone) ? $job->facility->facility_phone : "";
                $j_data["specialty_need"] = isset($job->facility->specialty_need) ? $job->facility->specialty_need : "";
                $j_data["cno_message"] = isset($job->facility->cno_message) ? $job->facility->cno_message : "";

                $j_data["cno_image"] = isset($job->facility->cno_image) ? url("public/images/facilities/cno_image".$job->facility->cno_image) : "";
                // $cno_image = "";
                // if ($job->facility->cno_image) {
                //     $t = \Illuminate\Support\Facades\Storage::exists('assets/facilities/cno_image/' . $job->facility->cno_image);
                //     if ($t) {
                //         $cno_image = \Illuminate\Support\Facades\Storage::get('assets/facilities/cno_image/' . $job->facility->cno_image);
                //     }
                // }
                // $j_data["cno_image_base"] = ($cno_image != "") ? 'data:image/jpeg;base64,' . base64_encode($cno_image) : "";

                $j_data["gallary_images"] = isset($job->facility->gallary_images) ? $job->facility->gallary_images : "";
                $j_data["video"] = isset($job->facility->video) ? $job->facility->video : "";
                $j_data["facebook"] = isset($job->facility->facebook) ? $job->facility->facebook : "";
                $j_data["twitter"] = isset($job->facility->twitter) ? $job->facility->twitter : "";
                $j_data["linkedin"] = isset($job->facility->linkedin) ? $job->facility->linkedin : "";
                $j_data["instagram"] = isset($job->facility->instagram) ? $job->facility->instagram : "";
                $j_data["pinterest"] = isset($job->facility->pinterest) ? $job->facility->pinterest : "";
                $j_data["tiktok"] = isset($job->facility->tiktok) ? $job->facility->tiktok : "";
                $j_data["sanpchat"] = isset($job->facility->sanpchat) ? $job->facility->sanpchat : "";
                $j_data["youtube"] = isset($job->facility->youtube) ? $job->facility->youtube : "";
                $j_data["about_facility"] = isset($job->facility->about_facility) ? $job->facility->about_facility : "";
                $j_data["facility_website"] = isset($job->facility->facility_website) ? $job->facility->facility_website : "";
                $j_data["f_lat"] = isset($job->facility->f_lat) ? $job->facility->f_lat : "";
                $j_data["f_lang"] = isset($job->facility->f_lang) ? $job->facility->f_lang : "";
                $j_data["f_emr"] = isset($job->facility->f_emr) ? $job->facility->f_emr : "";
                $j_data["f_emr_other"] = isset($job->facility->f_emr_other) ? $job->facility->f_emr_other : "";
                $j_data["f_bcheck_provider"] = isset($job->facility->f_bcheck_provider) ? $job->facility->f_bcheck_provider : "";
                $j_data["f_bcheck_provider_other"] = isset($job->facility->f_bcheck_provider_other) ? $job->facility->f_bcheck_provider_other : "";
                $j_data["nurse_cred_soft"] = isset($job->facility->nurse_cred_soft) ? $job->facility->nurse_cred_soft : "";
                $j_data["nurse_cred_soft_other"] = isset($job->facility->nurse_cred_soft_other) ? $job->facility->nurse_cred_soft_other : "";
                $j_data["nurse_scheduling_sys"] = isset($job->facility->nurse_scheduling_sys) ? $job->facility->nurse_scheduling_sys : "";
                $j_data["nurse_scheduling_sys_other"] = isset($job->facility->nurse_scheduling_sys_other) ? $job->facility->nurse_scheduling_sys_other : "";
                $j_data["time_attend_sys"] = isset($job->facility->time_attend_sys) ? $job->facility->time_attend_sys : "";
                $j_data["time_attend_sys_other"] = isset($job->facility->time_attend_sys_other) ? $job->facility->time_attend_sys_other : "";
                $j_data["licensed_beds"] = isset($job->facility->licensed_beds) ? $job->facility->licensed_beds : "";
                $j_data["trauma_designation"] = isset($job->facility->trauma_designation) ? $job->facility->trauma_designation : "";
                
                /* total applied */
                $total_follow_count = Follows::where(['job_id' => $job->job_id, "applied_status" => "1", 'status' => "1"])->count();
                $j_data["total_applied"] = strval($total_follow_count);
                /* total applied */

                /* liked */
                $is_applied = "0";
                if ($user_id != "")
                    $is_applied = Follows::where(['job_id' => $job->job_id, "applied_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                /* liked */
                $j_data["is_applied"] = strval($is_applied);

                /* liked */
                $is_liked = "0";
                if ($user_id != "")
                    $is_liked = Follows::where(['job_id' => $job->job_id, "like_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                /* liked */
                $j_data["is_liked"] = strval($is_liked);

                $j_data["shift"] = "Days";
                $j_data["start_date"] = date('d F Y', strtotime($job->start_date));

                $j_data['applied_nurses'] = '0';
                $applied_nurses = Offer::where(['job_id' => $job->job_id, 'status'=>'Apply'])->count();
                $j_data['applied_nurses'] = strval($applied_nurses);


                $is_saved = '0';
                if ($user_id != ""){
                    $nurse_info = NURSE::where('user_id', $user_id);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();

                        $whereCond = [
                            // 'job_saved.nurse_id' => $nurse->id,
                            'job_saved.nurse_id' => $nurse->user_id,
                            'job_saved.job_id' => $job->job_id,
                        ];
        
                        $limit = 10;
                        $saveret = \DB::table('job_saved')
                        ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                        ->where($whereCond);

                        if ($saveret->count() > 0) {
                            $is_saved = 1;
                        }



                        $whereCond1 = [
                            'facilities.active' => true,
                            // 'jobs.is_open' => "1",
                            'offers.status' => 'Offered',
                            'offers.nurse_id' => $nurse->id
                        ];
    
                        $ret = Job::select('jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            ->where($whereCond1)
                            ->orderBy('offers.created_at', 'desc');
                    
    
                        // $job_data = $ret->paginate(10);
                        $job_data = $ret->get();
    
                        $j_data['nurses_applied'] = $this->explore_jobData($job_data, $user_id);
                    }
                }
                $j_data["is_saved"] = $is_saved;

                $j_data["popular_jobs"] = array();
                
                if ($user_id != ""){
                    $whereCond = [
                        'facilities.active' => true,
                        'jobs.job_type' => $j_data["keyword_id"],
                        'jobs.is_open' => "1",
                    ];

                    // $ret = Job::select('jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                    //     ->leftJoin('facilities', function ($join) {
                    //         $join->on('facilities.id', '=', 'jobs.facility_id');
                    //     })
                    //     ->leftJoin('offers', function ($join) {
                    //         $join->on('offers.job_id', '=', 'jobs.id');
                    //     })
                    //     ->where($whereCond)
                    //     ->orderBy('jobs.created_at', 'desc');
                    $ret = DB::table('jobs')
                                ->leftJoin('facilities', 'facilities.id', '=', 'jobs.facility_id')
                                ->select('jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                                ->where($whereCond)
                                ->orderBy('jobs.created_at', 'desc');

                    $job_data = $ret->get();
                    // $job_data = $ret->paginate(10);

                    $j_data['popular_jobs'] = $this->jobData($job_data);
                    $num = 0;
                    foreach($j_data['popular_jobs'] as $rec){
                        $j_data['popular_jobs'][$num]['description'] = strip_tags($rec['description']);
                        $j_data['popular_jobs'][$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                        $j_data['popular_jobs'][$num]['qualifications'] = strip_tags($rec['qualifications']);
                        $j_data['popular_jobs'][$num]['cno_message'] = strip_tags($rec['cno_message']);
                        $j_data['popular_jobs'][$num]['about_facility'] = strip_tags($rec['about_facility']);
                        $num++;
                    }
                }
                $result[] = $j_data;
            }
        }
        return $result;
    }

    public function explore(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $controller = new Controller();
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            
            $user_info = USER::where('id', $request->user_id);

            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $result = array();
                    $check_data = array();
                    $nurse = $nurse_info->get()->first();

                    $whereCond = [
                        'facilities.active' => true,
                        'jobs.is_open' => "1",
                    ];

                    $ret = DB::table('jobs')
                            ->leftJoin('facilities', 'facilities.id', '=', 'jobs.facility_id')
                            ->leftJoin('keywords', 'keywords.id', '=', 'jobs.job_type')
                            ->leftJoin('job_saved', 'job_saved.job_id', '=', 'jobs.id')
                            ->select('keywords.id as keyword_id','keywords.title as job_title','keywords.filter as job_filter', 'jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                            ->where($whereCond)
                            ->orderBy('jobs.created_at', 'desc')->distinct('jobs.id');
                    $job_data = $ret->get();
                    // $job_data = $ret->paginate(10);
                    
                    // $result['popular_jobs'] = $this->explore_jobData($job_data, $request->user_id);
                    $check_data['popular_jobs'] = $this->explore_jobData($job_data, $request->user_id);
                    foreach($check_data['popular_jobs'] as $check_rec){
                        $is_delete = DB::table('job_saved')->where(['job_id' => $check_rec['job_id'], 'nurse_id' => $request->user_id, 'is_delete' => '1'])->first();
                        if(empty($is_delete)){
                            $result['popular_jobs'][] = $check_rec;
                        }
                    }
                    
                    $n_c = 0;
                    foreach($result['popular_jobs'] as $rec){
                        $result['popular_jobs'][$n_c]['description'] = strip_tags($rec['description']);
                        $result['popular_jobs'][$n_c]['responsibilities'] = strip_tags($rec['responsibilities']);
                        $result['popular_jobs'][$n_c]['qualifications'] = strip_tags($rec['qualifications']);
                        $result['popular_jobs'][$n_c]['cno_message'] = strip_tags($rec['cno_message']);
                        $result['popular_jobs'][$n_c]['about_facility'] = strip_tags($rec['about_facility']);
                        $n_c++;
                    }

                    // skip is_applied rrecord
                    $data = [];
                    foreach($result['popular_jobs'] as $val){
                        if($val['is_applied'] != '0'){
                            continue;
                        }
                        // print_r($val['is_applied']);
                        $data['popular_jobs'][] = $val;
                    }
                    // end skip code
                    
                    $whereCond1 = [
                        'facilities.active' => true,
                        'jobs.is_open' => "1",
                        'jobs.preferred_specialty' => $nurse->specialty
                    ];

                    $ret1 = Job::select('keywords.id as keyword_id','keywords.title as job_title','keywords.filter as job_filter','jobs.id as job_id', 'jobs.job_type as job_type', 'jobs.*')
                        ->leftJoin('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                        ->leftJoin('keywords', function ($join) {
                            $join->on('keywords.id', '=', 'jobs.job_type');
                        })
                        ->leftJoin('job_saved', function ($join) {
                            $join->on('job_saved.job_id', '=', 'jobs.id');
                        })
                        ->where($whereCond1)
                        ->orderBy('jobs.created_at', 'desc')->distinct('jobs.id');
                    $job_data1 = $ret1->get();
                    // $job_data1 = $ret1->paginate(10);

                    $result['recommended_jobs'] = $this->explore_jobData($job_data1, $request->user_id);
                        
                    // skip is_applied rrecord
                    if($result['recommended_jobs']){
                        foreach($result['recommended_jobs'] as $val){
                            if($val['is_applied'] != '0'){
                                continue;
                            }
                            // print_r($val['is_applied']);
                            $data['recommended_jobs'][] = $val;
                        }
                    }
                    // end skip code
                    
                    // Recently added jobs
                    $whereCond2 = [
                        'facilities.active' => true,
                        'jobs.is_open' => "1",
                    ];

                    $ret2 = Job::select('keywords.id as keyword_id','keywords.title as job_title','keywords.filter as job_filter','jobs.id as job_id', 'jobs.job_type as job_type', 'jobs.*')
                        ->leftJoin('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                        ->leftJoin('keywords', function ($join) {
                            $join->on('keywords.id', '=', 'jobs.job_type');
                        })
                        ->leftJoin('job_saved', function ($join) {
                            $join->on('job_saved.job_id', '=', 'jobs.id');
                        })
                        ->where($whereCond2)
                        ->orderBy('jobs.created_at', 'desc')->distinct('jobs.id')->limit(3);
                

                    $job_data2 = $ret2->get();
                    // $job_data2 = $ret2->paginate(10);

                    $result['recently_added'] = $this->explore_jobData($job_data2, $request->user_id);
                        
                    // skip is_applied rrecord
                    if($result['recently_added']){
                        foreach($result['recently_added'] as $val){
                            if($val['is_applied'] != '0'){
                                continue;
                            }
                            // print_r($val['is_applied']);
                            $data['recently_added'][] = $val;
                        }
                    }
                    
                    // end skip code

                    $this->check = "1";
                    $this->message = "Jobs listed successfully";
                    $this->return_data = $data;
                    // $this->return_data = $result;

                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }

            }else{
                $this->check = "1";
                $this->message = "User not exist";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);    
    }


    public function saveJob(Request $request)
    {
        if (
            isset($request->nurse_id) && $request->nurse_id != "" &&
            isset($request->job_id) && $request->job_id != "" &&
            isset($request->api_key) && $request->api_key != "" 
        ) {
            if(!empty($request->role)){
                $record = NURSE::where(['id' => $request->nurse_id])->get()->first();
                $nurse_id = $record->user_id;
                $user_id = $record->user_id;
            }else{
                $nurse_id = $request->nurse_id;
                $user_id = $request->nurse_id;
            }

            $whereCond = [
                'nurse_id' => $nurse_id,
                'job_id' => $request->job_id
            ];

            $check = DB::table('job_saved')->where($whereCond)->first();

            if($check){
                // $this->message = "Job already exist";
                // DB::table('job_saved')->insert($insert);
                DB::table('job_saved')->where('id', $check->id)->delete();

                $this->check = "1";
                $this->message = "Remove saved job successfully";
            }else{
                $insert = array(
                    "nurse_id" => $nurse_id,
                    'job_id' => $request->job_id,
                    'is_save' => '1',
                    'is_delete' => '0',
                );
                DB::table('job_saved')->insert($insert);

                $this->check = "1";
                $this->message = "Job added to saved list successfully";
            }

        } else {
            $this->message = $this->param_missing;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function removesavedJob(Request $request)
    {
        if (
            isset($request->nurse_id) && $request->nurse_id != "" &&
            isset($request->job_id) && $request->job_id != "" &&
            isset($request->api_key) && $request->api_key != "" 
        ) {
            $nurse = Nurse::where('id', '=', $request->nurse_id)->first();

            $product = \DB::table('job_saved')->where('nurse_id', $nurse->user_id)->where('job_id', $request->job_id)->first();
  
            if (!is_null($product)) {
                \DB::table('job_saved')->where('nurse_id', $nurse->user_id)->where('job_id', $request->job_id)->update(['is_delete' => '1']);
            }else{
                $insert = array(
                    "nurse_id" => $nurse->user_id,
                    'job_id' => $request->job_id,
                    'is_save' => '0',
                    'is_delete' => '1'
                );
                DB::table('job_saved')->insert($insert);
            }
            $check = \DB::table('job_saved')->where('nurse_id', $nurse->user_id)->where('job_id', $request->job_id)->first();
            if($check){
                $this->check = "1";
                $this->message = "Data removed successfully";
            }else{
                $this->message = "Data not found";
            }
             
        } else {
            $this->message = $this->param_missing;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function save_jobData($jobdata, $user_id = "")
    {
        $result = [];
        if (!empty($jobdata)) {
            $controller = new Controller();
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $shifts = $this->getShifts()->pluck('title', 'id');
            $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
            $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
            $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
            $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
            $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
            $weekDays = $this->getWeekDayOptions();

            foreach ($jobdata as $key => $job) {

                $j_data["offer_id"] = isset($job['offer_id']) ? $job['offer_id'] : "";
                $j_data["job_id"] = isset($job['job_id']) ? $job['job_id'] : "";
                $j_data["job_type"] = isset($job['job_type']) ? $job['job_type'] : "";
                $j_data["job_city"] = isset($job['job_city']) ? $job['job_city'] : "";
                $j_data["job_state"] = isset($job['job_state']) ? $job['job_state'] : "";
                $j_data["job_location"] = isset($job['job_location']) ? $job['job_location'] : "";
                $j_data["type"] = isset($job['type']) ? $job['type'] : "";
                $j_data["job_name"] = isset($job['job_name']) ? $job['job_name'] : "";
                $j_data["keyword_id"] = isset($job['keyword_id']) ? $job['keyword_id'] : "";
                
                // $j_data["job_location"] = isset($workLocations[$job->job_location]) ? $workLocations[$job->job_location] : "";
                $j_data["weekly_pay"] = isset($job['weekly_pay']) ? $job['weekly_pay'] : "";
                $j_data["employer_weekly_amount"] = isset($job['employer_weekly_amount']) ? $job['employer_weekly_amount'] : "";
                $j_data["hours_per_week"] = isset($job['hours_per_week']) ? $job['hours_per_week'] : 0;

                $j_data["preferred_shift"] = isset($job['preferred_shift']) ? $job['preferred_shift'] : "";
                $j_data["job_location"] = isset($job['job_location']) ? $job['job_location'] : "";
                $j_data["preferred_assignment_duration"] = isset($job['preferred_assignment_duration']) ? $job['preferred_assignment_duration'] : "";
                $j_data["preferred_work_area"] = isset($job['preferred_work_area']) ? $job['preferred_work_area'] : "";
                $j_data["preferred_days_of_the_week"] = isset($job['preferred_days_of_the_week']) ? explode(",", $job['preferred_days_of_the_week']) : [];
                $j_data["preferred_hourly_pay_rate"] = isset($job['preferred_hourly_pay_rate']) ? $job['preferred_hourly_pay_rate'] : "";
                $j_data["preferred_experience"] = isset($job['preferred_experience']) ? $job['preferred_experience'] : "";
                $j_data["description"] = isset($job['description']) ? $job['description'] : "";
                $j_data["created_at"] = isset($job['created_at']) ? date('d-F-Y h:i A', strtotime($job['created_at'])) : "";
                $j_data["created_at_definition"] = isset($job['created_at']) ? "Posted " . $this->timeAgo(date(strtotime($job['created_at']))) : "";
                $j_data["updated_at"] = isset($job->updated_at) ? date('d F Y', strtotime($job->updated_at)) : "";
                $j_data["deleted_at"] = isset($job->deleted_at) ? date('d-F-Y h:i A', strtotime($job->deleted_at)) : "";
                $j_data["created_by"] = isset($job->created_by) ? $job->created_by : "";
                $j_data["slug"] = isset($job['slug']) ? $job['slug'] : "";
                $j_data["active"] = isset($job['active']) ? $job['active'] : "";
                $j_data["facility_id"] = isset($job['facility_id']) ? $job['facility_id'] : "";
                $j_data["job_video"] = isset($job['job_video']) ? $job['job_video'] : "";

                $j_data["seniority_level"] = isset($job->seniority_level) ? $job->seniority_level : "";
                // $j_data["seniority_level_definition"] = isset($seniorityLevels[$job->seniority_level]) ? $seniorityLevels[$job->seniority_level] : "";

                $j_data["job_function"] = isset($job->job_function) ? $job->job_function : "";
                // $j_data["job_function_definition"] = isset($jobFunctions[$job->job_function]) ? $jobFunctions[$job->job_function] : "";

                $j_data["responsibilities"] = isset($job->responsibilities) ? $job->responsibilities : "";
                $j_data["qualifications"] = isset($job->qualifications) ? $job->qualifications : "";

                $j_data["job_cerner_exp"] = isset($job->job_cerner_exp) ? $job->job_cerner_exp : "";
                // $j_data["job_cerner_exp_definition"] = isset($ehrProficienciesExp[$job->job_cerner_exp]) ? $ehrProficienciesExp[$job->job_cerner_exp] : "";

                $j_data["job_meditech_exp"] = isset($job->job_meditech_exp) ? $job->job_meditech_exp : "";
                // $j_data["job_meditech_exp_definition"] = isset($ehrProficienciesExp[$job->job_meditech_exp]) ? $ehrProficienciesExp[$job->job_meditech_exp] : "";

                $j_data["job_epic_exp"] = isset($job->job_epic_exp) ? $job->job_epic_exp : "";
                // $j_data["job_epic_exp_definition"] = isset($ehrProficienciesExp[$job->job_epic_exp]) ? $ehrProficienciesExp[$job->job_epic_exp] : "";

                $j_data["job_other_exp"] = isset($job->job_other_exp) ? $job->job_other_exp : "";
                // $j_data["job_photos"] = isset($job->job_photos) ? $job->job_photos : "";
                $j_data["video_embed_url"] = isset($job->video_embed_url) ? $job->video_embed_url : "";
                $j_data["is_open"] = isset($job['is_open']) ? $job['is_open'] : "";
                $j_data["name"] = isset($job['facility']->name) ? $job['facility']->name : "";
                $j_data["address"] = isset($job->facility->address) ? $job->facility->address : "";
                $j_data["city"] = isset($job->facility->city) ? $job->facility->city : "";
                $j_data["state"] = isset($job->facility->state) ? $job->facility->state : "";
                $j_data["postcode"] = isset($job->facility->postcode) ? $job->facility->postcode : "";

                $j_data["facility_logo"] = isset($job->facility->facility_logo) ? url("public/images/facilities/" . $job->facility->facility_logo) : "";
         
                $j_data["facility_email"] = isset($job->facility->facility_email) ? $job->facility->facility_email : "";
                $j_data["facility_phone"] = isset($job->facility->facility_phone) ? $job->facility->facility_phone : "";
                $j_data["specialty_need"] = isset($job->facility->specialty_need) ? $job->facility->specialty_need : "";
                $j_data["cno_message"] = isset($job->facility->cno_message) ? $job->facility->cno_message : "";

                $j_data["cno_image"] = isset($job->facility->cno_image) ? url("public/images/facilities/cno_image".$job->facility->cno_image) : "";
                
                $j_data["gallary_images"] = isset($job->facility->gallary_images) ? $job->facility->gallary_images : "";
                $j_data["video"] = isset($job->facility->video) ? $job->facility->video : "";
                $j_data["facebook"] = isset($job->facility->facebook) ? $job->facility->facebook : "";
                $j_data["twitter"] = isset($job->facility->twitter) ? $job->facility->twitter : "";
                $j_data["linkedin"] = isset($job->facility->linkedin) ? $job->facility->linkedin : "";
                $j_data["instagram"] = isset($job->facility->instagram) ? $job->facility->instagram : "";
                $j_data["pinterest"] = isset($job->facility->pinterest) ? $job->facility->pinterest : "";
                $j_data["tiktok"] = isset($job->facility->tiktok) ? $job->facility->tiktok : "";
                $j_data["sanpchat"] = isset($job->facility->sanpchat) ? $job->facility->sanpchat : "";
                $j_data["youtube"] = isset($job->facility->youtube) ? $job->facility->youtube : "";
                $j_data["about_facility"] = isset($job->facility->about_facility) ? $job->facility->about_facility : "";
                $j_data["facility_website"] = isset($job->facility->facility_website) ? $job->facility->facility_website : "";
                $j_data["f_lat"] = isset($job->facility->f_lat) ? $job->facility->f_lat : "";
                $j_data["f_lang"] = isset($job->facility->f_lang) ? $job->facility->f_lang : "";
                $j_data["f_emr"] = isset($job->facility->f_emr) ? $job->facility->f_emr : "";
                $j_data["f_emr_other"] = isset($job->facility->f_emr_other) ? $job->facility->f_emr_other : "";
                $j_data["f_bcheck_provider"] = isset($job->facility->f_bcheck_provider) ? $job->facility->f_bcheck_provider : "";
                $j_data["f_bcheck_provider_other"] = isset($job->facility->f_bcheck_provider_other) ? $job->facility->f_bcheck_provider_other : "";
                $j_data["nurse_cred_soft"] = isset($job->facility->nurse_cred_soft) ? $job->facility->nurse_cred_soft : "";
                $j_data["nurse_cred_soft_other"] = isset($job->facility->nurse_cred_soft_other) ? $job->facility->nurse_cred_soft_other : "";
                $j_data["nurse_scheduling_sys"] = isset($job->facility->nurse_scheduling_sys) ? $job->facility->nurse_scheduling_sys : "";
                $j_data["nurse_scheduling_sys_other"] = isset($job->facility->nurse_scheduling_sys_other) ? $job->facility->nurse_scheduling_sys_other : "";
                $j_data["time_attend_sys"] = isset($job->facility->time_attend_sys) ? $job->facility->time_attend_sys : "";
                $j_data["time_attend_sys_other"] = isset($job->facility->time_attend_sys_other) ? $job->facility->time_attend_sys_other : "";
                $j_data["licensed_beds"] = isset($job->facility->licensed_beds) ? $job->facility->licensed_beds : "";
                $j_data["trauma_designation"] = isset($job->facility->trauma_designation) ? $job->facility->trauma_designation : "";

                /* total applied */
                $total_follow_count = Follows::where(['job_id' => $job['job_id'], "applied_status" => "1", 'status' => "1"])->count();
                $j_data["total_applied"] = strval($total_follow_count);
                /* total applied */

                /* liked */
                $is_applied = "0";
                if ($user_id != "")
                    $is_applied = Follows::where(['job_id' => $job['job_id'], "applied_status" => "1", 'status' => "1", "user_id" => $user_id])->distinct()->count();
                /* liked */
                $j_data["is_applied"] = strval($is_applied);

                /* liked */
                $is_liked = "0";
                if ($user_id != "")
                    $is_liked = Follows::where(['job_id' => $job['job_id'], "like_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                /* liked */
                $j_data["is_liked"] = strval($is_liked);

                // $j_data["shift"] = "Days";
                // $j_data["start_date"] = date('d F Y', strtotime($job->start_date));

                $j_data['applied_nurses'] = '0';
                $applied_nurses = Offer::where(['job_id' => $job['job_id'], 'status'=>'Apply'])->count();
                $j_data['applied_nurses'] = strval($applied_nurses);


                $is_saved = '0';
                if ($user_id != ""){
                    $nurse_info = NURSE::where('user_id', $user_id);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();

                        $whereCond = [
                            // 'job_saved.nurse_id' => $nurse->id,
                            'job_saved.nurse_id' => $user_id,
                            'job_saved.job_id' => $job['job_id'],
                            'job_saved.is_save' => "1",
                        ];
        
                        $limit = 10;
                        $saveret = \DB::table('job_saved')
                        ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                        ->where($whereCond);

                        if ($saveret->count() > 0) {
                            $is_saved = 1;
                        }



                        $whereCond1 = [
                            'facilities.active' => true,
                            // 'jobs.is_open' => "1",
                            'offers.status' => 'Offered',
                            'offers.nurse_id' => $nurse->id
                        ];
    
                        $ret = Job::select('jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            ->where($whereCond1)
                            ->orderBy('offers.created_at', 'desc');
                    
    
                        $job_data = $ret->get();
                        // $job_data = $ret->paginate(10);
    
                        $j_data['nurses_applied'] = $this->jobData($job_data, $user_id);
                    }
                }
                $j_data["is_saved"] = $is_saved;

                // $j_data["popular_jobs"] = array();
                
                // if ($user_id != ""){
                //     $whereCond = [
                //         'facilities.active' => true,
                //         'jobs.job_type' => $j_data["job_type"],
                //         'jobs.is_open' => "1"
                //     ];

                //     $ret = Job::select('keywords.title as keyword_title','jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                //         ->leftJoin('facilities', function ($join) {
                //             $join->on('facilities.id', '=', 'jobs.facility_id');
                //         })
                //         ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                //         ->leftJoin('offers', function ($join) {
                //             $join->on('offers.job_id', '=', 'jobs.id');
                //         })
                //         ->where($whereCond)
                //         ->orderBy('jobs.created_at', 'desc');
                

                //     $job_data = $ret->paginate(10);

                //     $j_data['popular_jobs'] = $this->jobData($job_data);
                //     $num = 0;
                //     foreach($j_data['popular_jobs'] as $rec){
                        
                //         $j_data['popular_jobs'][$num]['description'] = strip_tags($rec['description']);
                //         $j_data['popular_jobs'][$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                //         $j_data['popular_jobs'][$num]['qualifications'] = strip_tags($rec['qualifications']);
                //         $j_data['popular_jobs'][$num]['cno_message'] = strip_tags($rec['cno_message']);
                //         $j_data['popular_jobs'][$num]['about_facility'] = strip_tags($rec['about_facility']);
                //         $num++;
                //     }
                // }

                $result[] = $j_data;
            }
        }
        return $result;
    }

    public function my_saved_jobData($jobdata, $user_id = "")
    {
        $result = [];
        if (!empty($jobdata)) {
            $controller = new Controller();
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $shifts = $this->getShifts()->pluck('title', 'id');
            $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
            $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
            $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
            $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
            $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
            $weekDays = $this->getWeekDayOptions();

            foreach ($jobdata as $key => $job) {

                $j_data["offer_id"] = isset($job->offer_id) ? $job->offer_id : "";
                $j_data["job_id"] = isset($job->job_id) ? $job->job_id : "";
                $j_data["job_type"] = isset($job->job_type) ? $job->job_type : "";
                $j_data["city"] = isset($job->job_city) ? $job->job_city : "";
                $j_data["state"] = isset($job->job_state) ? $job->job_state : "";
                $j_data["type"] = isset($job->type) ? $job->type : "";
                $j_data["job_name"] = isset($job->job_name) ? $job->job_name : "";
                $j_data["keyword_id"] = isset($job->keyword_id) ? $job->keyword_id : "";
                
                // $j_data["job_location"] = isset($workLocations[$job->job_location]) ? $workLocations[$job->job_location] : "";
                $j_data["weekly_pay"] = isset($job->weekly_pay) ? $job->weekly_pay : "";
                $j_data["employer_weekly_amount"] = isset($job->employer_weekly_amount) ? $job->employer_weekly_amount : "";
                $j_data["hours_per_week"] = isset($job->hours_per_week) ? $job->hours_per_week : 0;

                $j_data["preferred_shift"] = isset($job->preferred_shift) ? $job->preferred_shift : "";
                $j_data["job_location"] = isset($job->job_location) ? $job->job_location : "";
                $j_data["preferred_assignment_duration"] = isset($job->preferred_assignment_duration) ? $job->preferred_assignment_duration : "";
                $j_data["preferred_work_area"] = isset($job->preferred_work_area) ? $job->preferred_work_area : "";
                $j_data["preferred_days_of_the_week"] = isset($job->preferred_days_of_the_week) ? explode(",", $job->preferred_days_of_the_week) : [];
                $j_data["preferred_hourly_pay_rate"] = isset($job->preferred_hourly_pay_rate) ? $job->preferred_hourly_pay_rate : "";
                $j_data["preferred_experience"] = isset($job->preferred_experience) ? $job->preferred_experience : "";
                $j_data["description"] = isset($job->description) ? $job->description : "";
                $j_data["created_at"] = isset($job->created_at) ? date('d-F-Y h:i A', strtotime($job->created_at)) : "";
                $j_data["created_at_definition"] = isset($job->created_at) ? "Posted " . $this->timeAgo(date(strtotime($job->created_at))) : "";
                $j_data["updated_at"] = isset($job->updated_at) ? date('d F Y', strtotime($job->updated_at)) : "";
                $j_data["deleted_at"] = isset($job->deleted_at) ? date('d-F-Y h:i A', strtotime($job->deleted_at)) : "";
                $j_data["created_by"] = isset($job->created_by) ? $job->created_by : "";
                $j_data["slug"] = isset($job->slug) ? $job->slug : "";
                $j_data["active"] = isset($job->active) ? $job->active : "";
                $j_data["facility_id"] = isset($job->facility_id) ? $job->facility_id : "";

                
                $j_data["is_open"] = isset($job->is_open) ? $job->is_open : "";
                $j_data["name"] = isset($job->facility->name) ? $job->facility->name : "";
                
                /* total applied */
                $total_follow_count = Follows::where(['job_id' => $job->job_id, "applied_status" => "1", 'status' => "1"])->count();
                $j_data["total_applied"] = strval($total_follow_count);
                /* total applied */

                /* liked */
                $is_applied = "0";
                if ($user_id != "")
                    $is_applied = Follows::where(['job_id' => $job->job_id, "applied_status" => "1", 'status' => "1", "user_id" => $user_id])->distinct()->count();
                /* liked */
                $j_data["is_applied"] = strval($is_applied);

                /* liked */
                $is_liked = "0";
                if ($user_id != "")
                    $is_liked = Follows::where(['job_id' => $job->job_id, "like_status" => "1", 'status' => "1", "user_id" => $user_id])->count();
                /* liked */
                $j_data["is_liked"] = strval($is_liked);

                // $j_data["shift"] = "Days";
                // $j_data["start_date"] = date('d F Y', strtotime($job->start_date));

                $j_data['applied_nurses'] = '0';
                $applied_nurses = Offer::where(['job_id' => $job->job_id, 'status'=>'Apply'])->count();
                $j_data['applied_nurses'] = strval($applied_nurses);


                $is_saved = '0';
                if ($user_id != ""){
                    $nurse_info = NURSE::where('user_id', $user_id);
                    if ($nurse_info->count() > 0) {
                        $nurse = $nurse_info->first();

                        $whereCond = [
                            // 'job_saved.nurse_id' => $nurse->id,
                            'job_saved.nurse_id' => $user_id,
                            'job_saved.job_id' => $job->job_id,
                            'job_saved.is_save' => "1",
                        ];
        
                        $limit = 10;
                        $saveret = \DB::table('job_saved')
                        ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                        ->where($whereCond);

                        if ($saveret->count() > 0) {
                            $is_saved = 1;
                        }



                        $whereCond1 = [
                            'facilities.active' => true,
                            // 'jobs.is_open' => "1",
                            'offers.status' => 'Offered',
                            'offers.nurse_id' => $nurse->id
                        ];
    
                        $ret = Job::select('jobs.id as job_id','jobs.job_type as job_type', 'jobs.*')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            ->where($whereCond1)
                            ->orderBy('offers.created_at', 'desc');
                    
    
                        $job_data = $ret->get();
                        // $job_data = $ret->paginate(10);
    
                        $j_data['nurses_applied'] = $this->jobData($job_data, $user_id);
                    }
                }
                $j_data["is_saved"] = $is_saved;
                $result[] = $j_data;
            }
        }
        return $result;
    }

    public function jobSaved(Request $request)
    {    
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            /*  dropdown data's */
            $nurse_info = Nurse::where(['user_id' => $request->user_id]);
            
            if ($nurse_info->count() > 0) {
                $result = array();
                $nurse = $nurse_info->first();
                $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
                if(isset($checkoffer))
                {
                    $this->check = "1";
                    $this->message = "This Worker Blocked by Recruiter";
                    $this->return_data = [];
                }else{
                    $whereCond = [
                        'job_saved.nurse_id' => $request->user_id,
                        'jobs.is_closed' => "0"
                    ];

                    $limit = 10;
                    $ret = \DB::table('job_saved')
                            ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                            ->where($whereCond)
                            ->select('jobs.*' ,'job_saved.*');
                            
                            // ->paginate($limit);
                            $jobdata = $ret->get();
                            $result = $this->my_saved_jobData($jobdata, $request->user_id);
                            // IS SAVED JOBS
                            $data = [];
                            foreach($result as $val){
                                if($val['is_saved'] != '1'){
                                    continue;
                                }
                                $data[] = $val;
                            }

                    $this->check = "1";
                    $this->message = "Saved jobs listed successfully";
                    $this->return_data = $data;
                }
            } else {
                $this->message = "Nurse not found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function nurseJobSaved(Request $request)
    {    
        $validator = \Validator::make($request->all(), [
            'nurse_id' => 'required',
            'api_key' => 'required',
            'user_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            /*  dropdown data's */
            $controller = new Controller();
            $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
            $specialties = $controller->getSpecialities()->pluck('title', 'id');
            /*  dropdown data's */
            $nurse_info = Nurse::where(['id' => $request->nurse_id]);
            
            if ($nurse_info->count() > 0) {
                $result = array();
                $nurse = $nurse_info->get()->first();
                // $user_id = $nurse->user_id;
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.is_open' => "1",
                    'jobs.is_closed' => "0",
                    'job_saved.nurse_id' => $request->user_id,
                    'job_saved.is_delete' => '0'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.created_at as created_at', 'jobs.updated_at as updated_at', 'facilities.*', 'jobs.*')
                ->leftJoin('facilities', function ($join) {
                    $join->on('facilities.id', '=', 'jobs.facility_id');
                })
                ->Join('job_saved', function ($join) {
                    $join->on('job_saved.job_id', '=', 'jobs.id');
                })
                ->where($whereCond)
                ->orderBy('jobs.created_at', 'desc');

                $user_id =  isset($request->user_id)?$request->user_id:'';
                $jobdata = $ret->get();
                // $jobdata = $ret->paginate(10);
                $result = $this->save_jobData($jobdata, $user_id);
                $n_c = 0;
                foreach($result as $rec)
                {
                    $result[$n_c]['city'] = isset($rec['job_city'])?$rec['job_city']:'';
                    $result[$n_c]['state'] = isset($rec['job_state'])?$rec['job_state']:'';
                    $result[$n_c]['description'] = strip_tags($rec['description']);
                    $result[$n_c]['responsibilities'] = strip_tags($rec['responsibilities']);
                    $result[$n_c]['qualifications'] = strip_tags($rec['qualifications']);
                    $result[$n_c]['cno_message'] = strip_tags($rec['cno_message']);
                    $result[$n_c]['about_facility'] = strip_tags($rec['about_facility']);
                    $n_c++;
                }                

                $data = [];
                foreach($result as $val){
                    if($val['is_applied'] != '0'){
                        continue;
                    }
                    $data[] = $val;
                }

                $this->check = "1";
                $this->message = "Saved jobs listed successfully";
                $this->return_data = $data;
            } else {
                $this->message = "Nurse not found";
            }
        }
        
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function jobPopular(Request $request)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();

        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where(['id' => $request->user_id]);
            $job_info = Job::where(['id' => $request->job_id]);
            if ($user_info->count() > 0) {
                if ($job_info->count() > 0) {
                    $whereCond = [
                        'facilities.active' => true,
                        'jobs.is_open' => "1",
                        'jobs.is_closed' => "0"
                    ];
    
                    // new code
                    $ret = DB::table('jobs')
                    ->leftJoin('facilities', 'facilities.id', '=', 'jobs.facility_id')
                    ->leftJoin('keywords', 'keywords.id', '=', 'jobs.job_type')
                    ->select('keywords.title as keyword_title','keywords.filter as keyword_filter','jobs.id as job_id','jobs.job_type as job_type', 'jobs.*', 'facilities.*')
                    ->where($whereCond)
                    // ->orderBy('jobs.created_at', 'desc')->get();
                    ->orderBy('jobs.created_at', 'desc');
                    $job_data = $ret->get();
                    // $job_data = $ret->paginate(10);
    
                    $num = 0;
                    foreach($job_data as $val){
                        $val->shift = isset($val->preferred_shift)?$val->preferred_shift:'';
                        $val->job_location = isset($workLocations[$val->job_location]) ? $workLocations[$val->job_location] : "";
                        $val->created_at_definition = isset($val->created_at) ? "Posted " . $this->timeAgo(date(strtotime($val->created_at))) : "";
                    
                        $is_applied = "0";
                        if ($request->user_id != "")
                            $is_applied = Follows::where(['job_id' => $val->job_id, "applied_status" => "1", 'status' => "1", "user_id" => $request->user_id])->distinct('user_id')->count();
                        $val->is_applied = strval($is_applied);
    
                        $val->applied_nurses = 0;
                        $applied_nurses = Offer::where(['job_id' => $val->job_id, 'status'=>'Apply'])->count();
                        $val->applied_nurses = strval($applied_nurses);
    
                        $is_saved = '0';
                        $whereCond = [
                            'job_saved.nurse_id' => $request->user_id,
                            'job_saved.job_id' => $val->job_id,
                        ];
    
                        $limit = 10;
                        $saveret = \DB::table('job_saved')
                        ->join('jobs', 'jobs.id', '=', 'job_saved.job_id')
                        ->where($whereCond);
    
                        if ($saveret->count() > 0) {
                            $is_saved = '1';
                        }
                        $val->is_saved = $is_saved;
    
                        $job_data[$num]->description = strip_tags($val->description);
                        $job_data[$num]->responsibilities = strip_tags($val->responsibilities);
                        $job_data[$num]->qualifications = strip_tags($val->qualifications);
                        $job_data[$num]->cno_message = strip_tags($val->cno_message);
                        $job_data[$num]->about_facility = strip_tags($val->about_facility);
                        $num++;
                    }
    
                    $data = [];
                    foreach($job_data as $val){
                        if($val->is_applied != '0'){
                            continue;
                        }
                        // print_r($val->is_applied);
                        $data[] = $val;
                    }
                    
                    $this->check = "1";
                    $this->message = "Popular Jobs listed successfully";
                    $this->return_data = $data;
                }else{
                    $this->message = 'Job not found';
                }
            }else{
                $this->message = 'User not found';
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    
    }

    // delete Nurse
    public function deleteNurse(Request $request)
    {
        $nurse = Nurse::where('user_id', $request->user_id)->first();
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
           
            if ($nurse) {   
                $this->check = "1";
                $nurse_id = $nurse->id;
                $nurse_deleted = DB::table('nurses')->where('id', '=', $nurse_id)->delete();
                $user_deleted = DB::table('users')->where('id', '=', $request->user_id)->delete();
                // In job saved table nurse_id is user_id
                DB::table('job_saved')->where('nurse_id', '=', $request->user_id)->delete();
                DB::table('nurse_assets')->where('nurse_id', '=', $nurse_id)->delete();
                DB::table('nurse_references')->where('nurse_id', '=', $nurse_id)->delete();
                DB::table('offers')->where('nurse_id', '=', $nurse_id)->delete();
                DB::table('nurse_ratings')->where('nurse_id', '=', $nurse_id)->delete();
                DB::table('notifications')->where('created_by', '=', $nurse_id)->delete();
                if($nurse_deleted && $user_deleted){
                    $this->message = "Nurse record deleted successfully";
                }else{
                    $this->message = "Nurse record not deleted";
                }
                
            } else {
                $this->message = "Nurse not exists";
            }
            $this->return_data = $return_data;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    } 

    public function nursepersonalDetail(Request $request)
    {
        $user = User::where('id', $request->user_id)->first();
        $nurse = Nurse::where('user_id', $request->user_id)->first();
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            if ($user) {
                /* User */
                if (isset($request->date_of_birth) && $request->date_of_birth != "") $user->date_of_birth = $request->date_of_birth;
                if (isset($request->driving_license) && $request->driving_license != "") $user->driving_license = $request->driving_license;
                if (isset($request->security_number) && $request->security_number != "") $user->security_number = $request->security_number;
                
                $u = $user->update();
                /* User */

                

                if ($u) {
                    $this->check = "1";
                    $return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    $this->message = "Personal detail updated successfully";
                } else {
                    $this->message = "Problem occurred while updating the profile detail, Please try again later";
                }
            } else {
                $this->message = "User not exists";
            }
            $this->return_data = $return_data;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }


    public function nurseLicenseDetail(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if(isset($request->role)){
                $user = User::where('id', $request->user_id)->first();
                $nurse = Nurse::where('id', $request->nurse_id)->first();
            }else{
                $user = User::where('id', $request->user_id)->first();
                $nurse = Nurse::where('user_id', $request->user_id)->first();
            }

            $return_data = [];
            if ($user) {
                

                /*  Nurse */
                if (isset($request->nursing_license_number) && $request->nursing_license_number != "") $nurse->nursing_license_number = $request->nursing_license_number;
                if (isset($request->nursing_license_state) && $request->nursing_license_state != "") $nurse->nursing_license_state = $request->nursing_license_state;
                if (isset($request->license_expiry_date) && $request->license_expiry_date != "") $nurse->license_expiry_date = $request->license_expiry_date;
                if (isset($request->license_issue_date) && $request->license_issue_date != "") $nurse->license_issue_date = $request->license_issue_date;
                if (isset($request->license_renewal_date) && $request->license_renewal_date != "") $nurse->license_renewal_date = $request->license_renewal_date;
                if (isset($request->license_status) && $request->license_status != "") $nurse->license_status = $request->license_status;
                if (isset($request->license_type) && $request->license_type != "") $nurse->license_type = $request->license_type;
                if (isset($request->authority_Issue) && $request->authority_Issue != "") $nurse->authority_Issue = $request->authority_Issue;
                $n = $nurse->update();
                /*  Nurse */
                

                if ($n) {
                    $this->check = "1";
                    $return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    $this->message = "License  details updated successfully";
                } else {
                    $this->message = "Problem occurred while updating the profile detail, Please try again later";
                }
            } else {
                $this->message = "User not exists";
            }
            $this->return_data = $return_data;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    

    }

    public function nurseEducationDetail(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            if(isset($request->role)){
                $user = User::where('id', $request->user_id)->first();
                $nurse = Nurse::where('id', $request->nurse_id)->first();
            }else{
                $user = User::where('id', $request->user_id)->first();
                $nurse = Nurse::where('user_id', $request->user_id)->first();
            }

            $return_data = [];
            $is_completion = 0;
            if ($user) {
                
                /*  Nurse */
                if (isset($request->college_uni_name) && $request->college_uni_name != "") $nurse->college_uni_name = $request->college_uni_name;
                if (isset($request->study_area) && $request->study_area != "") $nurse->study_area = $request->study_area;
                if (isset($request->graduation_date) && $request->graduation_date != "") $nurse->graduation_date = $request->graduation_date;
                // if (isset($request->highest_nursing_degree ) && $request->highest_nursing_degree  != "") $nurse->highest_nursing_degree  = $request->highest_nursing_degree ;
                if (isset($request->highest_nursing_degree ) && $request->highest_nursing_degree  != ""){
                    
                    // nurse degree changed into id
                    if($request->highest_nursing_degree == 'Master of Science in Nursing (MSN)'){
                        $nurse->highest_nursing_degree  = '23';
                    }else if($request->highest_nursing_degree == 'Associate Degree in Nursing (ADN)'){
                        $nurse->highest_nursing_degree  = '21';
                    }else if($request->highest_nursing_degree == 'Bachelor of Science in Nursing (BSN)'){
                        $nurse->highest_nursing_degree  = '22';
                    }else{
                        $nurse->highest_nursing_degree  = '24';
                    }
                // end nurse degree convert into id
                } 
                
                $n = $nurse->update();
                /*  Nurse */
                
                if ($n) {
                    $this->check = "1";
                    $return_data = $this->profileCompletionFlagStatus($type = "", $user);
                    $this->message = "Education  details updated successfully";
                } else {
                    $this->message = "Problem occurred while updating the profile detail, Please try again later";
                }
            } else {
                $this->message = "User not exists";
            }
            $this->return_data = $return_data;
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    

    }

    public function addnurseExperienceDetail(Request $request)
    {
        $messages = [
            "user_id.required" => "user_id is required",
            "type.required" => "Select Experience type",
            "type.exists" => "Selected Experience type does not exist",
            "start_date.date" => "Start Date is not valid",
            "end_date.required" => "Enter End Date",
            "end_date.date" => "Ennd Date is not valid",
            "end_date.after" => "End Date should be after Start Date.",
        ];

        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'type' => 'required|numeric|exists:keywords,id',
            'start_date' => 'required|date',
            'end_date' => "required|date|after:start_date",
            'api_key' => 'required',
        ], $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            if(isset($request->role)){
                $nurse = Nurse::where('id', '=', $request->nurse_id)->first();
            }else{
                $nurse = Nurse::where('user_id', '=', $request->user_id)->first();
            }
            
            $check = Experience::where('nurse_id', '=', $nurse->id)->get()->first();
            if(isset($check)){
                $this->check = "1";
                $this->message = "Nurse record already exist";
                $this->return_data = $check;
            }else{

                if (isset($nurse)) {
    
                    /* experience */
                    $add_array = [
                        'nurse_id' => $nurse->id,
                        'type' => $request->type,
                        'start_date' => $request->start_date,
                        'end_date' => $request->end_date,
                        "position_title" => $request->position_title,
                        "unit" => $request->unit,
                        "is_current_job" => $request->is_current_job,
                    ];
                    $experience = Experience::create($add_array);
    
                    
                    /* experience */
    
                    if ($experience == true) {
                        $cert_ret = Experience::where('id', '=', $experience->id)->first();
    
                        /* experience data */
                        $experiences = $this->getExperienceTypes()->pluck('title', 'id');
                        $cert_data["experience_id"] = (isset($cert_ret->id) && $cert_ret->id != "") ? $cert_ret->id : "";
                        $cert_data["nurse_id"] = (isset($cert_ret->nurse_id) && $cert_ret->nurse_id != "") ? $cert_ret->nurse_id : "";
                        $cert_data["type"] = (isset($cert_ret->type) && $cert_ret->type != "") ? $cert_ret->type : "";
                        $cert_data["type_definition"] = (isset($experiences[$cert_ret->type]) && $experiences[$cert_ret->type] != "") ? $experiences[$cert_ret->type] : "";
                        $cert_data["position_title"] = (isset($cert_ret->position_title) && $cert_ret->position_title != "") ? $cert_ret->position_title : "";
                        $cert_data["start_date"] = (isset($cert_ret->start_date) && $cert_ret->start_date != "") ?  date('m/d/Y', strtotime($cert_ret->start_date)) : "";
                        $cert_data["end_date"] = (isset($cert_ret->end_date) && $cert_ret->end_date != "") ?  date('m/d/Y', strtotime($cert_ret->end_date)) : "";
                        $cert_data["unit"] = (isset($cert_ret->unit) && $cert_ret->unit != "") ? $cert_ret->unit : "";
                        $cert_data["created_at"] = (isset($cert_ret->created_at) && $cert_ret->created_at != "") ?  date('m/d/Y H:i:s', strtotime($cert_ret->created_at)) : "";
                        $cert_data["is_current_job"] = (isset($cert_ret->is_current_job) && $cert_ret->is_current_job != "") ?  $cert_ret->is_current_job : "";
                        /* experience data */
    
                        $this->check = "1";
                        $this->message = "Experience added successfully";
                        $this->return_data = $cert_data;
                    } else {
                        $this->message = "Problem occurred while updating experience, Please try again later";
                    }
                } else {
                    $this->message = "Nurse not found";
                }
            }

            
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
   

    }

    public function editnurseExperienceDetail(Request $request)
    {
        $messages = [
            "user_id.required" => "user_id is required",
            "type.required" => "Select Experience type",
            "type.exists" => "Selected Experience type does not exist",
            "start_date.date" => "Start Date is not valid",
            "end_date.required" => "Enter End Date",
            "end_date.date" => "Ennd Date is not valid",
            "end_date.after" => "End Date should be after Start Date.",
        ];

        $validator = Validator::make($request->all(), [
            'user_id' => 'required',
            'type' => 'required|numeric|exists:keywords,id',
            'start_date' => 'required|date',
            'end_date' => "required|date|after:start_date",
            'api_key' => 'required',
            'experience_id' => 'required',
        ], $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse_info = Nurse::where('user_id', '=', $request->user_id);

            if ($nurse_info->count() > 0) {
                $nurse = $nurse_info->first();

                /* experience */
                $experience_array = [
                    'nurse_id' => $nurse->id,
                    'type' => $request->type,
                    'start_date' => $request->start_date,
                    'end_date' => $request->end_date,
                    "position_title" => $request->position_title,
                    "unit" => $request->unit,
                    "is_current_job" => $request->is_current_job,
                ];
                $experience = Experience::where(['id' => $request->experience_id])->update($experience_array);

                
                /* experience */

                if ($experience == true) {
                    $cert_ret = Experience::where('id', '=', $request->experience_id)->first();

                    /* experience data */
                    $experiences = $this->getExperienceTypes()->pluck('title', 'id');
                    $cert_data["experience_id"] = (isset($cert_ret->id) && $cert_ret->id != "") ? $cert_ret->id : "";
                    $cert_data["nurse_id"] = (isset($cert_ret->nurse_id) && $cert_ret->nurse_id != "") ? $cert_ret->nurse_id : "";
                    $cert_data["type"] = (isset($cert_ret->type) && $cert_ret->type != "") ? $cert_ret->type : "";
                    $cert_data["type_definition"] = (isset($experiences[$cert_ret->type]) && $experiences[$cert_ret->type] != "") ? $experiences[$cert_ret->type] : "";
                    $cert_data["position_title"] = (isset($cert_ret->position_title) && $cert_ret->position_title != "") ? $cert_ret->position_title : "";
                    $cert_data["start_date"] = (isset($cert_ret->start_date) && $cert_ret->start_date != "") ?  date('m/d/Y', strtotime($cert_ret->start_date)) : "";
                    $cert_data["end_date"] = (isset($cert_ret->end_date) && $cert_ret->end_date != "") ?  date('m/d/Y', strtotime($cert_ret->end_date)) : "";
                    $cert_data["unit"] = (isset($cert_ret->unit) && $cert_ret->unit != "") ? $cert_ret->unit : "";
                    $cert_data["created_at"] = (isset($cert_ret->created_at) && $cert_ret->created_at != "") ?  date('m/d/Y H:i:s', strtotime($cert_ret->created_at)) : "";
                    $cert_data["is_current_job"] = (isset($cert_ret->is_current_job) && $cert_ret->is_current_job != "") ?  $cert_ret->is_current_job : "";
                    /* experience data */

                    $this->check = "1";
                    $this->message = "Experience added successfully";
                    $this->return_data = $cert_data;
                } else {
                    $this->message = "Problem occurred while updating experience, Please try again later";
                }
            } else {
                $this->message = "Nurse not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
   



    }

    public function myjobApplied(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {

                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $result = array();

                    $nurse = $nurse_info->get()->first();
                    $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
                    if(isset($checkoffer))
                    {
                        $this->check = "1";
                        $this->message = "This Worker Blocked by Recruiter";
                        $this->return_data = [];
                    }else{
                        $whereCond = [
                            'facilities.active' => true,
                            // 'jobs.is_open' => "1",
                            'jobs.is_closed' => "0",
                            'offers.status' => 'Apply',
                            'offers.nurse_id' => $nurse->id
                        ];
    
                        $ret = Job::select('jobs.id as job_id', 'jobs.*', 'offers.created_at as created_at')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            ->where($whereCond)
                            ->orderBy('offers.created_at', 'desc');
                    
                            $job_data = $ret->get();
                            // $job_data = $ret->paginate(10);
    
                        $result = $this->jobData($job_data, $request->user_id);
    
                        $num = 0;
                        foreach($result as $rec){
                            $result[$num]['description'] = strip_tags($rec['description']);
                            $result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                            $result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                            $result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                            $result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                            $num++;
                        }
    
                        $this->check = "1";
                        $this->message = "Jobs applied successfully";
                        $this->return_data = $result;
                    }

                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }

            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }



    public function myjobOffered(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $result = array();
                    $nurse = $nurse_info->get()->first();
                    $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
                    if(isset($checkoffer))
                    {
                        $this->check = "1";
                        $this->message = "This Worker Blocked by Recruiter";
                        $this->return_data = [];
                    }else{
                        $whereCond = [
                            'facilities.active' => true,
                            'jobs.active' => "1",
                            'jobs.is_closed' => "0",
                            'offers.status' => 'Offered',
                            'offers.nurse_id' => $nurse->id
                        ];

                        $ret = Job::select('jobs.id as job_id', 'jobs.*', 'offers.updated_ as created_at')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            ->where($whereCond)
                            ->orderBy('offers.created_at', 'desc');
                            

                        // $job_data = $ret->paginate(10);
                        $job_data = $ret->get();
                        $result = $this->jobData($job_data, $request->user_id);
                        $num = 0;
                        foreach($result as $rec){
                            $result[$num]['description'] = strip_tags($rec['description']);
                            $result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                            $result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                            $result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                            $result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                            $num++;
                        }
                        $this->check = "1";
                        $this->message = "Jobs listed successfully";
                        $this->return_data = $result;
                    }
                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }

            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    

    }


    public function myjobHired(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $result = array();

                    $nurse = $nurse_info->get()->first();
                    $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
                    if(isset($checkoffer))
                    {
                        $this->check = "1";
                        $this->message = "This Worker Blocked by Recruiter";
                        $this->return_data = [];
                    }else{
                        
                        $whereCond = [
                            'facilities.active' => true,
                            'jobs.active' => "1",
                            'jobs.is_closed' => "0",
                            'offers.status' => 'Onboarding',
                            'offers.nurse_id' => $nurse->id
                        ];

                        // new code
                        // $ret = DB::table('jobs')
                        $ret = Job::where($whereCond)
                        ->leftJoin('facilities', 'facilities.id', '=', 'jobs.facility_id')
                        ->leftJoin('offers', 'jobs.id', '=', 'offers.job_id')
                        ->select('offers.status AS offers_status','offers.id AS offer_id', 'jobs.created_at AS start_date', 'jobs.id as job_id', 'jobs.*', 'jobs.created_at as created_at')
                        
                        ->orderBy('jobs.created_at', 'desc');
                        // $jobdata = $ret->paginate(10);
                        $jobdata = $ret->get();
                        $result = [];
                        foreach($jobdata as $rec){
                            $res['type'] = $rec['type'];
                            $res['job_id'] = $rec['job_id'];
                            $res['worker_id'] = $nurse->id;
                            $res['worker_user_id'] = $nurse->user_id;
                            $res['job_name'] = $rec['job_name'];
                            $res['Worker_name'] = $nurse->first_name.' '.$nurse->last_name;
                            $res['profession'] = $rec['profession'];
                            $res['specialty'] = $rec['preferred_specialty'];
                            $res['experience'] = $rec['preferred_experience'];
                            $res['weekly_pay'] = $rec['employer_weekly_amount'];
                            $res['preferred_assignment_duration'] = $rec['preferred_assignment_duration'];
                            $res['preferred_shift'] = $rec['preferred_shift'];
                            $res['city'] = $rec['job_city'];
                            $res['state'] = $rec['job_state'];
                            
                            $res['created_at_definition'] = isset($rec['created_at']) ? "Start Date: " .date('M j, Y', strtotime($rec['created_at'])) : "";
                            $result[] =$res;
                        }
                        
                        
                        $this->check = "1";
                        $this->message = "Hired Jobs listed successfully";
                        $this->return_data = $result;
                    }
                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }

            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    
    }


    public function myjobPast(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse_info = NURSE::where('user_id', $request->user_id);
                if ($nurse_info->count() > 0) {
                    $result = array();
                    $nurse = $nurse_info->get()->first();
                    $checkoffer = DB::table('blocked_users')->where('worker_id', $nurse['id'])->first();
                    if(isset($checkoffer))
                    {
                        $this->check = "1";
                        $this->message = "This Worker Blocked by Recruiter";
                        $this->return_data = [];
                    }else{
                        $whereCond = [
                            'facilities.active' => true,
                            'offers.status' => 'Done',
                            'jobs.is_closed' => "0",
                            'offers.nurse_id' => $nurse->id
                        ];
                        $ret = Job::select('offers.id AS offer_id','jobs.id as job_id', 'jobs.*', 'offers.start_date as start_date', 'offers.expiration as end_date', 'jobs.created_at as created_at')
                            ->leftJoin('facilities', function ($join) {
                                $join->on('facilities.id', '=', 'jobs.facility_id');
                            })
                            ->join('offers', 'jobs.id', '=', 'offers.job_id')
                            // ->where('jobs.end_date', '<', date('Y-m-d') )
                            // ->where('offers.expiration', '<', date('Y-m-d') )
                            ->where($whereCond)
                            ->orderBy('offers.created_at', 'desc');
                        // $job_data = $ret->paginate(10);
                        $job_data = $ret->get();

                        $result = [];
                        foreach($job_data as $rec){
                            $res['type'] = $rec['type'];
                            $res['job_id'] = $rec['job_id'];
                            $res['worker_id'] = $nurse->id;
                            $res['worker_user_id'] = $nurse->user_id;
                            $res['job_name'] = $rec['job_name'];
                            $res['Worker_name'] = $nurse->first_name.' '.$nurse->last_name;
                            $res['profession'] = $rec['profession'];
                            $res['specialty'] = $rec['preferred_specialty'];
                            $res['experience'] = $rec['preferred_experience'];
                            $res['weekly_pay'] = $rec['employer_weekly_amount'];
                            $res['preferred_assignment_duration'] = $rec['preferred_assignment_duration'];
                            $res['preferred_shift'] = $rec['preferred_shift'];
                            $res['city'] = $rec['job_city'];
                            $res['state'] = $rec['job_state'];
                            
                            $res['start_date'] = isset($rec['start_date']) ? "Start Date: " .date('M j Y', strtotime($rec['start_date'])) : "";
                            $res['end_date'] = isset($rec['end_date']) ? "End Date: " .date('M j Y', strtotime($rec['end_date'])) : "";
                            $res['posted_on'] = isset($rec['created_at']) ?date('M j Y', strtotime($rec['created_at'])) : "";
                            $result[] =$res;
                        }
                        // $result = $this->jobData($job_data, $request->user_id);
                        // $num = 0;
                        // foreach($result as $rec){
                        //     $result[$num]['description'] = strip_tags($rec['description']);
                        //     $result[$num]['responsibilities'] = strip_tags($rec['responsibilities']);
                        //     $result[$num]['qualifications'] = strip_tags($rec['qualifications']);
                        //     $result[$num]['cno_message'] = strip_tags($rec['cno_message']);
                        //     $result[$num]['about_facility'] = strip_tags($rec['about_facility']);
                        //     $num++;
                        // }
                        $this->check = "1";
                        $this->message = "Past Jobs listed successfully";
                        $this->return_data = $result;
                    }
                }else{
                    $this->check = "1";
                    $this->message = "Nurse not exist";
                }
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    // Worker side
    public function workerProfileHomeScreen(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $complete = 60;
                if($complete == 100){
                    // $result['get_profile'] = 1;
                    $get_profile = 1;
                }else{
                    // $result['get_profile'] = 0;
                    $get_profile = 0;
                }

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $get_profile;
            }else{
                $this->check = "1";
                $this->message = "Users Not Found";
                $this->return_data = [];
            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function workerHomeScreen(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse = Nurse::where('user_id', $request->user_id)->first();
               if(isset($nurse['worker_vaccination']) && !empty($nurse['worker_vaccination'])){
                $vacc = 25;
               }else{
                $vacc = 0;
               }
               if(isset($nurse['worker_certificate_name']) && !empty($nurse['worker_certificate_name'])){
                $cert = 25;
               }else{
                $cert = 0;
               }
               if(isset($nurse['worker_number_of_references']) && !empty($nurse['worker_number_of_references'])){
                $ref = 25;
               }else{
                $ref = 0;
               }
                
                $result['total_amount'] = isset($nurse['worker_employer_weekly_amount'])?$nurse['worker_employer_weekly_amount']:'';
                $result['completed'] = round($nurse['profession_information_per']+$vacc+$cert+$ref);
                $result['pending'] = round(100-$result['completed']);
                if($result['completed'] <= 99){
                    $result['completed_per'] = 2;
                }else{
                    $result['completed_per'] = 5;
                }
                $result['pending_per'] = 5;
                $result['revenue'] = round($result['completed_per']);
                $result['completed_amount'] = (!(empty($result['total_amount'])?$result['total_amount']:0)*(!empty($result['revenue'])?$result['revenue']:0))/100;
                $result['completed_amount'] = round($result['completed_amount']);
                if($result['completed_per'] == 100){
                    $result['pending_amount'] = 0;
                }else{
                    $result['pending_amount'] = ((!empty($result['total_amount'])?$result['total_amount']:0)*$result['pending_per'])/100;
                }
                $result['get_additional'] = 5;

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $result;

            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function graphHomeScreen(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
            if(!isset($request->user_id)){
                $result['Applied'] = 0;
                $result['Offered'] = 0;
                $result['Onboard'] = 0;
                $result['Hired'] = 0;
                $result['Done'] = 0;
                $result['Rejected'] = 0;
            
                $result['total_goodwork_amount'] = '';
                $result['total_employer_amount'] = '';

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $result;
            }

        } else {
            $user_info = USER::where('id', $request->user_id);
            
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $nurse = Nurse::where('user_id', $request->user_id)->first();

                $New = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Apply', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
                
                $Offered = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Offered', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
  
                $Onboard = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Onboarding', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
                                
                $Working = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Working', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
 
                $Done = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Done', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();

                $Rejected = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Rejected', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();


                $result['Applied'] = isset($New[0])?$New[0]->total:0;
                $result['Offered'] = isset($Offered[0])?$Offered[0]->total:0;
                $result['Onboard'] = isset($Onboard[0])?$Onboard[0]->total:0;
                $result['Hired'] = isset($Working[0])?$Working[0]->total:0;
                $result['Done'] = isset($Done[0])?$Done[0]->total:0;
                $result['Rejected'] = isset($Rejected[0])?$Rejected[0]->total:0;
            
                $result['total_goodwork_amount'] = isset($nurse['worker_total_goodwork_amount'])?$nurse['worker_total_goodwork_amount']:'';
                $result['total_employer_amount'] = isset($nurse['worker_total_employer_amount'])?$nurse['worker_total_employer_amount']:'';

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $result;

            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    // Recruiter side
    public function homeScreen(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
            if(!isset($request->user_id)){
                $result['Applied'] = 0;
                $result['Offered'] = 0;
                $result['Onboard'] = 0;
                $result['Hired'] = 0;
                $result['Done'] = 0;
                $result['Rejected'] = 0;
            
                $result['total_goodwork_amount'] = '';
                $result['total_employer_amount'] = '';

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $result;
            }

        } else {
            $user_info = USER::where('id', $request->user_id);


            if ($user_info->count() > 0) {

                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.job_type' => 'Local',
                    'jobs.is_closed' => "0",
                    'recruiter_id' => $request->user_id
                ];
    
                $ret = Job::select('jobs.id as job_id', 'jobs.*')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->where($whereCond);

                $result['Local_jobs'] = $ret->count();

                $whereCond = [
                    'facilities.active' => true,
                    'jobs.job_type' => 'Shift',
                    'jobs.is_closed' => "0",
                    'recruiter_id' => $request->user_id
                ];
    
                $ret = Job::select('jobs.id as job_id', 'jobs.*')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->where($whereCond);

                $result['Shift_jobs'] = $ret->count();

                $whereCond = [
                    'facilities.active' => true,
                    'jobs.job_type' => 'Travel',
                    'jobs.is_closed' => "0",
                    'recruiter_id' => $request->user_id
                ];
    
                $ret = Job::select('jobs.id as job_id', 'jobs.*')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->where($whereCond);

                $result['Travel_jobs'] = $ret->count();

                $whereCond = [
                    'facilities.active' => true,
                    'jobs.job_type' => 'Permanent',
                    'jobs.is_closed' => "0",
                    'recruiter_id' => $request->user_id
                ];
    
                $ret = Job::select('jobs.id as job_id', 'jobs.*')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->where($whereCond);

                $result['Permanent_jobs'] = $ret->count();

                $New = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Apply', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
                
                $Offered = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Offered', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
  
                $Onboard = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Onboarding', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
                                
                $Working = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Working', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();
 
                $Done = DB::table('jobs')
                                ->join('offers','jobs.id', '=', 'offers.job_id')
                                ->where(['jobs.recruiter_id' => $request->user_id, 'status' => 'Done', 'jobs.is_closed' => '0'])
                                ->select('status', DB::raw('count(*) as total'))
                                ->groupBy('offers.status')
                                ->get();

                $whereCond = [
                    'notifications.created_by' => $request->user_id,
                ];
                $result['Notification'] = Notification::select('offers.status as status', 'notifications.*')
                                        ->join('offers', 'notifications.job_id', '=', 'offers.job_id')
                                        ->where($whereCond)
                                        ->orderBy('notifications.created_at', 'desc')->distinct()
                                        ->get();
                if(isset($result['Notification'])){
                    
                    foreach($result['Notification'] as $rec){
                        if($rec->status == "Apply"){
                            $rec->status = 1;
                        }else if($rec->status == 'Offered'){
                            $rec->status = 2;
                        }else if($rec->status == 'Onboarding'){
                            $rec->status = 3;
                        }else if($rec->status == 'Working'){
                            $rec->status = 4;
                        }else{
                            $rec->status = 5;
                        }
                        
                        $rec->created_at_definition = $rec->created_at->format('l, jS F Y');
                        $rec->updated_at_definition = isset($rec->updated_at) ? $rec->updated_at->format('l, jS F Y') : NULL;
                        $rec->deleted_at_definition = isset($rec->deleted_at) ? $rec->deleted_at->format('l, jS F Y') : NULL;
                        
                    }
                }

                $result['New'] = isset($New[0])?$New[0]->total:0;
                $result['Offered'] = isset($Offered[0])?$Offered[0]->total:0;
                $result['Onboard'] = isset($Onboard[0])?$Onboard[0]->total:0;
                $result['Working'] = isset($Working[0])?$Working[0]->total:0;
                $result['Done'] = isset($Done[0])?$Done[0]->total:0;

                $this->check = "1";
                $this->message = "Jobs listed successfully";
                $this->return_data = $result;

            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function helpSupport(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'subject' => 'required',
            'issue' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0)
            {
                $user = $user_info->get()->first();
                $insert = array(
                    "user_id" => $request->user_id,
                    'subject' => $request->subject,
                    'issue' => $request->issue,
                    'comment_status' => "Pending for review",
                    'isPending' => "1",
                );
                
                \DB::table('help_support')->insert($insert);
                $this->check = "1";
                $this->message = "Comment submitted successfully";
                $this->return_data = "1";
            }else{
                $this->check = "1";
                $this->message = "User not found";
                $this->return_data = "0";
            }                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getHelpComment(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0)
            {
                $user = $user_info->get()->first();
                $insert = array(
                    "user_id" => $request->user_id
                );
                
                $data = DB::table('help_support')->where($insert)->get();
                foreach($data as $val){
                    $val->created_at = isset($val->created_at) ? date('M d', strtotime($val->created_at)) : "";
                    $val->subject = isset($val->subject) ? $val->subject : "";
                    $val->issue = isset($val->issue) ? $val->issue : "";
                    $val->isPending = isset($val->isPending) ? $val->isPending : "1";
                    $val->comment_status = isset($val->comment_status) ? $val->comment_status : "";
                    $val->admin_comment = isset($val->admin_comment) ? $val->admin_comment : "";
                    $val->admin_reply_at = isset($val->admin_reply_at) ? $val->admin_reply_at : "";
                    $rec = USER::where('id', $val->user_id)->first();
                    $val->name = $rec['first_name'].' '.$rec['last_name'];
                } 
                $this->check = "1";
                $this->message = "Comment listed successfully";
                $this->return_data = $data;
            }else{
                $this->check = "1";
                $this->message = "User not found";
                $this->return_data = [];
            }                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getHelpReplyComment(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'id' => 'required',
            'api_key' => 'required',
            'admin_comment' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $comment_info = DB::table('help_support')->where('id', $request->id)->get();
            if ($comment_info->count() > 0)
            {
                $update = array(
                    // 'comment_status' => isset($request->comment_status)?$request->comment_status:"",
                    'comment_status' => "Review Completed",
                    'admin_comment' => $request->admin_comment,
                    'isPending' => "0",
                    'admin_reply_at' => date('Y-m-d H:i:s')
                );
                
                \DB::table('help_support')->where('id', $request->id)->update($update);
                $this->check = "1";
                $this->message = "Admin reply submitted successfully";
                $this->return_data = "1";
            }else{
                $this->check = "1";
                $this->message = "Comment not found";
                $this->return_data = "0";
            }                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getCommentByAdmin(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0)
            {
                $user = $user_info->get()->first();
                $insert = array(
                    "id" => $request->id
                );
                
                $val = DB::table('help_support')->where($insert)->first();
                if(isset($val)){
                    $val->created_at = isset($val->created_at) ? date('M d', strtotime($val->created_at)) : "";
                    $val->subject = isset($val->subject) ? $val->subject : "";
                    $val->issue = isset($val->issue) ? $val->issue : "";
                    $val->isPending = isset($val->isPending) ? $val->isPending : "1";
                    $val->comment_status = isset($val->comment_status) ? $val->comment_status : "";
                    $val->admin_comment = isset($val->admin_comment) ? $val->admin_comment : "";
                    $val->admin_reply_at = isset($val->admin_reply_at) ? date('M d', strtotime($val->admin_reply_at)) : "";
                    $rec = USER::where('id', $val->user_id)->first();
                    $val->name = $rec['first_name'].' '.$rec['last_name'];
                    $this->check = "1";
                    $this->message = "Admin reply Comment listed successfully";
                    $this->return_data = $val;
                } else {
                    $this->check = "1";
                    $this->message = "Comment not found";
                    $this->return_data = [];
                }
                
            }else{
                $this->check = "1";
                $this->message = "User not found";
                $this->return_data = [];
            }                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function employers(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();

                $facility_name = array();
                if($user->facility_id && $user->facility_id != 'null'){
                    $facility_name = Facility::whereIn('id', json_decode($user->facility_id))->pluck('name')->toArray();
                }

                $this->check = "1";
                $this->message = "Employers listed successfully";
                $this->return_data = $facility_name;
    
            }else{


                $this->check = "1";
                $this->message = "User not found";
                // $this->return_data = $result;

            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);


    }

    public function updateAccInfo(Request $request)
    {
        
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'email' => 'string|email|unique:users,email,'.$request->user_id,
            'mobile' => 'unique:users,mobile,'.$request->user_id,
        ]);
        
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            $user_info = USER::where('id', $request->user_id);
            
            if ($user_info->count() > 0) {
                $reg_user = $user_info->get()->first();
                $reg_user->first_name = $request->first_name?$request->first_name:$reg_user->first_name;
                $reg_user->last_name = $request->last_name?$request->last_name:$reg_user->last_name;
                $reg_user->email = $request->email?$request->email:$reg_user->email;
                $reg_user->user_name = $request->user_name?$request->user_name:$reg_user->user_name;
                $reg_user->mobile = $request->mobile?$request->mobile:$reg_user->mobile;
                
                $affected = DB::table('users')
                ->where('id', $request->user_id)
                ->update(['first_name' => $reg_user->first_name, 'last_name' => $reg_user->last_name, 'email' => $reg_user->email, 'user_name' => $reg_user->user_name, 'mobile' => $reg_user->mobile]);
                $return_data = $this->recruiterData($reg_user);

                $this->check = "1";
                $this->message = "Account Update successfully";
                $this->return_data = $return_data;
             
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }  
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);


    }

    public function accountInfo(Request $request){

        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);


            if ($user_info->count() > 0) {

                $reg_user = $user_info->get()->first();
                $return_data = $this->recruiterData($reg_user);

                $this->check = "1";
                $this->message = "Account info found";
                $this->return_data = $return_data;
    
            }else{


                $this->check = "1";
                $this->message = "User not found";
                // $this->return_data = $result;

            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);


    }

    public function accountInfoByMobile(Request $request){

        $validator = \Validator::make($request->all(), [
            'mobile' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('mobile', $request->mobile);


            if ($user_info->count() > 0) {

                $reg_user = $user_info->get()->first();

               

                $return_data = $this->recruiterData($reg_user);

                $this->check = "1";
                $this->message = "Account info found";
                $this->return_data = $return_data;
    
            }else{


                $this->check = "1";
                $this->message = "User not found";
                // $this->return_data = $result;

            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);


    }

    public function applications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            
            $this->message = $validator->errors()->first();
            if(!isset($request->user_id)){
                $status = ['Apply','Screening','Submitted','Offered','Draft Offer','Onboarding','Working','Done'];
                $records = array();
                foreach($status as $value)
                {
                    
                    if($value == 'Apply'){
                        $value = 'New';
                    }
                    $records[] = ['name' => $value, 'applicants' => 0];
                }
                $this->check = "1";
                $this->message = "Data listed";
                $this->return_data = $records;
                return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
            }
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) 
            {
                $user = $user_info->get()->first();
                // $status = ['Apply','Screening','Submitted','Offered','Onboarding','Working','Done','Rejected','Blocked','Hold'];
                $status = ['Apply','Screening','Submitted','Offered','Draft Offer','Onboarding','Working','Done'];
                $return_data = array();
                $draftoffer = DB::table('offer_jobs')->where(['recruiter_id' => $request->user_id, 'is_draft' => '1'])->count();
                foreach($status as $value)
                {
                    $whereCond = [
                        'jobs.recruiter_id' => $user->id,
                        'jobs.is_closed' => "0",
                        'offers.status' => $value,
                    ];
                    $ret = Job::select('jobs.id as job_id', 'jobs.*','offers.id as offer_id')
                        ->join('offers', 'jobs.id', '=', 'offers.job_id')
                        ->where($whereCond);

                    if($value == 'Apply'){
                        $value = 'New';
                    }
                    $return_data[] = ['name' => $value, 'applicants' => $ret->count()];
                }
                $records = [];
                foreach($return_data as $rec)
                {    
                    if(($rec['name'] == 'Offered') && !empty($rec['applicants'])){
                        $rec['applicants'] = $rec['applicants']-$draftoffer;
                    }else{
                        $rec['applicants'] = $rec['applicants'];
                    }
                    if($rec['name'] == 'Draft Offer'){
                        $rec['applicants'] = $draftoffer;
                    }
                    $records[] = $rec;
                }
                $this->check = "1";
                $this->message = "Data listed";
                $this->return_data = $records;
            }else{
                $this->check = "1";
                $this->message = "User not found";
                // $this->return_data = $result;
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function newApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();

                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Apply'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*','offers.id as offer_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->where($whereCond)
                    // ->orderBy('offers.created_at', 'desc')
                ->orderBy('offers.nurse_id', 'desc');
                $job_data = $ret->get();
                
                $result = [];
                $record = [];
                foreach($job_data as $rec)
                {
                    $result['worker_id'] = $rec['id'];
                    $result['worker_user_id'] = $rec['user_id'];
                    $result['job_id'] = $rec['job_id'];
                    $result['worker_image'] = isset($rec['worker_image'])? url("public/images/nurses/profile/" . $rec['worker_image']):"";
                    $result['worker_name'] = isset($rec['first_name'])?$rec['first_name'].' '.$rec['last_name']:"";
                    $result['job_name'] = isset($rec['job_name'])?$rec['job_name']:"";
                    $result['facility_name'] = isset($rec['facility_name'])?$rec['facility_name']:"";
                    $result['preferred_assignment_duration'] = isset($rec['worker_weeks_assignment'])?$rec['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($rec['worker_shift_time_of_day'])?$rec['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($rec['highest_nursing_degree'])?$rec['highest_nursing_degree']:"";
                    $result['specialty'] = isset($rec['specialty'])?$rec['specialty']:"";
                    $result['experience'] = isset($rec['experience'])?$rec['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }
                $this->check = "1";
                $this->message = "Data listed successfully";
                $this->return_data = $record;
    
            }else{
                $this->check = "1";
                $this->message = "User not found";

            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function screeningApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Screening'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $screening)
                {
                    $result['worker_id'] = $screening['id'];
                    $result['worker_user_id'] = $screening['user_id'];
                    $result['job_id'] = $screening['job_id'];
                    $result['worker_image'] = isset($screening['worker_image'])? url("public/images/nurses/profile/" . $screening['worker_image']):"";
                    $result['worker_name'] = isset($screening['first_name'])?$screening['first_name'].' '.$screening['last_name']:"";
                    $result['job_name'] = isset($screening['job_name'])?$screening['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($screening['worker_weeks_assignment'])?$screening['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($screening['worker_shift_time_of_day'])?$screening['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($screening['highest_nursing_degree'])?$screening['highest_nursing_degree']:"";
                    $result['specialty'] = isset($screening['specialty'])?$screening['specialty']:"";
                    $result['experience'] = isset($screening['experience'])?$screening['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Screening Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function submittedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Submitted'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $submitted)
                {
                    $result['worker_id'] = $submitted['id'];
                    $result['worker_user_id'] = $submitted['user_id'];
                    $result['job_id'] = $submitted['job_id'];
                    $result['worker_image'] = isset($submitted['worker_image'])? url("public/images/nurses/profile/" . $submitted['worker_image']):"";
                    $result['worker_name'] = isset($submitted['first_name'])?$submitted['first_name'].' '.$submitted['last_name']:"";
                    $result['job_name'] = isset($submitted['job_name'])?$submitted['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($submitted['worker_weeks_assignment'])?$submitted['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($submitted['worker_shift_time_of_day'])?$submitted['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($submitted['highest_nursing_degree'])?$submitted['highest_nursing_degree']:"";
                    $result['specialty'] = isset($submitted['specialty'])?$submitted['specialty']:"";
                    $result['experience'] = isset($submitted['experience'])?$submitted['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Submitted Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function offeredApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Offered'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $offered)
                {
                    $result['worker_id'] = $offered['id'];
                    $result['worker_user_id'] = $offered['user_id'];
                    $result['job_id'] = $offered['job_id'];
                    $result['worker_image'] = isset($offered['worker_image'])? url("public/images/nurses/profile/" . $offered['worker_image']):"";
                    $result['worker_name'] = isset($offered['first_name'])?$offered['first_name'].' '.$offered['last_name']:"";
                    $result['job_name'] = isset($offered['job_name'])?$offered['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($offered['worker_weeks_assignment'])?$offered['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($offered['worker_shift_time_of_day'])?$offered['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($offered['highest_nursing_degree'])?$offered['highest_nursing_degree']:"";
                    $result['specialty'] = isset($offered['specialty'])?$offered['specialty']:"";
                    $result['experience'] = isset($offered['experience'])?$offered['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Offered Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function onboardingApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Onboarding'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $onboarding)
                {
                    $result['worker_id'] = $onboarding['id'];
                    $result['worker_user_id'] = $onboarding['user_id'];
                    $result['job_id'] = $onboarding['job_id'];
                    $result['worker_image'] = isset($onboarding['worker_image'])? url("public/images/nurses/profile/" . $onboarding['worker_image']):"";
                    $result['worker_name'] = isset($onboarding['first_name'])?$onboarding['first_name'].' '.$onboarding['last_name']:"";
                    $result['job_name'] = isset($onboarding['job_name'])?$onboarding['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($onboarding['worker_weeks_assignment'])?$onboarding['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($onboarding['worker_shift_time_of_day'])?$onboarding['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($onboarding['highest_nursing_degree'])?$onboarding['highest_nursing_degree']:"";
                    $result['specialty'] = isset($onboarding['specialty'])?$onboarding['specialty']:"";
                    $result['experience'] = isset($onboarding['experience'])?$onboarding['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Onboarding Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function workingApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Working'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $working)
                {
                    $result['worker_id'] = $working['id'];
                    $result['worker_user_id'] = $working['user_id'];
                    $result['job_id'] = $working['job_id'];
                    $result['worker_image'] = isset($working['worker_image'])? url("public/images/nurses/profile/" . $working['worker_image']):"";
                    $result['worker_name'] = isset($working['first_name'])?$working['first_name'].' '.$working['last_name']:"";
                    $result['job_name'] = isset($working['job_name'])?$working['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($working['worker_weeks_assignment'])?$working['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($working['worker_shift_time_of_day'])?$working['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($working['highest_nursing_degree'])?$working['highest_nursing_degree']:"";
                    $result['specialty'] = isset($working['specialty'])?$working['specialty']:"";
                    $result['experience'] = isset($working['experience'])?$working['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Working Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function doneApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Done'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $done)
                {
                    $result['worker_id'] = $done['id'];
                    $result['worker_user_id'] = $done['user_id'];
                    $result['job_id'] = $done['job_id'];
                    $result['worker_image'] = isset($done['worker_image'])? url("public/images/nurses/profile/" . $done['worker_image']):"";
                    $result['worker_name'] = isset($done['first_name'])?$done['first_name'].' '.$done['last_name']:"";
                    $result['job_name'] = isset($done['job_name'])?$done['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($done['worker_weeks_assignment'])?$done['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($done['worker_shift_time_of_day'])?$done['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($done['highest_nursing_degree'])?$done['highest_nursing_degree']:"";
                    $result['specialty'] = isset($done['specialty'])?$done['specialty']:"";
                    $result['experience'] = isset($done['experience'])?$done['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Done Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function rejectedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'offers.status' => 'Rejected'
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')    
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->leftJoin('keywords', 'jobs.job_type', '=', 'keywords.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');
                $job_data = $ret->get();
               
                $result = [];
                $record = [];
                foreach($job_data as $done)
                {
                    $result['worker_id'] = $done['id'];
                    $result['worker_user_id'] = $done['user_id'];
                    $result['job_id'] = $done['job_id'];
                    $result['worker_image'] = isset($done['worker_image'])? url("public/images/nurses/profile/" . $done['worker_image']):"";
                    $result['worker_name'] = isset($done['first_name'])?$done['first_name'].' '.$done['last_name']:"";
                    $result['job_name'] = isset($done['job_name'])?$done['job_name']:"";
                    $result['preferred_assignment_duration'] = isset($done['worker_weeks_assignment'])?$done['worker_weeks_assignment']:"";
                    $result['preferred_shift'] = isset($done['worker_shift_time_of_day'])?$done['worker_shift_time_of_day']:"";
                    $result['profession'] = isset($done['highest_nursing_degree'])?$done['highest_nursing_degree']:"";
                    $result['specialty'] = isset($done['specialty'])?$done['specialty']:"";
                    $result['experience'] = isset($done['experience'])?$done['experience'].' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Done Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function blockedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'blocked_users.recruiter_id' => $user->id
                ];
                
                $ret = DB::table('blocked_users')
                    ->leftJoin('offers', 'blocked_users.worker_id', '=', 'offers.nurse_id')    
                    ->leftJoin('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->leftJoin('users', 'nurses.user_id', '=', 'users.id')  
                    ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')  
                    ->leftJoin('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc')
                    ->select('jobs.id as job_id', 'jobs.*', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'offers.id as offer_id', 'facilities.name as facility_name');
                $job_data = $ret->get();
                $result = [];
                $record = [];
                foreach($job_data as $blocked)
                {
                    $result['worker_id'] = $blocked->id;
                    $result['worker_user_id'] = $blocked->user_id;
                    $result['job_id'] = $blocked->job_id;
                    $result['worker_image'] = isset($blocked->worker_image)? url("public/images/nurses/profile/" . $blocked->worker_image):"";
                    $result['worker_name'] = isset($blocked->first_name)?$blocked->first_name.' '.$blocked->last_name:"";
                    $result['job_name'] = isset($blocked->job_name)?$blocked->job_name:"";
                    $result['preferred_assignment_duration'] = isset($blocked->worker_weeks_assignment)?$blocked->worker_weeks_assignment:"";
                    $result['preferred_shift'] = isset($blocked->worker_shift_time_of_day)?$blocked->worker_shift_time_of_day:"";
                    $result['profession'] = isset($blocked->highest_nursing_degree)?$blocked->highest_nursing_degree:"";
                    $result['specialty'] = isset($blocked->specialty)?$blocked->specialty:"";
                    $result['experience'] = isset($blocked->experience)?$blocked->experience.' Years of Experience':"";
                    $result['recently'] = 'Recently Added';
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Blocked Data listed successfully";
                $this->return_data = $record;
            }else{

                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function recruiterData($reg_user){

        $userArray = array();

        $userArray['id'] = $reg_user->id;
        $userArray['first_name'] = $reg_user->first_name;
        $userArray['last_name'] = $reg_user->last_name;
        $userArray['email'] = $reg_user->email;
        $userArray['user_name'] = $reg_user->user_name;
        $userArray['mobile'] = $reg_user->mobile;
        $userArray['fcm_token'] = $reg_user->fcm_token;
        $userArray['facilty_id'] = $reg_user->facility_id;

        $userArray['facility_name'] = array();
        if($reg_user->facility_id && $reg_user->facility_id != 'null'){
            
            $userArray['facility_name']  = Facility::whereIn('id', json_decode($reg_user->facility_id))->pluck('name')->toArray();
        }

        return $userArray;

    }

    public function applicationStatus(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
                $status = ['Screening','Submitted','Offered','Onboarding','Working','Done','Rejected','Blocked','Hold'];
                $this->check = "1";
                $this->message = "Data listed";
                $this->return_data = $status;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function updateStatus(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'offer_id' => 'required',
            'status' => 'required',
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $notification = [];
            $status = null;
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $current_date = now()->format('Y-m-d');
                $records = Offer::where('id', $request->offer_id)->first();
                $fields = new Notification();
                $fields->created_by = $records['nurse_id'];
                $fields->job_id = $records['job_id'];
                $fields->updated_at = NULL;
                $fields->deleted_at = NULL;
                $fields->created_at = date('Y-m-d h:i:s');  

                if($request->status == 'Offered'){
                    if(isset($records)){
                        $request->offer_date = isset($request->offer_date)?$request->offer_date:now()->format('Y-m-d');
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'expiration' => $request->offer_date));
                        $fields->title = 'Submitted to Offered';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved from Submitted to Offered by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                        }
                        if(isset($status)){
                            $this->check = "1";
                            $this->message = "Status updated successfully";
                            $this->return_data = $status;
                        }else{
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already Status";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                    
                }else if($request->status == 'Onboarding'){
                    if(isset($records)){
                        $request->on_board_date = isset($request->on_board_date)?$request->on_board_date:now()->format('Y-m-d');
                        
                        // Check total job hire
                        $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$records['job_id'].'"');
                        if(isset($is_vacancy)){
                            $is_vacancy = $is_vacancy[0]->hired_jobs;
                        }else{
                            $is_vacancy = '0';
                        }
                        $check_rec = Job::where('id', $records['job_id'])->first();
                        if($check_rec['position_available'] > $is_vacancy)
                        {
                            $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->on_board_date));
                            $fields->title = 'Offered to Onboarding';
                            $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved from Offered to Onboarding by '. $user->first_name.' '.$user->last_name .' from Employer name';
                            $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                            if($status != 0){
                                if(empty($check)){
                                    $notification = $fields->save();
                                }else{
                                    $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                                }
                            }
                            if(isset($status)){
                                $this->check = "1";
                                $this->message = "Status updated successfully";
                                $this->return_data = $status;
                            }else{
                                $this->check = "1";
                                $this->message = "Status not updated, This job have already Status";
                            }
                        }else{
                            if($check_rec['active'] != 0){
                                Job::where([
                                    'id' => $check_rec['job_id'],
                                ])->update(['is_closed' => '1']);
                            }
                            // Job::where([
                            //     'id' => $check_rec['job_id'],
                            // ])->update(['is_closed' => '1']);
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already fullfill Positions";
                        }

                        
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else if($request->status == 'Working'){
                    if(isset($records)){
                        $request->working_date = isset($request->working_date)?$request->working_date:now()->format('Y-m-d');
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->working_date));
                        $fields->title = 'Working to Done';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved from Working to Done by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                        }
                        if(isset($status)){
                            $this->check = "1";
                            $this->message = "Status updated successfully";
                            $this->return_data = $status;
                        }else{
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already Status";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else if($request->status == 'Done'){
                    if(isset($records)){
                        $request->start_date = isset($request->start_date)?$request->start_date:now()->format('Y-m-d');
                        $request->end_date = isset($request->end_date)?$request->end_date:now()->format('Y-m-d');
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->start_date, 'expiration' => $request->end_date));
                        $fields->title = 'Done';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was Done by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                        }
                        if(isset($status)){
                            $this->check = "1";
                            $this->message = "Status updated successfully";
                            $this->return_data = $status;
                        }else{
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already Status";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else if($request->status == 'Submitted'){
                    if(isset($records)){
                        $request->submitted_date = isset($request->submitted_date)?$request->submitted_date:now()->format('Y-m-d');
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->submitted_date));
                        $fields->title = 'Screening to Submitted';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved from Screening to Submitted by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                        }
                        if(isset($status)){
                            $this->check = "1";
                            $this->message = "Status updated successfully";
                            $this->return_data = $status;
                        }else{
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already Status";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else if($request->status == 'Rejected'){
                    if(isset($records)){
                        $offer = Offer::where('id', $request->offer_id)->first();
                        $whereCond = [
                            'nurse_id' => $offer['nurse_id'],
                            'job_id' => $offer['job_id']
                        ];
                        $checkoffer = DB::table('job_saved')->where($whereCond)->first();
                        if(isset($checkoffer))
                        {
                            DB::table('job_saved')->where('id', $checkoffer->id)->update(['is_delete' => '1']);
                        }else{
                            $insert = array(
                                "nurse_id" => $offer['nurse_id'],
                                'job_id' => $offer['job_id'],
                                'is_save' => '0',
                                'is_delete' => '1',
                            );
                            DB::table('job_saved')->insert($insert);
                        }

                        $request->rejected_date = isset($request->rejected_date)?$request->rejected_date:now()->format('Y-m-d');
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->rejected_date));
                        $fields->title = 'Rejected';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved to Rejected by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                        }
                        if(isset($status)){
                            $this->check = "1";
                            $this->message = "Status updated successfully";
                            $this->return_data = $status;
                        }else{
                            $this->check = "1";
                            $this->message = "Status not updated, This job have already Status";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else if($request->status == 'Blocked'){
                    if(isset($records))
                    {
                        if(isset($request->recruiter_id)){
                            $offer = Offer::where('id', $request->offer_id)->first();
                            $whereCond = [
                                'worker_id' => $offer['nurse_id'],
                                'recruiter_id' => $request->recruiter_id
                            ];
                            $checkoffer = DB::table('blocked_users')->where($whereCond)->first();
                            if(isset($checkoffer))
                            {
                                DB::table('blocked_users')->where('id', $checkoffer->id)->update(['status' => '1']);
                            }else{
                                $insert = array(
                                    "worker_id" => $offer['nurse_id'],
                                    'recruiter_id' => $request->recruiter_id,
                                    'status' => '1'
                                );
                                DB::table('blocked_users')->insert($insert);
                            }

                            $request->blocked_date = isset($request->blocked_date)?$request->blocked_date:now()->format('Y-m-d h:i:s');
                            $status = DB::table('offers')->where('id', $request->offer_id)->update(array('updated_at' => $request->blocked_date));
                            // $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status, 'start_date' => $request->blocked_date));
                            $fields->title = 'Blocked';
                            $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved to Blocked by '. $user->first_name.' '.$user->last_name .' from Employer name';
                            $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                            if($status != 0){
                                if(empty($check)){
                                    $notification = $fields->save();
                                }else{
                                    $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                                }
                            }
                            if(isset($status)){
                                $this->check = "1";
                                $this->message = "Status updated successfully";
                                $this->return_data = $status;
                            }else{
                                $this->check = "1";
                                $this->message = "Status not updated, This job have already Status";
                            }
                        }else{
                            $this->check = "1";
                            $this->message = "Recruiter not found";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }else{
                    if(isset($records)){
                        $status = DB::table('offers')->where('id', $request->offer_id)->update(array('status' => $request->status));
                        $fields->title = 'New to Screening';
                        $fields->text = 'Your Application for job '. $records['job_id'] .' at Medical Solutions Recruiter was moved from New to Screening by '. $user->first_name.' '.$user->last_name .' from Employer name';
                        $check = Notification::where(['job_id' => $records['job_id'], 'created_by' => $records['nurse_id']])->first();
                        if($status != 0){
                            if(empty($check)){
                                $notification = $fields->save();
                            }else{
                                $notification = DB::table('notifications')->where('id', $check->id)->update(array('title' => $fields->title, 'text' => $fields->text, 'updated_at' => date('Y-m-d h:i:s')));
                            }
                            if(isset($status)){
                                $this->check = "1";
                                $this->message = "Status updated successfully";
                                $this->return_data = $status;
                            }else{
                                $this->check = "1";
                                $this->message = "Status not updated, This job have already Status";
                            }
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "Offer Record not found";
                    }
                }

            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);


    }

    public function draftedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
            if(!isset($request->user_id)){
                $this->check = "1";
                $this->message = "Draft Applications listed successfully";
                $this->return_data = '';
            }
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "0",
                    'jobs.is_hidden' => "0",
                    'jobs.active' => '0',
                ];

                $ret = Job::select('jobs.id as job_id', 'jobs.*', 'users.id as user_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'facilities.name as facility_name')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->join('users', 'jobs.recruiter_id', '=', 'users.id')
                    ->where($whereCond)
                    ->orderBy('jobs.created_at', 'desc');
                $job_data = $ret->get();

                $result = [];
                $record = [];
                foreach($job_data as $draft)
                {
                    $result['recruiter_id'] = $draft['user_id'];
                    $result['job_id'] = $draft['job_id'];
                    $result['recruiter_image'] = isset($draft['worker_image'])? url("public/images/nurses/profile/" . $draft['worker_image']):"";
                    $result['recruiter_name'] = isset($draft['first_name'])?$draft['first_name'].' '.$draft['last_name']:"";
                    $result['job_type'] = isset($draft['job_type'])?$draft['job_type']:"";
                    $result['type'] = isset($draft['type'])?$draft['type']:"";
                    $result['job_name'] = isset($draft['job_name'])?$draft['job_name']:"";
                    $result['job_location'] = isset($draft['job_location'])?$draft['job_location']:"";
                    $result['job_city'] = isset($draft['job_city'])?$draft['job_city']:"";
                    $result['job_state'] = isset($draft['job_state'])?$draft['job_state']:"";
                    $result['employer_weekly_amount'] = isset($draft['employer_weekly_amount'])?$draft['employer_weekly_amount']:"";
                    $result['preferred_assignment_duration'] = isset($draft['preferred_assignment_duration'])?$draft['preferred_assignment_duration']:"";
                    $result['preferred_shift'] = isset($draft['preferred_shift'])?$draft['preferred_shift']:"";
                    $result['facility_name'] = isset($draft['facility_name'])?$draft['facility_name']:"";
                    $result['profession'] = isset($draft['profession'])?$draft['profession']:"";
                    $result['specialty'] = isset($draft['preferred_specialty'])?$draft['preferred_specialty']:"";
                    $result['experience'] = isset($draft['preferred_experience'])?$draft['preferred_experience']:"";
                    $record[] =  $result;
                }

                $this->check = "1";
                $this->message = "Draft Applications listed successfully";
                $this->return_data = $record;
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function draftJob($type = "create", Request $request)
    {
        $messages = [
            "job_photos.*.mimes" => "Photos should be image or png jpg",
            "job_photos.*.max" => "Photos should not be more than 5mb"
        ];

        $validation_array = [
            'user_id' => 'required',
            'api_key' => 'required',
            'job_name' => 'required',
            // 'job_type' => 'required',
            'preferred_specialty' => 'required',
            'preferred_work_location' => 'required',
            'preferred_assignment_duration' => 'required',
            'preferred_hourly_pay_rate' => 'required|numeric',
            'description' => 'required|min:10',
            
        ];
        
        $validator = \Validator::make($request->all(), $validation_array, $messages);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $facility_id = Facility::where('created_by', $request->user_id)->get()->first();
            if(isset($facility_id) && !empty($facility_id)){
                $facility_id = $facility_id->id;
            }else{
                $facility_id =  '';
            }
            
            $update_array["facility_id"] = (isset($request->facility_id) && $request->facility_id != "") ? $request->facility_id : $facility_id;
            $update_array["preferred_assignment_duration"] = (isset($request->preferred_assignment_duration) && $request->preferred_assignment_duration != "") ? $request->preferred_assignment_duration : "";
            $update_array["job_name"] = (isset($request->job_name) && $request->job_name != "") ? $request->job_name : "";
            $update_array["preferred_specialty"] = (isset($request->preferred_specialty) && $request->preferred_specialty != "") ? $request->preferred_specialty : "";
            $update_array["job_type"] = (isset($request->job_type) && $request->job_type != "") ? $request->job_type : "415";
            $update_array["type"] = (isset($request->type) && $request->type != "") ? $request->type : "";
            $update_array["job_location"] = (isset($request->preferred_work_location) && $request->preferred_work_location != "") ? $request->preferred_work_location : "";
            $update_array["preferred_work_location"] = (isset($request->preferred_work_location) && $request->preferred_work_location != "") ? $request->preferred_work_location : "";
            $preferred_days_of_the_week = (isset($request->preferred_days_of_the_week) && $request->preferred_days_of_the_week != "") ? json_decode($request->preferred_days_of_the_week) : [];
            if (is_array($preferred_days_of_the_week) && !empty($preferred_days_of_the_week)) {
                $update_array["preferred_days_of_the_week"] = implode(',', $preferred_days_of_the_week);
            }
            $update_array["preferred_hourly_pay_rate"] = (isset($request->preferred_hourly_pay_rate) && $request->preferred_hourly_pay_rate != "") ? $request->preferred_hourly_pay_rate : "";
            $update_array["description"] = (isset($request->description) && $request->description != "") ? $request->description : "";
            $update_array["active"] = (isset($request->active) && $request->active != "") ? $request->active : "0";

            $update_array["start_date"] = (isset($request->start_date) && $request->start_date != "") ? date('Y-m-d', strtotime($request->start_date)) : NULL;
            $update_array["end_date"] = (isset($request->end_date) && $request->end_date != "") ? date('Y-m-d', strtotime($request->end_date)) : NULL;
            $update_array["recruiter_id"] = (isset($request->recruiter_id) && $request->recruiter_id != "") ? $request->recruiter_id : $request->user_id;
            
            if (isset($request->job_video) && $request->job_video != "") {
                if (preg_match('/https?:\/\/(?:[\w]+\.)*youtube\.com\/watch\?v=[^&]+/', $request->job_video, $vresult)) {
                    $youTubeID = $this->parse_youtube($request->job_video);
                    $embedURL = 'https://www.youtube.com/embed/' . $youTubeID[1];
                    $update_array['video_embed_url'] = $embedURL;
                } elseif (preg_match('/https?:\/\/(?:[\w]+\.)*vimeo\.com(?:[\/\w]*\/videos?)?\/([0-9]+)[^\s]*+/', $request->job_video, $vresult)) {
                    $vimeoID = $this->parse_vimeo($request->job_video);
                    $embedURL = 'https://player.vimeo.com/video/' . $vimeoID[1];
                    $update_array['video_embed_url'] = $embedURL;
                }
            }
            
            /* create job */
            $update_array["created_by"] = (isset($request->user_id) && $request->user_id != "") ? $request->user_id : "";
            $job = Job::create($update_array);
            /* create job */

            if (!empty($job) && $job_photos = $request->file('job_photos')) {
                foreach ($job_photos as $job_photo) {
                    $job_photo_name_full = $job_photo->getClientOriginalName();
                    $job_photo_name = pathinfo($job_photo_name_full, PATHINFO_FILENAME);
                    $job_photo_ext = $job_photo->getClientOriginalExtension();
                    $job_photo_finalname = $job_photo_name . '_' . time() . '.' . $job_photo_ext;
                    //Upload Image
                    $job_id_val = ($type == "update") ? $job_id : $job->id;
                    $job_photo->storeAs('assets/jobs/' . $job_id_val, $job_photo_finalname);
                    JobAsset::create(['job_id' => $job_id_val, 'name' => $job_photo_finalname, 'filter' => 'job_photos']);
                }
            }
            
            if (isset($job)) {
                $insert_offer["nurse_id"] = $request->user_id;
                $insert_offer["created_by"] = $request->user_id;
                $insert_offer["job_id"] = $job['id'];
                $insert_offer["status"] = 'Screening';
                // $insert_offer["expiration"] = date("Y-m-d H:i:s", strtotime('+48 hours'));

                $offer = Offer::create($insert_offer);
            }

            if ($job) {
                $this->check = "1";
                $this->message = "Job drafted successfully";
                $this->return_data = $job;
            } else {
                $this->check = "0";
                $this->message = "Failed to create job, Please try again later";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function publishedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.created_by' => $user->id,
                    'jobs.is_closed' => "0",
                    'jobs.is_hidden' => "0",
                    'jobs.active' => '1'
                ];

                $ret = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*','offers.id as offer_id', 'offers.nurse_id', 'users.id as user_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'facilities.name as facility_name')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->leftJoin('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('users', 'jobs.recruiter_id', '=', 'users.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');

                $job_data = $ret->groupBy('id')->get();
                
                $result = [];
                $record = [];
                foreach($job_data as $published)
                {
                    $result['recruiter_id'] = $published['user_id'];
                    $result['job_id'] = $published['job_id'];
                    $result['total_applied'] = $published['workers_applied'];
                    $result['recruiter_image'] = isset($published['worker_image'])? url("public/images/nurses/profile/" . $published['worker_image']):"";
                    $result['recruiter_name'] = isset($published['first_name'])?$published['first_name'].' '.$published['last_name']:"";
                    $result['job_type'] = isset($published['job_type'])?$published['job_type']:"";
                    $result['type'] = isset($published['type'])?$published['type']:"";
                    $result['job_name'] = isset($published['job_name'])?$published['job_name']:"";
                    $result['job_location'] = isset($published['job_location'])?$published['job_location']:"";
                    $result['job_city'] = isset($published['job_city'])?$published['job_city']:"";  
                    $result['job_state'] = isset($published['job_state'])?$published['job_state']:"";
                    $result['preferred_assignment_duration'] = isset($published['preferred_assignment_duration'])?$published['preferred_assignment_duration']:"";
                    $result['preferred_shift'] = isset($published['preferred_shift'])?$published['preferred_shift']:"";
                    $result['employer_weekly_amount'] = isset($published['employer_weekly_amount'])?$published['employer_weekly_amount']:"";
                    // $result['recently'] = isset($published['start_date'])?'Posted on '.date('M j Y', strtotime($published['start_date'])):"";
                    $result['recently'] = isset($published['created_at'])?'Posted on '. date('M d Y', strtotime($published['created_at'])):"";
                    $result['facility_name'] = isset($published['facility_name'])?$published['facility_name']:"";
                    $result['profession'] = isset($published['profession'])?$published['profession']:"";
                    $result['specialty'] = isset($published['preferred_specialty'])?$published['preferred_specialty']:"";
                    $result['experience'] = isset($published['preferred_experience'])?$published['preferred_experience']:"";
                    $record[] =  $result;
                }
                
                $this->check = "1";
                $this->message = "published Applications listed successfully";
                $this->return_data = $record;
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function hiddenApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.created_by' => $user->id,
                    'jobs.is_closed' => "0",
                    'jobs.is_hidden' => "1",
                    'jobs.active' => '1'
                ];

                $ret = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*','offers.id as offer_id', 'offers.nurse_id', 'users.id as user_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'facilities.name as facility_name')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->leftJoin('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('users', 'jobs.recruiter_id', '=', 'users.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');

                $job_data = $ret->groupBy('id')->get();
                
                $result = [];
                $record = [];
                foreach($job_data as $published)
                {
                    $result['recruiter_id'] = $published['user_id'];
                    $result['job_id'] = $published['job_id'];
                    $result['total_applied'] = $published['workers_applied'];
                    $result['recruiter_image'] = isset($published['worker_image'])? url("public/images/nurses/profile/" . $published['worker_image']):"";
                    $result['recruiter_name'] = isset($published['first_name'])?$published['first_name'].' '.$published['last_name']:"";
                    $result['job_type'] = isset($published['job_type'])?$published['job_type']:"";
                    $result['type'] = isset($published['type'])?$published['type']:"";
                    $result['job_name'] = isset($published['job_name'])?$published['job_name']:"";
                    $result['job_location'] = isset($published['job_location'])?$published['job_location']:"";
                    $result['job_city'] = isset($published['job_city'])?$published['job_city']:"";  
                    $result['job_state'] = isset($published['job_state'])?$published['job_state']:"";
                    $result['preferred_assignment_duration'] = isset($published['preferred_assignment_duration'])?$published['preferred_assignment_duration']:"";
                    $result['preferred_shift'] = isset($published['preferred_shift'])?$published['preferred_shift']:"";
                    $result['employer_weekly_amount'] = isset($published['employer_weekly_amount'])?$published['employer_weekly_amount']:"";
                    $result['recently'] = isset($published['created_at'])?'Posted on '. date('M d Y', strtotime($published['created_at'])):"";
                    $result['facility_name'] = isset($published['facility_name'])?$published['facility_name']:"";
                    $result['profession'] = isset($published['profession'])?$published['profession']:"";
                    $result['specialty'] = isset($published['preferred_specialty'])?$published['preferred_specialty']:"";
                    $result['experience'] = isset($published['preferred_experience'])?$published['preferred_experience']:"";
                    $record[] =  $result;
                }
                
                $this->check = "1";
                $this->message = "published Applications listed successfully";
                $this->return_data = $record;
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function closedApplications(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'jobs.is_closed' => "1",
                    'jobs.active' => '1'
                ];

                $ret = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*','offers.id as offer_id', 'offers.nurse_id', 'users.id as user_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'facilities.name as facility_name')
                    ->leftJoin('facilities', function ($join) {
                        $join->on('facilities.id', '=', 'jobs.facility_id');
                    })
                    ->leftJoin('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('users', 'jobs.recruiter_id', '=', 'users.id')
                    ->where($whereCond)
                    ->orderBy('offers.created_at', 'desc');

                $job_data = $ret->groupBy('id')->get();
                
                $result = [];
                $record = [];
                foreach($job_data as $published)
                {
                    $result['recruiter_id'] = $published['user_id'];
                    $result['job_id'] = $published['job_id'];
                    $result['total_applied'] = $published['workers_applied'];
                    $result['recruiter_image'] = isset($published['worker_image'])? url("public/images/nurses/profile/" . $published['worker_image']):"";
                    $result['recruiter_name'] = isset($published['first_name'])?$published['first_name'].' '.$published['last_name']:"";
                    $result['job_type'] = isset($published['job_type'])?$published['job_type']:"";
                    $result['type'] = isset($published['type'])?$published['type']:"";
                    $result['job_name'] = isset($published['job_name'])?$published['job_name']:"";
                    $result['job_location'] = isset($published['job_location'])?$published['job_location']:"";
                    $result['job_city'] = isset($published['job_city'])?$published['job_city']:"";  
                    $result['job_state'] = isset($published['job_state'])?$published['job_state']:"";
                    $result['preferred_assignment_duration'] = isset($published['preferred_assignment_duration'])?$published['preferred_assignment_duration']:"";
                    $result['preferred_shift'] = isset($published['preferred_shift'])?$published['preferred_shift']:"";
                    $result['employer_weekly_amount'] = isset($published['employer_weekly_amount'])?$published['employer_weekly_amount']:"";
                    $result['recently'] = isset($published['created_at'])?'Posted on '. date('M d Y', strtotime($published['created_at'])):"";
                    $result['facility_name'] = isset($published['facility_name'])?$published['facility_name']:"";
                    $result['profession'] = isset($published['profession'])?$published['profession']:"";
                    $result['specialty'] = isset($published['preferred_specialty'])?$published['preferred_specialty']:"";
                    $result['experience'] = isset($published['preferred_experience'])?$published['preferred_experience']:"";
                    $record[] =  $result;
                }
                
                $this->check = "1";
                $this->message = "published Applications listed successfully";
                $this->return_data = $record;
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function hideStatusApplication(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'api_key' => 'required',
            'is_hidden' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $job_info = Job::where('id', $request->job_id);
            if ($job_info->count() > 0) {
                $job = $job_info->first();
                
                $whereCond = [
                    'id' => $job['id']
                ];
                if(isset($job)){
                    Job::where($whereCond)->update(['is_hidden' => $request->is_hidden]);
                    $this->check = "1";
                    if($request->is_hidden == '1'){
                        $this->message = "Applications hide successfully";
                    }else{
                        $this->message = "Applications unhide successfully";
                    }
                    
                }else{
                    $this->check = "0";
                    $this->message = "Applications not hide";
                }
                
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message], 200);
    }

    public function closeStatusApplication(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'api_key' => 'required',
            'is_closed' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $job_info = Job::where('id', $request->job_id);
            if ($job_info->count() > 0) {
                $job = $job_info->first();
                
                $whereCond = [
                    'id' => $job['id']
                ];
                if(isset($job)){
                    Job::where($whereCond)->update(['is_closed' => $request->is_closed]);
                    $this->check = "1";
                    if($request->is_closed == '1'){
                        $this->message = "Applications closed successfully";
                    }else{
                        $this->message = "Applications open successfully";
                    }
                    
                }else{
                    $this->check = "0";
                    $this->message = "Applications not closed";
                }
                
            }else{
                $this->check = "1";
                $this->message = "User not found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message], 200);
    }

    public function workerDetails(Request $request)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $experiencesTypes = $this->getExperienceTypes()->pluck('title', 'id');
        $licenseStatus = $this->getSearchStatus()->pluck('title', 'id');
        $licenseType = $this->getLicenseType()->pluck('title', 'id');

        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'worker_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                $worker_info  = Nurse::where('id', $request->worker_id);
                
                if($worker_info->count() > 0){
                    $worker = $worker_info->get()->first();
                    
                    $whereCond = [
                            'facilities.active' => true,
                            'offers.nurse_id' => $worker->id,
                            // 'users.id' => $worker->user_id,
                        ];

                    $respond = Nurse::select('keywords.filter as job_filter', 'keywords.title as job_title', 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'offers.id as offer_id', 'user_id as worker_user_id', 'offers.nurse_id as worker_id', 'users.first_name', 'users.last_name', 'users.image', 'facilities.name as employer_name', 'offers.status as offer_status', 'offers.start_date as status_date', 'offers.expiration as status_enddate')
                    ->join('offers','offers.nurse_id', '=', 'nurses.id')
                    ->leftJoin('users','users.id', '=', 'nurses.user_id')
                    ->join('jobs', 'offers.job_id', '=', 'jobs.id')
                    ->leftJoin('keywords','jobs.job_type', '=', 'keywords.id')
                    ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                    ->where($whereCond);
                    $job_data = $respond->get();

                    foreach($job_data as $job){
                        $job->preferred_shift_definition = (isset($preferredShifts[$job->preferred_shift]) &&  $preferredShifts[$job->preferred_shift] != "") ?  $preferredShifts[$job->preferred_shift] : "";
                        $job->job_location = isset($workLocations[$job->job_location]) ? $workLocations[$job->job_location] : "";
                        $job->preferred_specialty_definition = isset($specialties[$job->preferred_specialty])  ? $specialties[$job->preferred_specialty] : "";
                        $job->preferred_assignment_duration_definition = isset($assignmentDurations[$job->preferred_assignment_duration]) ? $assignmentDurations[$job->preferred_assignment_duration] : "";
                        if(isset($job->preferred_assignment_duration_definition)){
                            $assignment = explode(" ", $job->preferred_assignment_duration_definition);
                            $job->preferred_assignment_duration_definition = $assignment[0]; // 12 Week
                        }
                       
                        $job->preferred_work_location_definition = isset($workLocations[$job->preferred_work_location]) ? $workLocations[$job->preferred_work_location] : "";
                        // $job->total_experience = isset($job->experience_as_acute_care_facility)?$job->experience_as_acute_care_facility:0+isset($job->experience_as_ambulatory_care_facility)?$job->experience_as_ambulatory_care_facility:0;                        
                        $job->total_experience = isset($job->experience)?$job->experience:0;                        
                        $job->total_experience = (int)$job->total_experience;
                        $job->resume_definition = (isset($job->resume) && $job->resume != "") ? url('storage/assets/nurses/resumes/' . $worker->id . '/' . $job->resume) : "";                      
                        $job->highest_nursing_degree_definition = (isset($worker->highest_nursing_degree) && $worker->highest_nursing_degree != "") ? \App\Providers\AppServiceProvider::keywordTitle($worker->highest_nursing_degree) : "";                       
                        $job->image = (isset($job->image) && $job->image != "") ? url("public/images/nurses/profile/" . $job->image) : "";
                        
                        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                        if ($job->image) {
                            $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $job->image);
                            if ($t) {
                                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $job->image);
                            }
                        }
                        // Certificate
                        $certitficate = [];
                        $cert = Certification::where(['nurse_id' => $worker->id])->whereNull('deleted_at')->get();
                        if ($cert->count() > 0) {
                            $c = $cert;
                            foreach ($c as $key => $v) {
                                $crt_data['certificate_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                                $crt_data['license_number'] = (isset($v->license_number) && $v->license_number != "") ? $v->license_number : "";
                                $crt_data['organization'] = (isset($v->organization) && $v->organization != "") ? $v->organization : "";
                                $crt_data['effective_date'] = (isset($v->effective_date) && $v->effective_date != "") ? date('m/d/Y', strtotime($v->effective_date)) : "";
                                $crt_data['expiration_date'] = (isset($v->expiration_date) && $v->expiration_date != "") ? date('m/d/Y', strtotime($v->expiration_date)) : "";
                                $crt_data['renewal_date'] = (isset($v->renewal_date) && $v->renewal_date != "") ? date('m/d/Y', strtotime($v->renewal_date)) : "";

                                $crt_data['certificate_image'] = (isset($v->certificate_image) && $v->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $v->certificate_image) : "";

                                $certificate_image_base = "";
                                if ($v->certificate_image) {
                                    $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/certifications/' . $v->certificate_image);
                                    if ($t) {
                                        $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/nurses/certifications/' . $v->certificate_image);
                                    }
                                }
                                $crt_data['created_at'] = (isset($v->created_at) && $v->created_at != "") ? $v->created_at : "";
                                $certitficate[] = $crt_data;
                            }
                        }
                        $job->certitficate = $certitficate;
                    }

                    $response = [];
                    
                    foreach($job_data as $res){
                        
                        if(isset($res->recruiter_id) && $res->recruiter_id == $request->user_id){
                            $response['main'] = $res;
                        }else{ 
                            $response['other_Facility_jobs'][] =  $res;
                        }
                    }

                    $this->check = "1";
                    $this->message = "Worker details listed successfully";
                    $this->return_data = $response;


                }else{
                    $this->check = "1";
                    $this->message = "Worker Not Found";
                }
                
            }else{
                $this->check = "1";
                $this->message = "User Not Found";
            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function recruiterDetails(Request $request)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $experiencesTypes = $this->getExperienceTypes()->pluck('title', 'id');
        $licenseStatus = $this->getSearchStatus()->pluck('title', 'id');
        $licenseType = $this->getLicenseType()->pluck('title', 'id');

        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'worker_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker = Nurse::where('id', $request->worker_id)->get()->first();
            $user = USER::where('id', $worker->user_id)->get()->first();

            if(!empty($worker))
            {
                $whereCond = [
                    'facilities.active' => true,
                    'offers.nurse_id' => $worker->id,
                    'jobs.id' => $request->job_id
                ];

                $respond = Nurse::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'keywords.filter as job_filter', 'keywords.title as job_title', 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'offers.id as offer_id', 'user_id as worker_user_id', 'offers.nurse_id as worker_id', 'users.first_name', 'users.last_name', 'users.image', 'facilities.name as employer_name',  'offers.status as offer_status', 'offers.start_date as status_date', 'offers.expiration as status_enddate')
                ->join('offers','offers.nurse_id', '=', 'nurses.id')
                ->leftJoin('users','users.id', '=', 'nurses.user_id')
                ->join('jobs', 'offers.job_id', '=', 'jobs.id')
                ->leftJoin('keywords','jobs.job_type', '=', 'keywords.id')
                ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                ->where($whereCond);
                $job_data = $respond->get();
                
                foreach($job_data as $job)
                {
                    if(isset($job->license_type)){
                        $job->license_type_definition = DB::table('keywords')->where('id', '=', $job->license_type)->select('title')->first();
                        $job->license_type_definition = isset($job->license_type_definition)?$job->license_type_definition->title:'';
                    }
                    if(isset($job->worker_license_type)){
                        $job->worker_license_type_definition = DB::table('keywords')->where('id', '=', $job->worker_license_type)->select('title')->first();
                        $job->worker_license_type_definition = isset($job->worker_license_type_definition)?$job->worker_license_type_definition->title:'';
                    }
                    // Get recruiter details and name
                    if(isset($job->recruiter_id)){
                        $recruiter = DB::table('users')->where('id', '=', $job->recruiter_id)->select('first_name','last_name')->first();
                        $job->recruiter_first_name = isset($recruiter['first_name'])?$recruiter['first_name']:'';
                        $job->recruiter_last_name = isset($recruiter['last_name'])?$recruiter['last_name']:'';
                    }

                    if(isset($job->vaccinations) && !empty($job->vaccinations)){
                        $job->vaccinations = json_decode($job->vaccinations);
                        $vaccination = [];
                        $nums = 0;
                        foreach($job->vaccinations as $rec){
                            $vaccination[] = DB::table('keywords')->where('id', '=', $rec)->select('title','id')->first();
                            if(isset($vaccination[$nums]) && $vaccination[$nums]->id == 420){
                                $covid = $vaccination[$nums]->title;
                            }
                            if(isset($vaccination[$nums]) && $vaccination[$nums]->id == 421){
                                $flu = $vaccination[$nums]->title;
                            }
                            $nums++;
                        }
                        $job->vaccinations = $vaccination;
                    }

                    if(isset($job->worker_vaccination)){
                        $job->worker_vaccination = json_decode($job->worker_vaccination);
                        $worker_vaccination = [];
                        // $num = 0;
                        foreach($job->worker_vaccination as $recs){
                            $worker_vaccination[] = $recs;
                            // $num++;
                        }
                        $job->worker_vaccination = $worker_vaccination;
                    }

                    if(isset($job->certificate) && !empty($job->certificate)){
                        $job->certificate = json_decode($job->certificate);
                        $certificate = [];
                        $num_count = 0;
                        foreach($job->certificate as $result){
                            $certificate[] = DB::table('keywords')->where('id', '=', $result)->select('title','id')->first();
                            if($certificate[$num_count]->id == 43){
                                $job->ACLS = 'ACLS';
                            }
                            if($certificate[$num_count]->id == 44){
                                $job->BLS = 'BLS';
                            }
                            if($certificate[$num_count]->id == 89){
                                $job->CCRN = 'CCRN';
                            }
                            if($certificate[$num_count]->id == 193){
                                $job->PALS = 'PALS';
                            }
                            if($certificate[$num_count]->id !=  193 && $certificate[$num_count]->id !=  89 && $certificate[$num_count]->id !=  44 && $certificate[$num_count]->id !=  43){
                                $job->title = $job->title;
                            }
                            
                            $num_count++;
                        }
                        $job->certificate = $certificate;
                    }

                    if(isset($job->skills)){
                        $job->skills = json_decode($job->skills);
                        $skills = [];
                        $nums = 0;
                        foreach($job->skills as $result){
                            $skills[] = DB::table('keywords')->where('id', '=', $result)->select('title','id')->first();
                            if($skills[$nums]->id == 422){
                                $job->skills_peds = $skills[$nums]->title;
                            }
                            $nums++;
                        }
                        $job->skills = $skills;
                    }
                    
                    $job->recency_of_reference = isset($job->recency_of_reference) ? $job->recency_of_reference.' month' : '';
                    $job->start_date = isset($job->start_date) ? $job->start_date : 'As Soon As Possible';
                    $job->preferred_specialty_definition = isset($specialties[$job->preferred_specialty])  ? $specialties[$job->preferred_specialty] : "";
                    $job->worker_specialty_definition = isset($specialties[$job->specialty])  ? $specialties[$job->specialty] : "";
                    $job->preferred_shift_definition = (isset($preferredShifts[$job->preferred_shift]) &&  $preferredShifts[$job->preferred_shift] != "") ?  $preferredShifts[$job->preferred_shift] : "";
                    $job->preferred_assignment_duration_definition = isset($assignmentDurations[$job->preferred_assignment_duration]) ? $assignmentDurations[$job->preferred_assignment_duration] : "";
                    
                    if(isset($job->preferred_assignment_duration_definition)){
                        $assignment = explode(" ", $job->preferred_assignment_duration_definition);
                        $job->preferred_assignment_duration_definition = $assignment[0]; // 12 Week
                    }
                   
                    $job->preferred_work_location_definition = isset($workLocations[$job->preferred_work_location]) ? $workLocations[$job->preferred_work_location] : "";
                    // $job->total_experience = isset($job->experience_as_acute_care_facility)?$job->experience_as_acute_care_facility:""+isset($job->experience_as_ambulatory_care_facility)?$job->experience_as_ambulatory_care_facility:"";                        
                    $job->total_experience = isset($job->experience)?$job->experience:"";                        
                    $job->total_experience = (int)$job->total_experience;
                    $job->resume_definition = (isset($job->resume) && $job->resume != "") ? url('storage/assets/nurses/resumes/' . $worker->id . '/' . $job->resume) : "";                      
                    $job->highest_nursing_degree_definition = (isset($worker->highest_nursing_degree) && $worker->highest_nursing_degree != "") ? \App\Providers\AppServiceProvider::keywordTitle($worker->highest_nursing_degree) : "";                       
                    $job->image = (isset($job->image) && $job->image != "") ? url("public/images/nurses/profile/" . $job->image) : "";
                    
                    $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                    if ($job->image) {
                        $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $job->image);
                        if ($t) {
                            $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $job->image);
                        }
                    }
                    // Certificate
                    $worker_certitficate = [];
                    $cert = Certification::where(['nurse_id' => $worker->id])->whereNull('deleted_at')->get();
                    if ($cert->count() > 0) {
                        $c = $cert;
                        foreach ($c as $key => $v) {
                            $crt_data['certificate_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                            $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                            $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                            $crt_data['license_number'] = (isset($v->license_number) && $v->license_number != "") ? $v->license_number : "";
                            $crt_data['organization'] = (isset($v->organization) && $v->organization != "") ? $v->organization : "";
                            $crt_data['effective_date'] = (isset($v->effective_date) && $v->effective_date != "") ? date('m/d/Y', strtotime($v->effective_date)) : "";
                            $crt_data['expiration_date'] = (isset($v->expiration_date) && $v->expiration_date != "") ? date('m/d/Y', strtotime($v->expiration_date)) : "";
                            $crt_data['renewal_date'] = (isset($v->renewal_date) && $v->renewal_date != "") ? date('m/d/Y', strtotime($v->renewal_date)) : "";

                            $crt_data['certificate_image'] = (isset($v->certificate_image) && $v->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $v->certificate_image) : "";
                            $certificate_image_base = "";
                            if ($v->certificate_image) {
                                $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/certifications/' . $v->certificate_image);
                                if ($t) {
                                    $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/nurses/certifications/' . $v->certificate_image);
                                }
                            }
                            $crt_data['created_at'] = (isset($v->created_at) && $v->created_at != "") ? $v->created_at : "";
                            $worker_certitficate[] = $crt_data;
                            
                        }
                    }
                    $job->worker_certitficate = $worker_certitficate;
                }
                
                $result = [];
                $result[0]['job'] = $job->job_state;
                $result[0]['worker'] = $job->state;
                $result[0]['name'] = 'location';

                $result[1]['job'] = $job->preferred_specialty_definition;
                $result[1]['worker'] = $job->worker_specialty_definition;
                $result[1]['name'] = 'speciality';

                $result[2]['job'] = $job->license_type_definition;
                $result[2]['worker'] = $job->worker_license_type_definition;
                $result[2]['name'] = 'License_type';

                $result[3]['job'] = $job->preferred_experience;
                $result[3]['worker'] = $job->total_experience;
                $result[3]['name'] = 'Experience';

                $result[4]['job'] = $job->number_of_references;
                $result[4]['worker'] = $job->worker_number_of_references;
                $result[4]['name'] = 'No_of_Reference';

                $result[5]['job'] = $job->min_title_of_reference;
                $result[5]['worker'] = $job->worker_min_title_of_reference;
                $result[5]['name'] = 'min_title_of_reference';

                $result[6]['job'] = $job->recency_of_reference;
                $result[6]['worker'] = $job->worker_recency_of_reference;
                $result[6]['name'] = 'recency_of_reference';

                $result[7]['job'] = $job->BLS;
                $result[7]['worker'] = $job->worker_BLS;
                $result[7]['name'] = 'BLS';

                $result[8]['job'] = $job->ACLS;
                $result[8]['worker'] = $job->worker_ACLS;
                $result[8]['name'] = 'ACLS';

                $result[9]['job'] = $job->PALS;
                $result[9]['worker'] = $job->worker_PALS;
                $result[9]['name'] = 'PALS';

                $result[10]['job'] = $job->CCRN;
                $result[10]['worker'] = $job->worker_CCRN;
                $result[10]['name'] = 'CCRN';

                $result[11]['job'] = $job->skills_peds;
                $result[11]['worker'] = $job->skills_checklists;
                $result[11]['name'] = 'skills_checklists';

                $result[12]['name'] = 'ss_number';
                $result[12]['worker'] = $job->worker_ss_number;

                $result[13]['job'] = $job->traveler_distance_from_facility;
                $result[13]['worker'] = $job->distance_from_your_home;
                $result[13]['name'] = 'distance';

                $result[14]['job'] = $job->facility;
                $result[14]['worker'] = $job->facilities_you_worked_at;
                $result[14]['name'] = 'facility';

                $result[15]['job'] = $job->clinical_setting;
                $result[15]['worker'] = $job->clinical_setting_you_prefer;
                $result[15]['name'] = 'clinical_setting';

                $result[16]['job'] = $job->scrub_color;
                $result[16]['worker'] = $job->worker_scrub_color;
                $result[16]['name'] = 'scrub_color';

                $result[17]['job'] = $job->facility_city;
                $result[17]['worker'] = $job->worker_facility_city;
                $result[17]['name'] = 'facility_city';

                $result[18]['job'] = $job->facility_state;
                $result[18]['worker'] = $job->worker_facility_state_code;
                $result[18]['name'] = 'facility_state';

                $result[19]['job'] = $job->start_date;
                $result[19]['worker'] = $job->worker_start_date;
                $result[19]['name'] = 'start_date';

                $result[20]['job'] = $job->rto;
                $result[20]['worker'] = $job->worker_rto;
                $result[20]['name'] = 'rto';

                $result[21]['job'] = $job->preferred_shift_definition;
                $result[21]['worker'] = $job->worker_shift_time_of_day;
                $result[21]['name'] = 'shifts';

                $result[22]['job'] = $job->hours_per_week;
                $result[22]['worker'] = $job->worker_hours_per_week;
                $result[22]['name'] = 'hours_weeks';

                $result[23]['job'] = $job->guaranteed_hours;
                $result[23]['worker'] = $job->worker_guaranteed_hours;
                $result[23]['name'] = 'guaranteed_hours';

                $result[24]['job'] = $job->hours_shift;
                $result[24]['worker'] = $job->worker_hours_shift;
                $result[24]['name'] = 'shift_hours';

                $result[25]['job'] = $job->preferred_assignment_duration_definition;
                $result[25]['worker'] = $job->worker_weeks_assignment;
                $result[25]['name'] = 'week_assignnment';

                $result[26]['job'] = $job->weeks_shift;
                $result[26]['worker'] = $job->worker_shifts_week;
                $result[26]['name'] = 'weeks_shift';

                $result[27]['job'] = $job->referral_bonus;
                $result[27]['worker'] = $job->worker_referral_bonus;
                $result[27]['name'] = 'refferel_bonus';

                $result[28]['job'] = $job->sign_on_bonus;
                $result[28]['worker'] = $job->worker_sign_on_bonus;
                $result[28]['name'] = 'signon_bonus';

                $result[29]['job'] = $job->completion_bonus;
                $result[29]['worker'] = $job->worker_completion_bonus;
                $result[29]['name'] = 'completion_bonus';

                $result[30]['job'] = $job->extension_bonus;
                $result[30]['worker'] = $job->worker_extension_bonus;
                $result[30]['name'] = 'extension_bonus';

                $result[31]['job'] = $job->other_bonus;
                $result[31]['worker'] = $job->worker_other_bonus;
                $result[31]['name'] = 'other_bonus';

                $result[32]['job'] = $job->actual_hourly_rate;
                $result[32]['worker'] = $job->worker_actual_hourly_rate;
                $result[32]['name'] = 'actual_hourly_rate';

                $result[33]['job'] = $job->feels_like_per_hour;
                $result[33]['worker'] = $job->worker_feels_like_hour;
                $result[33]['name'] = 'feels_like_per_hour';

                $result[34]['job'] = $job->orientation_rate;
                $result[34]['worker'] = $job->worker_orientation_rate;
                $result[34]['name'] = 'orientation_rate';

                $result[35]['job'] = $job->health_insaurance;
                $result[35]['worker'] = $job->worker_health_insurance;
                $result[35]['name'] = 'health_insurance';

                $result[36]['job'] = $job->weekly_taxable_amount;
                $result[36]['worker'] = $job->worker_weekly_taxable_amount;
                $result[36]['name'] = 'weekly_taxable';

                $result[37]['job'] = $job->weekly_non_taxable_amount;
                $result[37]['worker'] = $job->worker_weekly_non_taxable_amount;
                $result[37]['name'] = 'weekly_non_taxable';

                $result[38]['job'] = $job->employer_weekly_amount;
                $result[38]['worker'] = $job->worker_employer_weekly_amount;
                $result[38]['name'] = 'employer_weekly_amount';

                $result[39]['job'] = $job->goodwork_weekly_amount;
                $result[39]['worker'] = $job->worker_goodwork_weekly_amount;
                $result[39]['name'] = 'goodwork_weekly_amount';

                $result[40]['job'] = $job->total_employer_amount;
                $result[40]['worker'] = $job->worker_total_employer_amount;
                $result[40]['name'] = 'total_employer_amount';

                $result[41]['job'] = $job->total_goodwork_amount;
                $result[41]['worker'] = $job->worker_total_goodwork_amount;
                $result[41]['name'] = 'total_goodwork_amount';

                $result[42]['job'] = $job->total_contract_amount;
                $result[42]['worker'] = $job->worker_total_contract_amount;
                $result[42]['name'] = 'total_contract_amount';

                $result[43]['job'] = $job->Patient_ratio;
                $result[43]['worker'] = $job->worker_patient_ratio;
                $result[43]['name'] = 'Patient_ratio';

                $result[44]['job'] = $job->emr;
                $result[44]['worker'] = $job->worker_emr;
                $result[44]['name'] = 'emr';

                $result[45]['job'] = $job->Unit;
                $result[45]['worker'] = $job->worker_unit;
                $result[45]['name'] = 'unit';

                $result[46]['job'] = $job->Department;
                $result[46]['worker'] = $job->worker_department;
                $result[46]['name'] = 'Department';

                $result[47]['job'] = $job->goodwork_number;
                $result[47]['worker'] = $job->worker_goodwork_number;
                $result[47]['name'] = 'goodwork_number';

                $result[48]['job'] = isset($covid)?$covid:'';
                $result[48]['worker'] = $job->worker_vaccination[0];
                $result[48]['name'] = 'covid';

                $result[48]['job'] = isset($flu)?$flu:'';
                $result[48]['worker'] = $job->worker_vaccination[1];
                $result[48]['name'] = 'flu';

                $result[49]['job'] = $job->terms;
                $result[49]['worker'] = $job->worker_terms;
                $result[49]['name'] = 'terms';

                $result[50]['job'] = $job->driving_license;
                $result[50]['worker'] = $job->driving_license;
                $result[50]['name'] = 'type';

                $result[51]['job'] = '';
                $result[51]['worker'] = $job->worker_type;
                $result[51]['name'] = 'driving license';

                $result[52]['job'] = '';
                $result[52]['worker'] = $job->worked_at_facility_before;
                $result[52]['name'] = 'worked_at_here_last_timing';

                $result[53]['worker_id'] = $job->worker_id; 
                $result[53]['job_id'] = $job->job_id; 
                $result[53]['worker_user_id'] = $job->user_id; 
                $result[53]['recruiter_name'] = $job->recruiter_first_name.' '.$job->recruiter_last_name; 
                $result[53]['employer_name'] = $job->facility; 
                $result[53]['workers_applied'] = $job->workers_applied; 
                $result[53]['worker_diploma'] = $job->diploma; 
                $result[53]['posted_on'] = $job->status_date; 
                $result[53]['description'] = $job->description;
                
                $this->check = "1";
                $this->message = "Worker details listed successfully";
                $this->return_data = $result;
            }else{
                $this->check = "1";
                $this->message = "Worker Not Found";
            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);

    }

    public function nurseOfferStatus($type, $user, $status)
    {
        $controller = new Controller();
        $specialties = $controller->getSpecialities()->pluck('title', 'id');
        $assignmentDurations = $this->getAssignmentDurations()->pluck('title', 'id');
        $shifts = $this->getShifts()->pluck('title', 'id');
        $workLocations = $controller->getGeographicPreferences()->pluck('title', 'id');
        $leadershipRoles = $this->getLeadershipRoles()->pluck('title', 'id');
        $seniorityLevels = $this->getSeniorityLevel()->pluck('title', 'id');
        $jobFunctions = $this->getJobFunction()->pluck('title', 'id');
        $ehrProficienciesExp = $this->getEHRProficiencyExp()->pluck('title', 'id');
        $weekDays = $this->getWeekDayOptions();
        $nursingDegrees = $this->getNursingDegrees()->pluck('title', 'id');
        $certifications = $this->getCertifications()->pluck('title', 'id');
        $preferredShifts = $this->getPreferredShift()->pluck('title', 'id');
        $experiencesTypes = $this->getExperienceTypes()->pluck('title', 'id');
        
        $licenseStatus = $this->getSearchStatus()->pluck('title', 'id');
        $licenseType = $this->getLicenseType()->pluck('title', 'id');
        
        $nurse = Nurse::where('id', '=', $type)->get()->first();
        if(isset($nurse->id)){
            $offer = DB::select("SELECT * FROM `offers` WHERE nurse_id = '$nurse->id' AND status = '$status'");
            if(!empty($offer)){
                $offer = $offer[0];
            }

            $user = User::where('id', '=', $nurse->user_id)->get()->first();

        }
        
        $availability = Availability::where('nurse_id', '=', $nurse->id)->get()->first();
        
        /* Hourly rate and availability */
        $hourly_rate_and_availability = "0";
        if ((isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") &&
            (isset($availability->shift_duration) && $availability->shift_duration != "") &&
            (isset($availability->assignment_duration) && $availability->assignment_duration != "") &&
            (isset($availability->preferred_shift) && $availability->preferred_shift != "") &&
            // (isset($availability->days_of_the_week) && $availability->days_of_the_week != "") &&
            (isset($availability->earliest_start_date) && $availability->earliest_start_date != "")
        ) $hourly_rate_and_availability = "1";
        /* Hourly rate and availability */

        $return_data['user_id'] = (isset($user->id) && $user->id != "") ? $user->id : $nurse->user_id;
        $return_data['nurse_id'] = (isset($nurse->id) && $nurse->id != "") ? $nurse->id : "";
        $return_data['offer_status'] = (isset($offer->status) && $offer->status != "") ? $offer->status : "";
        $return_data['role'] = (isset($user->role) && $user->role != "") ? $user->role : "";
        $return_data['fcm_token'] = (isset($user->fcm_token) && $user->fcm_token != "") ? $user->fcm_token : "";
        $return_data['fullName'] = (isset($user->fullName) && $user->fullName != "") ? $user->fullName : "";
        $return_data['date_of_birth'] = (isset($user->date_of_birth) && $user->date_of_birth != "") ? $user->date_of_birth : "";
        $return_data['driving_license'] = (isset($user->driving_license) && $user->driving_license != "") ? $user->driving_license : "";
        $return_data['security_number'] = (isset($user->security_number) && $user->security_number != "") ? $user->security_number : "";
        $return_data['email_notification'] = (isset($user->email_notification) && $user->email_notification != "") ? strval($user->email_notification) : "";
        $return_data['sms_notification'] = (isset($user->sms_notification) && $user->sms_notification != "") ? strval($user->sms_notification) : "";

        $return_data['first_name'] = (isset($user->first_name) && $user->first_name != "") ? $user->first_name : "";
        $return_data['last_name'] = (isset($user->last_name) && $user->last_name != "") ? $user->last_name : "";
        $return_data['email'] = (isset($user->email) && $user->email != "") ? $user->email : "";

        $return_data['image'] = (isset($user->image) && $user->image != "") ? url("public/images/nurses/profile/" . $user->image) : "";

        $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
        if (isset($user->image)) {
            $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $user->image);
            if ($t) {
                $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $user->image);
            }
        }
        // $return_data["image_base"] = 'data:image/jpeg;base64,' . base64_encode($profileNurse);

        $return_data['mobile'] = (isset($user->mobile) && $user->mobile != "") ? $user->mobile : "";
        $return_data['nursing_license_state'] = (isset($nurse->nursing_license_state) && $nurse->nursing_license_state != "") ? $nurse->nursing_license_state : "";
        $return_data['nursing_license_number'] = (isset($nurse->nursing_license_number) && $nurse->nursing_license_number != "") ? $nurse->nursing_license_number : "";
        $return_data['authority_Issue'] = (isset($nurse->authority_Issue) && $nurse->authority_Issue != "") ? $nurse->authority_Issue : "";
        $return_data['highest_nursing_degree'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? $nurse->highest_nursing_degree : "";
        $return_data['highest_nursing_degree_definition'] = (isset($nurse->highest_nursing_degree) && $nurse->highest_nursing_degree != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->highest_nursing_degree) : "";
        $return_data['specialty'] = $spl = [];
        if (isset($nurse->specialty) && $nurse->specialty != "") {
            $specialty_array = explode(",", $nurse->specialty);
            if (is_array($specialty_array)) {
                foreach ($specialty_array as $key => $spl_id) {
                    $spl_name = (isset($specialties[$spl_id])) ? $specialties[$spl_id] : "";
                    $spl[] = ['id' => $spl_id, 'name' => $spl_name];
                }
            }
            $return_data['specialty'] = $spl;
        }

        $return_data['license_type'] = (isset($nurse->license_type) && $nurse->license_type != "") ? strval($nurse->license_type) : "";
        $return_data['license_type_definition'] = (isset($nurse->license_type) && $nurse->license_type != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_type) : "";
        $return_data['license_status'] = (isset($nurse->license_status) && $nurse->license_status != "") ? strval($nurse->license_status) : "";
        $return_data['license_status_definition'] = (isset($nurse->license_status) && $nurse->license_status != "") ? \App\Providers\AppServiceProvider::keywordTitle($nurse->license_status) : "";
        $return_data['license_expiry_date'] = (isset($nurse->license_expiry_date) && $nurse->license_expiry_date != "") ? strval($nurse->license_expiry_date) : "";
        $return_data['license_issue_date'] = (isset($nurse->license_issue_date) && $nurse->license_issue_date != "") ? strval($nurse->license_issue_date) : "";
        $return_data['license_renewal_date'] = (isset($nurse->license_renewal_date) && $nurse->license_renewal_date != "") ? strval($nurse->license_renewal_date) : "";

        $return_data['hourly_pay_rate'] = (isset($nurse->hourly_pay_rate) && $nurse->hourly_pay_rate != "") ? strval($nurse->hourly_pay_rate) : "";
        $return_data['days_of_the_week'] = [];
        
        // Education details
        $return_data['college_uni_name'] = (isset($nurse->college_uni_name) && $nurse->college_uni_name != "") ? $nurse->college_uni_name : "";
        $return_data['study_area'] = (isset($nurse->study_area) && $nurse->study_area != "") ? $nurse->study_area : "";
        $return_data['graduation_date'] = (isset($nurse->graduation_date) && $nurse->graduation_date != "") ? $nurse->graduation_date : "";

        $return_data['unavailable_dates'] = array();
        if($availability->unavailable_dates){
            $return_data['unavailable_dates'] = explode(',',$availability->unavailable_dates);
        }

        $experience = [];
        $exp = Experience::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($exp->count() > 0) {
            $e = $exp;
            foreach ($e as $key => $v) {
                $crt_data['experience_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['position_title'] = (isset($v->position_title) && $v->position_title != "") ? $v->position_title : "";
                $crt_data['unit'] = (isset($v->unit) && $v->unit != "") ? $v->unit : "";
                $crt_data['start_date'] = (isset($v->start_date) && $v->start_date != "") ? date('m/d/Y', strtotime($v->start_date)) : "";
                $crt_data['end_date'] = (isset($v->end_date) && $v->end_date != "") ? date('m/d/Y', strtotime($v->end_date)) : "";
                $crt_data['is_current_job'] = (isset($v->is_current_job) && $v->is_current_job != "") ? $v->is_current_job : "";
                $crt_data["experience_as_acute_care_facility"] = (isset($nurse->experience_as_acute_care_facility) && $nurse->experience_as_acute_care_facility != "") ? $nurse->experience_as_acute_care_facility : "";
                $crt_data["experience_as_ambulatory_care_facility"] = (isset($nurse->experience_as_ambulatory_care_facility) && $nurse->experience_as_ambulatory_care_facility != "") ? $nurse->experience_as_ambulatory_care_facility : "";
                $exp_acute_care = isset($nurse->experience_as_acute_care_facility)? $nurse->experience_as_acute_care_facility : '0';
                $exp_ambulatory_care = isset($nurse->experience_as_ambulatory_care_facility)? $nurse->experience_as_ambulatory_care_facility : '0';
                $crt_data['total_experience'] = $exp_acute_care+$exp_ambulatory_care;
                $crt_data['total_experience'] = (int)$crt_data['total_experience'];
                $experience[] = $crt_data;
        
            }
        }
        $return_data['experience'] = $experience;
        /* experience */

        /* certitficate */
        $certitficate = [];
        $cert = Certification::where(['nurse_id' => $nurse->id])->whereNull('deleted_at')->get();
        if ($cert->count() > 0) {
            $c = $cert;
            foreach ($c as $key => $v) {
                // if ($v->deleted_at != "") {
                $crt_data['certificate_id'] = (isset($v->id) && $v->id != "") ? $v->id : "";
                $crt_data['type'] = (isset($v->type) && $v->type != "") ? $v->type : "";
                $crt_data['type_definition'] = (isset($certifications[$v->type]) && $certifications[$v->type] != "") ? $certifications[$v->type] : "";
                $crt_data['license_number'] = (isset($v->license_number) && $v->license_number != "") ? $v->license_number : "";
                $crt_data['organization'] = (isset($v->organization) && $v->organization != "") ? $v->organization : "";
                $crt_data['effective_date'] = (isset($v->effective_date) && $v->effective_date != "") ? date('m/d/Y', strtotime($v->effective_date)) : "";
                $crt_data['expiration_date'] = (isset($v->expiration_date) && $v->expiration_date != "") ? date('m/d/Y', strtotime($v->expiration_date)) : "";
                $crt_data['renewal_date'] = (isset($v->renewal_date) && $v->renewal_date != "") ? date('m/d/Y', strtotime($v->renewal_date)) : "";

                $crt_data['certificate_image'] = (isset($v->certificate_image) && $v->certificate_image != "") ? url('storage/assets/nurses/certifications/' . $nurse->id . '/' . $v->certificate_image) : "";

                $certificate_image_base = "";
                if ($v->certificate_image) {
                    $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/certifications/' . $v->certificate_image);
                    if ($t) {
                        $facility_logo = \Illuminate\Support\Facades\Storage::get('assets/nurses/certifications/' . $v->certificate_image);
                    }
                }
                // $crt_data['certificate_image_base'] = ($certificate_image_base != "") ? 'data:image/jpeg;base64,' . base64_encode($certificate_image_base) : "";


                // $crt_data['active'] = (isset($v->active) && $v->active != "") ? $v->active : "";
                // $crt_data['deleted_at'] = (isset($v->deleted_at) && $v->deleted_at != "") ? $v->deleted_at : "";
                   $crt_data['created_at'] = (isset($v->created_at) && $v->created_at != "") ? $v->created_at : "";
                    // $crt_data['updated_at'] = (isset($v->updated_at) && $v->updated_at != "") ? $v->updated_at : ""; 
                $certitficate[] = $crt_data;
                // }
            }
        }
        $return_data['certitficate'] = $certitficate;
        $return_data['resume'] = (isset($nurse->resume) && $nurse->resume != "") ? url('storage/assets/nurses/resumes/' . $nurse->id . '/' . $nurse->resume) : "";
        /* certitficate */

        return $return_data;
    }
    
    // Remove extra charecter
    function RemoveSpecialChar($str) 
    {
        $res = str_replace( array('[', ']', '/', 'null', "\"", ","), "", $str);
        return $res;
    }

    public function workerInformation(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker_info  = Nurse::where('id', $request->worker_id);
            
            if ($worker_info->count() > 0) {
                $worker = $worker_info->get()->first();
                $user_info = USER::where('id', $worker->user_id);
                if($user_info->count() > 0){
                    $user = $user_info->get()->first();
                    $worker_name = $user->first_name.' '.$user->last_name;
                    $worker_img = $user->image;
                    $whereCond = [
                            'facilities.active' => true,
                            'users.id' => $worker->user_id,
                            'nurses.id' => $worker->id,
                            'jobs.id' => $request->job_id
                        ];
                        
                    $respond = Nurse::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'offers.status as offer_status', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'nurses.block_scheduling as worker_block_scheduling', 'nurses.float_requirement as worker_float_requirement', 'nurses.facility_shift_cancelation_policy as worker_facility_shift_cancelation_policy', 'nurses.contract_termination_policy as worker_contract_termination_policy', 'offers.start_date as posted_on', 'jobs.created_at as created_at')
                                    ->join('users','users.id', '=', 'nurses.user_id')
                                    ->leftJoin('offers','offers.nurse_id', '=', 'nurses.id')
                                    ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                                    ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                    ->where($whereCond);
                    $job_data = $respond->groupBy('jobs.id')->first();
                    $job_data = $worker;
                    $job_data['worker_block_scheduling'] = $job_data['block_scheduling'];
                    $job_data['worker_float_requirement'] = $job_data['float_requirement'];
                    $job_data['worker_facility_shift_cancelation_policy'] = $job_data['facility_shift_cancelation_policy'];
                    $job_data['worker_contract_termination_policy'] = $job_data['contract_termination_policy'];
                    
                    if(empty($job_data)){
                        $whereCond1 =  [
                            'facilities.active' => true,
                            'jobs.id' => $request->job_id
                        ];

                        $worker_jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'offers.start_date as posted_on', 'jobs.created_at as created_at')
                        // ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                        ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                        ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                        ->where($whereCond1)->groupBy('jobs.id')->first();
                        $job_data['workers_applied'] = isset($worker_jobs['workers_applied'])?$worker_jobs['workers_applied']:'';
                        $job_data['worker_contract_termination_policy'] = $worker_jobs['contract_termination_policy'];
                        $job_data['job_id'] = $worker_jobs['job_id'];
                        $job_data['facility_name'] = $worker_jobs['facility_name'];
                        $job_data['facility_city'] = $worker_jobs['facility_city'];
                        $job_data['facility_state'] = $worker_jobs['facility_state'];
                        $job_data['created_at'] = $worker_jobs['created_at'];
                    }
                        // if(strtotime($job_data['posted_on'] > 0 ))
                        // {
                        //     $job_data['posted_on'] = $job_data['posted_on'];
                        // }else{
                        //     $job_data['posted_on'] = $job_data['offer_created_at'];
                        // }
                    
                    $job = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*')->where(['id' => $request->job_id])->first();
                    $job_data['posted_on'] = $job['created_at'];
                    if(isset($job_data['recruiter_id']) && !empty($job_data['recruiter_id'])){
                        $recruiter_info = USER::where('id', $job_data['recruiter_id'])->get()->first();
                        $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
                    }else{
                        $recruiter_info = USER::where('id', $job['recruiter_id'])->get()->first();
                        $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
                    }
                    $worker_reference = NURSE::select('nurse_references.name','nurse_references.min_title_of_reference','nurse_references.recency_of_reference')
                    ->leftJoin('nurse_references','nurse_references.nurse_id', '=', 'nurses.id')
                    ->where('nurses.id', $worker->id)->get();

                    
                    $worker_reference_name = '';
                    $worker_reference_title ='';
                    $worker_reference_recency_reference ='';
                    
                    foreach($worker_reference as $val){
                        if(!empty($val['name'])){
                            $worker_reference_name = $val['name'].','.$worker_reference_name;
                        }
                        if(!empty($val['min_title_of_reference'])){
                            $worker_reference_title = $val['min_title_of_reference'].','.$worker_reference_title;
                        }
                        if(!empty($val['recency_of_reference'])){
                            $worker_reference_recency_reference = $val['recency_of_reference'].','.$worker_reference_recency_reference;
                        }
                    }
                    
                    // Check total job hire
                    $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$job['id'].'"');
                    if(isset($is_vacancy)){
                        $is_vacancy = $is_vacancy[0]->hired_jobs;
                    }else{
                        $is_vacancy = '0';
                    }
                    
                    // Jobs speciality with experience 
                    $speciality = explode(',',$job['preferred_specialty']);
                    $experiences = explode(',',$job['preferred_experience']);
                    $exp = [];
                    $spe = [];
                    $specialities = [];
                    $i = 0;
                    foreach($speciality as $special){
                        $spe[] = $special;
                        $i++;
                    }
                    foreach($experiences as $experience){
                        $exp[] = $experience;
                    }
                   
                    for($j=0; $j< $i; $j++){
                        $specialities[$j]['spe'] = $spe[$j]; 
                        $specialities[$j]['exp'] = $exp[$j]; 
                    }

                    // Worker speciality
                    $worker_speciality = explode(',',$worker->specialty);
                    $worker_experiences = explode(',',$worker->experience);
                    $worker_exp = [];
                    $worker_spe = [];
                    $worker_specialities = [];
                    $i = 0;
                    foreach($speciality as $special){
                        $worker_spe[] = $special;
                        $i++;
                    }
                    foreach($experiences as $experience){
                        $worker_exp[] = $experience;
                    }
                   
                    for($j=0; $j< $i; $j++){
                        $worker_specialities[$j]['spe'] = $worker_spe[$j]; 
                        $worker_specialities[$j]['exp'] = $worker_exp[$j]; 
                    }

                    $worker_certificate = [];
                    // $skills_checklists = [];
                    $vaccinations = explode(',',$job['vaccinations']);
                    $worker_vaccination = json_decode($job_data['worker_vaccination']);
                    $worker_certificate_name = json_decode($job_data['worker_certificate_name']);
                    $worker_certificate = json_decode($job_data['worker_certificate']);
                    $skills_checklists = explode(',', $job_data['skills_checklists']);
                    $i=0;
                    foreach($skills_checklists as $rec)
                    {
                        if(isset($rec) && !empty($rec)){
                            $skills_checklists[$i] = url('public/images/nurses/skill/'.$rec);
                            $i++;
                        }
                        
                    }
                    $vacc_image = NurseAsset::where(['filter' => 'vaccination', 'nurse_id' => $worker->id])->get();
                    $cert_image = NurseAsset::where(['filter' => 'certificate', 'nurse_id' => $worker->id])->get();
                    $certificate = explode(',',$job['certificate']); 
                    if(isset($job_data['recruiter_id'])){
                        $recruiter_info = User::where('id', $job_data['recruiter_id'])->first();
                    }else{
                        $recruiter_info = User::where('id', $job['recruiter_id'])->first();
                    }
                    
                    $result = [];
                    $result['job_id'] = isset($job['id'])?$job['id']:"";
                    $result['description'] = isset($job['description'])?$job['description']:"";
                    $result['posted_on'] = isset($job_data['posted_on'])?date('M j Y', strtotime($job_data['posted_on'])):"";
                    $result['type'] = isset($job['type'])?$job['type']:"";
                    $result['terms'] = isset($job['terms'])?$job['terms']:"";
                    $result['job_name'] = isset($job['job_name'])?$job['job_name']:"";
                    $result['total_applied'] = isset($job['workers_applied'])?$job['workers_applied']:"";
                    $result['department'] = isset($job['Department'])?$job['Department']:"";
                    $result['worker_name'] = isset($worker_name)?$worker_name:"";
                    $result['worker_image'] = isset($worker_img)?url("public/images/nurses/profile/" . $worker_img):"";
                    $result['recruiter_id'] = isset($job_data['recruiter_id'])?$job_data['recruiter_id']:$job['recruiter_id'];
                    $result['recruiter_image'] = isset($recruiter_info['image'])?url("public/images/nurses/profile/" . $recruiter_info['image']):"";
                    $result['recruiter_name'] = $recruiter_name;
                    $result['offer_status'] = isset($job_data['offer_status'])?$job_data['offer_status']:"";
                    
                    if(isset($job_data['worked_at_facility_before']) && ($job_data['worked_at_facility_before'] == 'yes')){
                        $recs = true;
                    }else{
                        $recs = false;
                    }

                    if(isset($job_data['license_type']) && ($job_data['license_type'] != null) && ($job_data['profession'] == $job_data['license_type'])){
                        $profession = true;
                    }else{
                        $profession = false;
                    }
                    if(isset($job_data['specialty']) && ($job_data['specialty'] != null) && ($job_data['preferred_specialty'] == $job_data['specialty'])){
                        $speciality = true;
                    }else{
                        $speciality = false;
                    }
                    if(isset($job_data['experience']) && ($job_data['experience'] != null) && ($job_data['preferred_experience'] == $job_data['experience'])){
                        $experience = true;
                    }else{
                        $experience = false;
                    }
                    $countable = explode(',',$worker_reference_name);
                    $num = [];
                    foreach($countable as $rec){
                        if(!empty($rec)){
                            $num[] = $rec;        
                        }
                    }
                    $countable = count($num);
                    if($job_data['number_of_references'] == $countable){
                        $worker_ref_num = true;
                    }else{
                        $worker_ref_num = false;
                    }

                    $worker_info = [];
                    // $data =  [];
                    $data['job'] = 'College Diploma Required';
                    $data['match'] = !empty($job_data['diploma'])?true:false;
                    $data['worker'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                    $data['name'] = 'Diploma';
                    $data['match_title'] = 'Diploma';
                    $data['update_key'] = 'diploma';
                    $data['type'] = 'files';
                    $data['worker_title'] = 'Did you really graduate?';
                    $data['job_title'] = 'College Diploma Required';
                    $data['worker_image'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                    $worker_info[] = $data;
                    $data['worker_image'] = '';

                    $data['job'] = 'Drivers License';
                    $data['match'] = !empty($job_data['driving_license'])?true:false;
                    $data['worker'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                    $data['name'] = 'Driving License';
                    $data['match_title'] = 'Driving License';
                    $data['update_key'] = 'driving_license';
                    $data['type'] = 'files';
                    $data['worker_title'] = 'Are you really allowed to drive?';
                    $data['job_title'] = 'Picture of Front and Back DL';
                    $data['worker_image'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                    $worker_info[] = $data;
                    $data['worker_image'];

                    $data['job'] = !empty($job['job_worked_at_facility_before'])?$job['job_worked_at_facility_before']:"";
                    $data['match'] = $recs;
                    $data['worker'] = !empty($job_data['worked_at_facility_before'])?$job_data['worked_at_facility_before']:"";
                    $data['name'] = 'Working at Facility Before';
                    $data['match_title'] = 'Working at Facility Before';
                    $data['update_key'] = 'worked_at_facility_before';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Are you sure you never worked here as staff?';
                    $data['job_title'] = 'Have you worked here in the last 18 months?';
                    $worker_info[] = $data;

                    $data['job'] = "Last 4 digit of SS# to submit";
                    $data['match'] = !empty($job_data['worker_ss_number'])?true:false;
                    $data['worker'] = !empty($job_data['worker_ss_number'])?$job_data['worker_ss_number']:"";
                    $data['name'] = 'SS Card Number';
                    $data['match_title'] = 'SS# Or SS Card';
                    $data['update_key'] = 'worker_ss_number';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Yes we need your SS# to submit you';
                    $data['job_title'] = 'Last 4 digits of SS# to submit';
                    $worker_info[] = $data;

                    if($job['profession'] == $job_data['highest_nursing_degree']){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['profession'])?$job['profession']:"";
                    $data['match'] = $val;
                    $data['worker'] = !empty($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"";
                    $data['name'] = 'Profession';
                    $data['match_title'] = 'Profession';
                    $data['update_key'] = 'highest_nursing_degree';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What kind of Professional are you?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Profession';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['preferred_specialty'])?$job['preferred_specialty']:"";
                    $data['match'] = $speciality;
                    $data['worker'] = !empty($job_data['specialty'])?$job_data['specialty']:"";
                    $data['name'] = 'Speciality';
                    $data['match_title'] = 'Specialty';
                    $data['update_key'] = 'specialty';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "What's your specialty?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Specialty';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['preferred_experience'])?$job['preferred_experience']:"";
                    $data['match'] = $experience;
                    $data['worker'] = !empty($job_data['experience'])?$job_data['experience']:"";
                    $data['name'] = 'Experience';
                    $data['match_title'] = 'Experience';
                    $data['update_key'] = 'experience';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How long have you done this?';
                    $data['job_title'] = $data['job'].' Years';
                    $worker_info[] = $data;

                    if($job_data['nursing_license_state'] == $job['job_location']){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['job_location'])?$job['job_location']:"";
                    $data['match'] = $val;
                    $data['worker'] = !empty($job_data['nursing_license_state'])?$job_data['nursing_license_state']:"";
                    $data['name'] = 'License State';
                    $data['match_title'] = 'Professional Licensure';
                    $data['update_key'] = 'nursing_license_state';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'Where are you licensed?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Professional Licensure';
                    $worker_info[] = $data;

                    $i = 0;
                    foreach($vaccinations as $job_vacc)
                    {
                        $data['job'] = isset($vaccinations[$i])?$vaccinations[$i]:"Vaccinations & Immunizations";
                        $data['match'] = !empty($worker_vaccination[$i])?true:false;
                        $data['worker'] = isset($worker_vaccination[$i])?$worker_vaccination[$i]:"";
                        $data['worker_image'] = isset($vacc_image[$i]['name'])?url('public/images/nurses/vaccination/'.$vacc_image[$i]['name']):"";
                        $data['name'] = $data['worker'].' vaccination';
                        $data['match_title'] = 'Vaccinations & Immunizations';
                        $data['update_key'] = 'worker_vaccination';
                        $data['type'] = 'file';
                        $data['worker_title'] = 'Did you get the '.$data['worker'].' Vaccines?';
                        $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations';
                        $worker_info[] = $data;
                        $i++;
                        
                    }
                    $data['worker_image'] = '';

                    $data['job'] = isset($job['number_of_references'])?$job['number_of_references']:"";
                    $data['match'] = $worker_ref_num;
                    $data['worker'] = isset($worker_reference_name)?$worker_reference_name:"";
                    $data['name'] = 'Reference';
                    $data['match_title'] = 'Number Of Reference';
                    $data['update_key'] = 'worker_reference_name';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'Who are your References?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' References':'number of references';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['min_title_of_reference'])?$job['min_title_of_reference']:"";
                    $data['match'] = !empty($worker_reference_title)?true:false;
                    $data['worker'] = isset($worker_reference_title)?$worker_reference_title:"";
                    $data['name'] = 'Reference title';
                    $data['match_title'] = 'Min Title Of Reference';
                    $data['update_key'] = 'worker_reference_title';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'What was their title?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'min title of reference';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['recency_of_reference'])?$job['recency_of_reference']:"";
                    $data['match'] = !empty($worker_reference_recency_reference)?true:false;
                    $data['worker'] = isset($worker_reference_recency_reference)?$worker_reference_recency_reference:"";
                    $data['name'] = 'Recency Reference Assignment';
                    $data['match_title'] = 'Recency Of Reference';
                    $data['update_key'] = 'worker_reference_recency_reference';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'Is this from your last assignment?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' months':'recency of reference';
                    $worker_info[] = $data;

                    $i = 0;
                    foreach($certificate as $job_cert)
                    {
                        $data['job'] = isset($certificate[$i])?$certificate[$i]:"Certifications";
                        $data['match'] = !empty($worker_certificate_name[$i])?true:false;
                        $data['worker'] = isset($worker_certificate_name[$i])?$worker_certificate_name[$i]:"";
                        if(isset($worker_certificate_name[$i])){
                            $data['worker_image'] = isset($cert_image[$i]['name'])?url('public/images/nurses/certificate/'.$cert_image[$i]['name']):"";
                        }
                        $data['name'] = $data['worker'];
                        $data['match_title'] = 'Certifications';
                        $data['update_key'] = 'worker_certificate';
                        $data['type'] = 'file';
                        $data['worker_title'] = 'No '.$data['worker'];
                        $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications';
                        $worker_info[] = $data;
                        $i++;    
                    }
                    $data['worker_image'] = '';

                    $data['job'] = !empty($job['skills'])?$job['skills']:"";
                    $data['match'] = !empty($job_data['skills'])?true:false;
                    $data['worker'] = isset($job_data['skills'])?$job_data['skills']:"";
                    if(isset($job_data['skills'])){
                        $data['worker_image'] = isset($skills_checklists)?$skills_checklists[0]:"";
                    }
                    
                    $data['name'] = 'Skills';
                    $data['match_title'] = 'Skills checklist';
                    $data['update_key'] = 'skills';
                    $data['type'] = 'file';
                    $data['worker_title'] = 'Upload your latest skills checklist';
                    $data['job_title'] = $data['job'].' Skills checklist';
                    $worker_info[] = $data;
                    $data['worker_image'] = '';

                    if($job_data['eligible_work_in_us'] == 'yes'){ $eligible_work_in_us = true; }else{ $eligible_work_in_us = false; }
                    $data['job'] = "Eligible to work in the US";
                    $data['match'] = $eligible_work_in_us;
                    $data['worker'] = isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"";
                    $data['name'] = 'eligible_work_in_us';
                    $data['match_title'] = 'Eligible to work in the US';
                    $data['update_key'] = 'eligible_work_in_us';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Does Congress allow you to work here?';
                    $data['job_title'] = 'Eligible to work in the US';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['urgency'])?$job['urgency']:"";
                    $data['match'] = !empty($job_data['worker_urgency'])?true:false;
                    $data['worker'] = isset($job_data['worker_urgency'])?$job_data['worker_urgency']:"";
                    $data['name'] = 'worker_urgency';
                    $data['match_title'] = 'Urgency';
                    $data['update_key'] = 'worker_urgency';
                    $data['type'] = 'input';
                    $data['worker_title'] = "How quickly can you be ready to submit?";
                    if(isset($data['job']) && $data['job'] == '1'){ $data['job'] = 'Auto Offer'; }else{
                        $data['job'] = 'Urgency';
                    }
                    // $data['job_title'] = $data['job'];
                    $data['job_title'] = !empty($job['urgency'])?$job['urgency']:"Urgency";
                    $worker_info[] = $data;

                    $data['job'] = isset($job['position_available'])?$job['position_available']:"";
                    $data['match'] = !empty($job_data["available_position"])?true:false;
                    $data['worker'] = isset($job_data["available_position"])?$job_data["available_position"]:"";
                    $data['name'] = 'available_position';
                    $data['match_title'] = '# of Positions Available';
                    $data['update_key'] = 'available_position';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'You have applied to # jobs?';
                    $data['job_title'] = !empty($data['job'])?$is_vacancy.' of '.$data['job']:'# of Positions Available';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['msp'])?$job['msp']:"";
                    $data['match'] = !empty($job_data['MSP'])?true:false;
                    $data['worker'] = isset($job_data['MSP'])?$job_data['MSP']:"";
                    $data['name'] = 'MSP';
                    $data['match_title'] = 'MSP';
                    $data['update_key'] = 'MSP';
                    $data['worker_title'] = 'Any MSPs you prefer to avoid?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'MSP';
                    $data['type'] = 'dropdown';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['vms'])?$job['vms']:"";
                    $data['match'] = !empty($job_data['VMS'])?true:false;
                    $data['worker'] = isset($job_data['VMS'])?$job_data['VMS']:"";
                    $data['name'] = 'VMS';
                    $data['match_title'] = 'VMS';
                    $data['update_key'] = 'VMS';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "Who's your favorite VMS?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'VMS';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['submission_of_vms'])?$job['submission_of_vms']:"";
                    $data['match'] = !empty($job_data['submission_VMS'])?true:false;
                    $data['worker'] = isset($job_data['submission_VMS'])?$job_data['submission_VMS']:"";
                    $data['name'] = 'submission_VMS';
                    $data['match_title'] = '# of Submissions in VMS';
                    $data['update_key'] = 'submission_VMS';
                    $data['type'] = 'input';
                    $data['worker_title'] = '# of Submissions in VMS';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'# of Submissions in VMS';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['block_scheduling'])?$job['block_scheduling']:"";
                    $data['match'] = !empty($job_data['worker_block_scheduling'])?true:false;
                    $data['worker'] = isset($job_data['worker_block_scheduling'])?$job_data['worker_block_scheduling']:"";
                    $data['name'] = 'Block_scheduling';
                    $data['match_title'] = 'Block Scheduling';
                    $data['update_key'] = 'block_scheduling';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Do you want block scheduling?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Block Scheduling';
                    $worker_info[] = $data;

                    if($job_data['worker_float_requirement'] == 'Yes'){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['float_requirement'])?$job['float_requirement']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_float_requirement'])?$job_data['worker_float_requirement']:"";
                    $data['name'] = 'Float Requirement';
                    $data['match_title'] = 'Float requirements';
                    $data['update_key'] = 'float_requirement';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Are you willing float to?';
                    $data['job_title'] = !empty($job['float_requirement'])?$job['float_requirement']:'Float requirements';
                    $worker_info[] = $data;
                    
                    $data['job'] = isset($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:"";
                    $data['match'] = !empty($job_data['worker_facility_shift_cancelation_policy'])?true:false;
                    $data['worker'] = isset($job_data['worker_facility_shift_cancelation_policy'])?$job_data['worker_facility_shift_cancelation_policy']:"";
                    $data['name'] = 'Facility Shift Cancelation Policy';
                    $data['match_title'] = 'Facility Shift Cancellation Policy';
                    $data['update_key'] = 'facility_shift_cancelation_policy';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What terms do you prefer?';
                    $data['job_title'] = !empty($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:'Facility Shift Cancellation Policy';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['contract_termination_policy'])?$job['contract_termination_policy']:"";
                    $data['match'] = !empty($job_data['worker_contract_termination_policy'])?true:false;
                    $data['worker'] = isset($job_data['worker_contract_termination_policy'])?$job_data['worker_contract_termination_policy']:"";
                    $data['name'] = 'Contract Terminology';
                    $data['match_title'] = 'Contract Termination Policy';
                    $data['update_key'] = 'contract_termination_policy';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What terms do you prefer?';
                    $data['job_title'] = !empty($job['contract_termination_policy'])?$job['contract_termination_policy']:'Contract Termination Policy';
                    $worker_info[] = $data;

                    if(isset($job_data['distance_from_your_home']) && ($job_data['distance_from_your_home'] != 0) ){
                        $data['worker'] = $job_data['distance_from_your_home'];
                    }else{
                        $data['worker'] = "";
                    }
                    if($job['traveler_distance_from_facility'] == $job_data['distance_from_your_home']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['traveler_distance_from_facility'])?$job['traveler_distance_from_facility']:"";
                    $data['match'] = $val;
                    // $data['worker'] = isset($job_data['distance_from_your_home'])?$job_data['distance_from_your_home']:"";
                    $data['name'] = 'distance from facility';
                    $data['match_title'] = 'Traveler Distance From Facility';
                    $data['update_key'] = 'distance_from_your_home';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Where does the IRS think you live?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' miles':'Traveler Distance From Facility';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['facility'])?$job['facility']:"";
                    $data['match'] = !empty($job_data['facilities_you_like_to_work_at'])?true:false;
                    $data['worker'] = isset($job_data['facilities_you_like_to_work_at'])?$job_data['facilities_you_like_to_work_at']:"";
                    $data['name'] = 'Facility available upon request';
                    $data['match_title'] = 'Facility';
                    $data['update_key'] = 'facilities_you_like_to_work_at';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What facilities have you worked at?';
                    $data['job_title'] = !empty($job['facility'])?$job['facility']:'Facility';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"";
                    $data['match'] = !empty($job_data['worker_facility_parent_system'])?true:false;
                    $data['worker'] = isset($job_data['worker_facility_parent_system'])?$job_data['worker_facility_parent_system']:"";
                    $data['name'] = 'facility parent system';
                    $data['match_title'] = "Facility's Parent System";
                    $data['update_key'] = 'worker_facility_parent_system';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What facilities would you like to work at?';
                    $data['job_title'] = !empty($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"Facility's Parent System";
                    $worker_info[] = $data;

                    if(isset($job_data['avg_rating_by_facilities']) && ($job_data['avg_rating_by_facilities'] != 0) ){
                        $data['worker'] = $job_data['avg_rating_by_facilities'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['facility_average_rating'])?$job['facility_average_rating']:"";
                    $data['match'] = !empty($job_data['avg_rating_by_facilities'])?true:false;
                    // $data['worker'] = isset($job_data['avg_rating_by_facilities'])?$job_data['avg_rating_by_facilities']:"";
                    $data['name'] = 'facility average rating';
                    $data['match_title'] = 'Facility Average Rating';
                    $data['update_key'] = 'avg_rating_by_facilities';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your facilities';
                    $data['job_title'] = !empty($job['facility_average_rating'])?$job['facility_average_rating']:'Facility Average Rating';
                    $worker_info[] = $data;

                    if(isset($job_data['worker_avg_rating_by_recruiters']) && ($job_data['worker_avg_rating_by_recruiters'] != 0) ){
                        $data['worker'] = $job_data['worker_avg_rating_by_recruiters'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['recruiter_average_rating'])?$job['recruiter_average_rating']:"";
                    $data['match'] = !empty($job_data['worker_avg_rating_by_recruiters'])?true:false;
                    // $data['worker'] = isset($job_data['worker_avg_rating_by_recruiters'])?$job_data['worker_avg_rating_by_recruiters']:"";
                    $data['name'] = 'recruiter average rating';
                    $data['match_title'] = 'Recruiter Average Rating';
                    $data['update_key'] = 'worker_avg_rating_by_recruiters';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your recruiters';
                    $data['job_title'] = !empty($job['recruiter_average_rating'])?$job['recruiter_average_rating']:'Recruiter Average Rating';
                    $worker_info[] = $data;

                    if(isset($job_data['worker_avg_rating_by_employers']) && ($job_data['worker_avg_rating_by_employers'] != 0) ){
                        $data['worker'] = $job_data['worker_avg_rating_by_employers'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['employer_average_rating'])?$job['employer_average_rating']:"";
                    $data['match'] = !empty($job_data['worker_avg_rating_by_employers'])?true:false;
                    // $data['worker'] = isset($job_data['worker_avg_rating_by_employers'])?$job_data['worker_avg_rating_by_employers']:"";
                    $data['name'] = 'employer average rating';
                    $data['match_title'] = 'Employer Average Rating';
                    $data['update_key'] = 'worker_avg_rating_by_employers';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your employers';
                    $data['job_title'] = !empty($job['employer_average_rating'])?$job['employer_average_rating']:'Employer Average Rating';
                    $worker_info[] = $data;

                    if($job['clinical_setting'] == $job_data['clinical_setting_you_prefer']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['clinical_setting'])?$job['clinical_setting']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['clinical_setting_you_prefer'])?$job_data['clinical_setting_you_prefer']:"";
                    $data['name'] = 'Clinical Setting';
                    $data['match_title'] = 'Clinical Setting';
                    $data['update_key'] = 'clinical_setting_you_prefer';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What setting do you prefer?';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:' Clinical Setting';
                    $worker_info[] = $data;
                    
                    $data['job'] = isset($job['Patient_ratio'])?$job['Patient_ratio']:"";
                    $data['match'] = !empty($job_data['worker_patient_ratio'])?true:false;
                    $data['worker'] = isset($job_data['worker_patient_ratio'])?$job_data['worker_patient_ratio']:"";
                    $data['name'] = 'patient ratio';
                    $data['match_title'] = 'Patient Ratio';
                    $data['update_key'] = 'worker_patient_ratio';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How many patients can you handle?';
                    $data['job_title'] = !empty($job['Patient_ratio'])?$job['Patient_ratio']:'Patient ratio';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['emr'])?$job['emr']:"";
                    $data['match'] = !empty($job_data['worker_emr'])?true:false;
                    $data['worker'] = isset($job_data['worker_emr'])?$job_data['worker_emr']:"";
                    $data['name'] = 'EMR';
                    $data['match_title'] = 'EMR';
                    $data['update_key'] = 'worker_emr';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What EMRs have you used?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'EMR';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Unit'])?$job['Unit']:"";
                    $data['match'] = !empty($job_data['worker_unit'])?true:false;
                    $data['worker'] = isset($job_data['worker_unit'])?$job_data['worker_unit']:"";
                    $data['name'] = 'Unit';
                    $data['match_title'] = 'Unit';
                    $data['update_key'] = 'worker_unit';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Unit?';
                    $data['job_title'] = !empty($job['Unit'])?$job['Unit']:'Unit';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Department'])?$job['Department']:"";
                    $data['match'] = !empty($job_data['worker_department'])?true:false;
                    $data['worker'] = isset($job_data['worker_department'])?$job_data['worker_department']:"";
                    $data['name'] = 'Department';
                    $data['match_title'] = 'Department';
                    $data['update_key'] = 'worker_department';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Department?';
                    $data['job_title'] = !empty($job['Department'])?$job['Department']:'Department';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Bed_Size'])?$job['Bed_Size']:"";
                    $data['match'] = !empty($job_data['worker_bed_size'])?true:false;
                    $data['worker'] = isset($job_data['worker_bed_size'])?$job_data['worker_bed_size']:"";
                    $data['name'] = 'Bed Size';
                    $data['match_title'] = 'Bed Size';
                    $data['update_key'] = 'worker_bed_size';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'king or california king ?';
                    $data['job_title'] = !empty($job['Bed_Size'])?$job['Bed_Size']:'Bed Size';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Trauma_Level'])?$job['Trauma_Level']:"";
                    $data['match'] = !empty($job_data['worker_trauma_level'])?true:false;
                    $data['worker'] = isset($job_data['worker_trauma_level'])?$job_data['worker_trauma_level']:"";
                    $data['name'] = 'Trauma Level';
                    $data['match_title'] = 'Trauma Level';
                    $data['update_key'] = 'worker_trauma_level';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal trauma level?';
                    $data['job_title'] = !empty($job['Trauma_Level'])?$job['Trauma_Level']:'Trauma Level';
                    $worker_info[] = $data;

                    if($job['scrub_color'] == $job_data['worker_scrub_color']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['scrub_color'])?$job['scrub_color']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_scrub_color'])?$job_data['worker_scrub_color']:"";
                    $data['name'] = 'Scrub color';
                    $data['match_title'] = 'Scrub Color';
                    $data['update_key'] = 'worker_scrub_color';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Scrub Brand?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Scrub Color';
                    $worker_info[] = $data;

                    if($job['job_state'] == $job_data['worker_facility_state_code']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['job_state'])?$job['job_state']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_facility_state_code'])?$job_data['worker_facility_state_code']:"";
                    $data['name'] = 'Facility state';
                    $data['match_title'] = 'Facility State Code';
                    $data['update_key'] = 'worker_facility_state_code';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "States you'd like to work?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Facility State Code';
                    $worker_info[] = $data;

                    if($job['job_city'] == $job_data['worker_facility_city']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['job_city'])?$job['job_city']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_facility_city'])?$job_data['worker_facility_city']:"";
                    $data['name'] = 'Facility City';
                    $data['match_title'] = 'Facility City';
                    $data['update_key'] = 'worker_facility_city';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "Cities you'd like to work?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Facility City';
                    $worker_info[] = $data;

                    $data['job'] = "InterviewDates";
                    $data['match'] = !empty($job_data['worker_interview_dates'])?true:false;
                    $data['worker'] = isset($job_data['worker_interview_dates'])?$job_data['worker_interview_dates']:"";
                    $data['name'] = 'Interview dates';
                    $data['match_title'] = 'InterviewDates';
                    $data['update_key'] = 'worker_interview_dates';
                    $data['type'] = 'Interview dates';
                    $data['worker_title'] = "Any days you're not available?";
                    $data['job_title'] = 'InterviewDates';
                    $worker_info[] = $data;

                    // Start Date
                    if(isset($job['as_soon_as']) && ($job['as_soon_as'] == '1')){
                        $data['job'] = "As Soon As";
                    }else{
                        $data['job'] = isset($job['start_date'])?$job['start_date']:"";
                    }
                    if(isset($job_data['worker_as_soon_as_posible']) && ($job_data['worker_as_soon_as_posible'] == '1')){
                        $data['worker'] = "As Soon As";
                    }else{
                        $data['worker'] = isset($job_data['worker_start_date'])?$job_data['worker_start_date']:"";
                    }
                    if($data['worker'] == $data['job']){ $data['match'] = true;}else{ $data['match'] = false; }
                    $data['name'] = 'As Soon As';
                    $data['match_title'] = 'Start Date';
                    $data['update_key'] = 'worker_as_soon_as_posible';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'When can you start?';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'Start Date';
                    $worker_info[] = $data;
                    // End Start Date

                    if($job['rto'] == $job_data['worker_rto']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['rto'])?$job['rto']:"";
                    $data['match'] = $val;
                    $data['worker'] = "";
                    $data['name'] = 'RTO';
                    $data['match_title'] = 'RTO';
                    $data['update_key'] = 'clinical_setting_you_prefer';
                    $data['type'] = 'input';
                    $data['worker_title'] = !empty($data['worker'])?$data['worker']:'Any time off?';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'RTO';
                    $worker_info[] = $data;

                    if($job['preferred_shift'] == $job_data['worker_shift_time_of_day']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['preferred_shift'])?$job['preferred_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"";
                    $data['name'] = 'Shift';
                    $data['match_title'] = 'Shift Time of Day';
                    $data['update_key'] = 'worker_shift_time_of_day';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'Fav Shift?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Shift Time of Day';
                    $worker_info[] = $data;


                    if($job['hours_per_week'] == $job_data['worker_hours_per_week']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['hours_per_week'])?$job['hours_per_week']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_hours_per_week'])?$job_data['worker_hours_per_week']:"";
                    $data['name'] = 'Hours/week';
                    $data['match_title'] = 'Hours/Week';
                    $data['update_key'] = 'worker_hours_per_week';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal Hours per week?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Week';
                    $worker_info[] = $data;

                    if($job['guaranteed_hours'] == $job_data['worker_guaranteed_hours']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['guaranteed_hours'])?$job['guaranteed_hours']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_guaranteed_hours'])?$job_data['worker_guaranteed_hours']:"";
                    $data['name'] = 'Guaranteed Hours';
                    $data['match_title'] = 'Guaranteed Hours';
                    $data['update_key'] = 'worker_guaranteed_hours';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Open to jobs with no guaranteed hours?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Guaranteed Hours';
                    $worker_info[] = $data;

                    if($job['hours_shift'] == $job_data['worker_hours_shift']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['hours_shift'])?$job['hours_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_hours_shift'])?$job_data['worker_hours_shift']:"";
                    $data['name'] = 'Shift Hours';
                    $data['match_title'] = 'Hours/Shift';
                    $data['update_key'] = 'worker_hours_shift';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Prefered hours per shift?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Shift';
                    $worker_info[] = $data;

                    if($job['preferred_assignment_duration'] == $job_data['worker_weeks_assignment']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['preferred_assignment_duration'])?$job['preferred_assignment_duration']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weeks_assignment'])?$job_data['worker_weeks_assignment']:"";
                    $data['name'] = 'Assignment in weeks';
                    $data['match_title'] = 'Weeks/Assignment';
                    $data['update_key'] = 'worker_weeks_assignment';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How many weeks?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weeks/Assignment';
                    $worker_info[] = $data;

                    if($job['weeks_shift'] == $job_data['worker_shifts_week']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weeks_shift'])?$job['weeks_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_shifts_week'])?$job_data['worker_shifts_week']:"";
                    $data['name'] = 'Shift Week';
                    $data['match_title'] = 'Shifts/Week';
                    $data['update_key'] = 'worker_shifts_week';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal shifts per week?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Shifts/Week';
                    $worker_info[] = $data;

                    if($job['referral_bonus'] == $job_data['worker_referral_bonus']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['referral_bonus'])?$job['referral_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_referral_bonus'])?$job_data['worker_referral_bonus']:"";
                    $data['name'] = 'Refferel Bonus';
                    $data['match_title'] = 'Referral Bonus';
                    $data['update_key'] = 'worker_referral_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = '# of people you have referred';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Referral Bonus';
                    $worker_info[] = $data;

                    if(($job['sign_on_bonus'] == $job_data['worker_sign_on_bonus']) && (!empty($job_data['worker_sign_on_bonus']))){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['sign_on_bonus'])?$job['sign_on_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_sign_on_bonus'])?$job_data['worker_sign_on_bonus']:"";
                    $data['name'] = 'Sign On Bonus';
                    $data['match_title'] = 'Sign-On Bonus';
                    $data['update_key'] = 'worker_sign_on_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What kind of bonus do you expect?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Sign-On Bonus';
                    $worker_info[] = $data;

                    if($job['completion_bonus'] == $job_data['worker_completion_bonus']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['completion_bonus'])?$job['completion_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_completion_bonus'])?$job_data['worker_completion_bonus']:"";
                    $data['name'] = 'Completion Bonus';
                    $data['match_title'] = 'Completion Bonus';
                    $data['update_key'] = 'worker_completion_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What kind of bonus do you deserve?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Completion Bonus';
                    $worker_info[] = $data;

                    if($job['extension_bonus'] == $job_data['worker_extension_bonus']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['extension_bonus'])?$job['extension_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_extension_bonus'])?$job_data['worker_extension_bonus']:"";
                    $data['name'] = 'extension bonus';
                    $data['match_title'] = 'Extension Bonus';
                    $data['update_key'] = 'worker_extension_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What are you comparing this too?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Extension Bonus';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['other_bonus'])?$job['other_bonus']:"";
                    $data['match'] = !empty($job_data['worker_other_bonus'])?true:false;
                    $data['worker'] = isset($job_data['worker_other_bonus'])?$job_data['worker_other_bonus']:"";
                    $data['name'] = 'Other Bonus';
                    $data['match_title'] = 'Other Bonus';
                    $data['update_key'] = 'worker_other_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Other bonuses you want?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Other Bonus';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['four_zero_one_k'])?$job['four_zero_one_k']:"";
                    $data['match'] = !empty($job_data['how_much_k'])?true:false;
                    $data['worker'] = isset($job_data['how_much_k'])?$job_data['how_much_k']:"";
                    $data['name'] = '401k';
                    $data['match_title'] = '401K';
                    $data['update_key'] = 'how_much_k';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'401K';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['health_insaurance'])?$job['health_insaurance']:"";
                    $data['match'] = !empty($job_data['worker_health_insurance'])?true:false;
                    $data['worker'] = isset($job_data['worker_health_insurance'])?$job_data['worker_health_insurance']:"";
                    $data['name'] = 'Health Insaurance';
                    $data['match_title'] = 'Health Insurance';
                    $data['update_key'] = 'worker_health_insurance';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Health Insurance';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['dental'])?$job['dental']:"";
                    $data['match'] = !empty($job_data['worker_dental'])?true:false;
                    $data['worker'] = isset($job_data['worker_dental'])?$job_data['worker_dental']:"";
                    $data['name'] = 'Dental';
                    $data['match_title'] = 'Dental';
                    $data['update_key'] = 'worker_dental';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Dental';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['vision'])?$job['vision']:"";
                    $data['match'] = !empty($job_data['worker_vision'])?true:false;
                    $data['worker'] = isset($job_data['worker_vision'])?$job_data['worker_vision']:"";
                    $data['name'] = 'Vision';
                    $data['match_title'] = 'Vision';
                    $data['update_key'] = 'worker_vision';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Vision';
                    $worker_info[] = $data;

                    if($job['actual_hourly_rate'] == $job_data['worker_actual_hourly_rate']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['actual_hourly_rate'])?$job['actual_hourly_rate']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_actual_hourly_rate'])?$job_data['worker_actual_hourly_rate']:"";
                    $data['name'] = 'Actual Rate';
                    $data['match_title'] = 'Actual Hourly Rate';
                    $data['update_key'] = 'worker_actual_hourly_rate';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What range is fair?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Actual Hourly rate';
                    $worker_info[] = $data;

                    if($job['feels_like_per_hour'] == $job_data['worker_feels_like_hour']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['feels_like_per_hour'])?$job['feels_like_per_hour']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_feels_like_hour'])?$job_data['worker_feels_like_hour']:"";
                    $data['name'] = 'feels/$hr';
                    $data['match_title'] = 'Feels Like $/hr';
                    $data['update_key'] = 'worker_feels_like_hour';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Does this seem fair based on the market?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Feels Like $/hr';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['overtime'])?$job['overtime']:"";
                    $data['match'] = !empty($job_data['worker_overtime'])?true:false;
                    $data['worker'] = isset($job_data['worker_overtime'])?$job_data['worker_overtime']:"";
                    $data['name'] = 'Overtime';
                    $data['match_title'] = 'Overtime';
                    $data['update_key'] = 'worker_overtime';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Would you work more overtime for a higher OT rate?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Overtime';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['holiday'])?$job['holiday']:"";
                    $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                    $data['worker'] = isset($job_data['worker_holiday'])?$job_data['worker_holiday']:"";
                    $data['name'] = 'Holiday';
                    $data['match_title'] = 'Holiday';
                    $data['update_key'] = 'worker_holiday';
                    $data['type'] = 'date';
                    $data['worker_title'] = 'Any holidays you refuse to work?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Holiday';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['on_call'])?$job['on_call']:"";
                    $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                    $data['worker'] = isset($job_data['worker_on_call'])?$job_data['worker_on_call']:"";
                    $data['name'] = 'On call';
                    $data['match_title'] = 'On Call';
                    $data['update_key'] = 'worker_on_call';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Will you do call?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'On Call';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['call_back'])?$job['call_back']:"";
                    $data['match'] = !empty($job_data['worker_call_back'])?true:false;
                    $data['worker'] = isset($job_data['worker_call_back'])?$job_data['worker_call_back']:"";
                    $data['name'] = 'Call Back';
                    $data['match_title'] = 'Call Back';
                    $data['update_key'] = 'worker_call_back';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Is this rate reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Call Back';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['orientation_rate'])?$job['orientation_rate']:"";
                    $data['match'] = !empty($job_data['worker_orientation_rate'])?true:false;
                    $data['worker'] = isset($job_data['worker_orientation_rate'])?$job_data['worker_orientation_rate']:"";
                    $data['name'] = 'Orientation Rate';
                    $data['match_title'] = 'Orientation Rate';
                    $data['update_key'] = 'worker_orientation_rate';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Is this rate reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Orientation Rate';
                    $worker_info[] = $data;

                    if($job['weekly_taxable_amount'] == $job_data['worker_weekly_taxable_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weekly_taxable_amount'])?$job['weekly_taxable_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weekly_taxable_amount'])?$job_data['worker_weekly_taxable_amount']:"";
                    $data['name'] = 'Weekly Taxable Amount';
                    $data['match_title'] = 'Weekly Taxable Amount';
                    $data['update_key'] = 'worker_weekly_taxable_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly Taxable Amount';
                    $worker_info[] = $data;

                    if($job['weekly_non_taxable_amount'] == $job_data['worker_weekly_non_taxable_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weekly_non_taxable_amount'])?$job['weekly_non_taxable_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weekly_non_taxable_amount'])?$job_data['worker_weekly_non_taxable_amount']:"";
                    $data['name'] = 'Weekly Non Taxable Amount';
                    $data['match_title'] = 'Weekly Non-Taxable Amount';
                    $data['update_key'] = 'worker_weekly_non_taxable_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Are you going to duplicate expenses?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly non-taxable amount';
                    $worker_info[] = $data;

                    if($job['employer_weekly_amount'] == $job_data['worker_employer_weekly_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['employer_weekly_amount'])?$job['employer_weekly_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_employer_weekly_amount'])?$job_data['worker_employer_weekly_amount']:"";
                    $data['name'] = 'Employer Weekly Amount';
                    $data['match_title'] = 'Employer Weekly Amount';
                    $data['update_key'] = 'worker_employer_weekly_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What range is reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Employer Weekly Amount';
                    $worker_info[] = $data;

                    if($job['goodwork_weekly_amount'] == $job_data['worker_goodwork_weekly_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['goodwork_weekly_amount'])?$job['goodwork_weekly_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_goodwork_weekly_amount'])?$job_data['worker_goodwork_weekly_amount']:"";
                    $data['name'] = 'Goodwork Weekly Amount';
                    $data['match_title'] = 'Goodwork Weekly Amount';
                    $data['update_key'] = 'worker_goodwork_weekly_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'You only have (count down time) left before your rate drops from 5% to 2%';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Goodwork Weekly Amount';
                    $worker_info[] = $data;

                    if($job['total_employer_amount'] == $job_data['worker_total_employer_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_employer_amount'])?$job['total_employer_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_employer_amount'])?$job_data['worker_total_employer_amount']:"";
                    $data['name'] = 'Total Employer Amount';
                    $data['match_title'] = 'Total Employer Amount';
                    $data['update_key'] = 'worker_total_employer_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Employer Amount';
                    $worker_info[] = $data;

                    if($job['total_goodwork_amount'] == $job_data['worker_total_goodwork_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_goodwork_amount'])?$job['total_goodwork_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_goodwork_amount'])?$job_data['worker_total_goodwork_amount']:"";
                    $data['name'] = 'Total Goodwork Amount';
                    $data['match_title'] = 'Total Goodwork Amount';
                    $data['update_key'] = 'worker_total_goodwork_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How would you spend those extra funds?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Goodwork Amount';
                    $worker_info[] = $data;

                    if($job['total_contract_amount'] == $job_data['worker_total_contract_amount']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_contract_amount'])?$job['total_contract_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_contract_amount'])?$job_data['worker_total_contract_amount']:"";
                    $data['name'] = 'Total Contract Amount';
                    $data['match_title'] = 'Total Contract Amount';
                    $data['update_key'] = 'worker_total_contract_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Contract Amount';
                    $worker_info[] = $data;

                    $data['job'] = "Goodwork Number";
                    $data['match'] = !empty($job_data['worker_goodwork_number'])?true:false;
                    $data['worker'] = isset($job_data['worker_goodwork_number'])?$job_data['worker_goodwork_number']:"";
                    $data['name'] = 'goodwork number';
                    $data['match_title'] = 'Goodwork Number';
                    $data['update_key'] = 'worker_goodwork_number';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = 'Goodwork Number';
                    $worker_info[] = $data;

                    $result['worker_info'] = $worker_info;
                    

                    
                    $this->check = "1";
                    $this->message = "Matching details listed successfully";
                    // $this->return_data = $data;
                    $this->return_data = $result;

                }else{
                    $this->check = "1";
                    $this->message = "User Not Found";
                }
                
            }else{
                $this->check = "1";
                $this->message = "Worker Not Found";
            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    // Skip Worker Information
    public function workerInformationSkip(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            // 'worker_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
                $job_data = [];
                    $whereCond = [
                            'facilities.active' => true,
                            'jobs.id' => $request->job_id
                        ];

                    $respond = Nurse::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'nurses.block_scheduling as worker_block_scheduling', 'nurses.float_requirement as worker_float_requirement', 'nurses.facility_shift_cancelation_policy as worker_facility_shift_cancelation_policy', 'nurses.contract_termination_policy as worker_contract_termination_policy', 'jobs.created_at as posted_on')
                                    ->join('users','users.id', '=', 'nurses.user_id')
                                    ->leftJoin('offers','offers.nurse_id', '=', 'nurses.id')
                                    ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                                    ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                    ->where($whereCond);
                    $job_data = $respond->groupBy('jobs.id')->first();
                    
                    if(empty($job_data)){
                        $whereCond1 =  [
                            'facilities.active' => true,
                            'jobs.id' => $request->job_id
                        ];

                        $job_data['worker_block_scheduling'] = '';
                        $job_data['worker_float_requirement'] = '';
                        $job_data['worker_facility_shift_cancelation_policy'] = '';
                        $job_data['worker_contract_termination_policy'] = '';
                        
                        $worker_jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'jobs.created_at as posted_on')
                        
                        ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                        ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                        ->where($whereCond1)->groupBy('jobs.id')->first();
                        // print_r($worker_jobs);
                        // die();
                        $job_data['workers_applied'] = isset($worker_jobs['workers_applied'])?$worker_jobs['workers_applied']:'';
                        $job_data['worker_contract_termination_policy'] = isset($worker_jobs['contract_termination_policy'])?$worker_jobs['contract_termination_policy']:'';
                        $job_data['job_id'] = isset($worker_jobs['job_id'])?$worker_jobs['job_id']:$request->job_id;
                        $job_data['facility_name'] = isset($worker_jobs['facility_name'])?$worker_jobs['facility_name']:'';
                        $job_data['facility_city'] = isset($worker_jobs['facility_city'])?$worker_jobs['facility_city']:'';
                        $job_data['facility_state'] = isset($worker_jobs['facility_state'])?$worker_jobs['facility_state']:'';
                        // $job_data['posted_on'] = $worker_jobs['posted_on'];
                        
                    }
                    $job_data['posted_on'] = isset($job_data['created_at'])?$job_data['created_at']:'';
                    if(isset($job_data['recruiter_id']) && !empty($job_data['recruiter_id'])){
                        $recruiter_info = USER::where('id', $job_data['recruiter_id'])->get()->first();
                        $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
                    }else{
                        $recruiter_name = '';
                    }

                    $job = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*')->where('id', $request->job_id)->first();
                    
                    $worker_reference_name = '';
                    $worker_reference_title ='';
                    $worker_reference_recency_reference ='';
                    
                    // Check total job hire
                    $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$job['id'].'"');
                    if(isset($is_vacancy)){
                        $is_vacancy = $is_vacancy[0]->hired_jobs;
                    }else{
                        $is_vacancy = '0';
                    }
                    
                    // Jobs speciality with experience 
                    $speciality = explode(',',$job['preferred_specialty']);
                    $experiences = explode(',',$job['preferred_experience']);
                    $exp = [];
                    $spe = [];
                    $specialities = [];
                    $i = 0;
                    foreach($speciality as $special){
                        $spe[] = $special;
                        $i++;
                    }
                    foreach($experiences as $experience){
                        $exp[] = $experience;
                    }
                   
                    for($j=0; $j< $i; $j++){
                        $specialities[$j]['spe'] = $spe[$j]; 
                        $specialities[$j]['exp'] = $exp[$j]; 
                    }

                    // Worker speciality
                    $worker_speciality = '';
                    $worker_experiences = '';
                    $worker_exp = [];
                    $worker_spe = [];
                    $worker_specialities = [];
                    $i = 0;
                    foreach($speciality as $special){
                        $worker_spe[] = $special;
                        $i++;
                    }
                    foreach($experiences as $experience){
                        $worker_exp[] = $experience;
                    }
                   
                    for($j=0; $j< $i; $j++){
                        $worker_specialities[$j]['spe'] = $worker_spe[$j]; 
                        $worker_specialities[$j]['exp'] = $worker_exp[$j]; 
                    }

                    $worker_certificate = [];
                    // $skills_checklists = [];
                    $vaccinations = explode(',',$job['vaccinations']);
                    $worker_vaccination = '';
                    $worker_certificate_name = '';
                    $worker_certificate = '';
                    $skills_checklists = '';
                    $i=0;
                    
                    $vacc_image = '';
                    $cert_image = '';
                    $certificate = explode(',',$job['certificate']); 

                    $result = [];
                    $result['job_id'] = isset($job['id'])?$job['id']:"";
                    $result['description'] = isset($job['description'])?$job['description']:"";
                    $result['posted_on'] = isset($job_data['posted_on'])?date('M j Y', strtotime($job_data['posted_on'])):"";
                    $result['type'] = isset($job['type'])?$job['type']:"";
                    $result['terms'] = isset($job['terms'])?$job['terms']:"";
                    $result['job_name'] = isset($job['job_name'])?$job['job_name']:"";
                    $result['total_applied'] = isset($job['workers_applied'])?$job['workers_applied']:"";
                    $result['department'] = isset($job['Department'])?$job['Department']:"";
                    $result['worker_name'] = isset($worker_name)?$worker_name:"";
                    $result['worker_image'] = isset($worker_img)?$worker_img:"";
                    $result['recruiter_name'] = $recruiter_name;
                    if(isset($job_data['worked_at_facility_before']) && ($job_data['worked_at_facility_before'] == 'yes')){
                        $recs = true;
                    }else{
                        $recs = false;
                    }

                    if(isset($job_data['license_type']) && ($job_data['license_type'] != null) && ($job_data['profession'] == $job_data['license_type'])){
                        $profession = true;
                    }else{
                        $profession = false;
                    }
                    if(isset($job_data['specialty']) && ($job_data['specialty'] != null) && ($job_data['preferred_specialty'] == $job_data['specialty'])){
                        $speciality = true;
                    }else{
                        $speciality = false;
                    }
                    if(isset($job_data['experience']) && ($job_data['experience'] != null) && ($job_data['preferred_experience'] == $job_data['experience'])){
                        $experience = true;
                    }else{
                        $experience = false;
                    }
                    $countable = explode(',',$worker_reference_name);
                    $num = [];
                    foreach($countable as $rec){
                        if(!empty($rec)){
                            $num[] = $rec;        
                        }
                    }
                    $countable = count($num);
                    if(isset($job_data['number_of_references']) && ($job_data['number_of_references'] == $countable)){
                        $worker_ref_num = true;
                    }else{
                        $worker_ref_num = false;
                    }

                    $worker_info = [];
                    // $data =  [];
                    $data['job'] = 'College Diploma Required';
                    $data['match'] = !empty($job_data['diploma'])?true:false;
                    $data['worker'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                    $data['name'] = 'Diploma';
                    $data['match_title'] = 'Diploma';
                    $data['update_key'] = 'diploma';
                    $data['type'] = 'files';
                    $data['worker_title'] = 'Did you really graduate?';
                    $data['job_title'] = 'College Diploma Required';
                    $data['worker_image'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                    $worker_info[] = $data;
                    $data['worker_image'] = '';

                    $data['job'] = 'Drivers License';
                    $data['match'] = !empty($job_data['driving_license'])?true:false;
                    $data['worker'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                    $data['name'] = 'driving_license';
                    $data['match_title'] = 'Driving License';
                    $data['update_key'] = 'driving_license';
                    $data['type'] = 'files';
                    $data['worker_title'] = 'Are you really allowed to drive?';
                    $data['job_title'] = 'Picture of Front and Back DL';
                    $data['worker_image'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                    $worker_info[] = $data;
                    $data['worker_image'] = '';

                    $data['job'] = !empty($job['job_worked_at_facility_before'])?$job['job_worked_at_facility_before']:"";
                    $data['match'] = $recs;
                    $data['worker'] = !empty($job_data['worked_at_facility_before'])?$job_data['worked_at_facility_before']:"";
                    $data['name'] = 'Working at Facility Before';
                    $data['match_title'] = 'Working at Facility Before';
                    $data['update_key'] = 'worked_at_facility_before';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Are you sure you never worked here as staff?';
                    $data['job_title'] = 'Have you worked here in the last 18 months?';
                    $worker_info[] = $data;

                    $data['job'] = "Last 4 digit of SS# to submit";
                    $data['match'] = !empty($job_data['worker_ss_number'])?true:false;
                    $data['worker'] = !empty($job_data['worker_ss_number'])?$job_data['worker_ss_number']:"";
                    $data['name'] = 'SS Card Number';
                    $data['match_title'] = 'SS# Or SS Card';
                    $data['update_key'] = 'worker_ss_number';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Yes we need your SS# to submit you';
                    $data['job_title'] = 'Last 4 digits of SS# to submit';
                    $worker_info[] = $data;

                    if($job['profession'] == (isset($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"")){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['profession'])?$job['profession']:"";
                    $data['match'] = $val;
                    $data['worker'] = !empty($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"";
                    $data['name'] = 'Profession';
                    $data['match_title'] = 'Profession';
                    $data['update_key'] = 'highest_nursing_degree';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What kind of Professional are you?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Profession';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['preferred_specialty'])?$job['preferred_specialty']:"";
                    $data['match'] = $speciality;
                    $data['worker'] = !empty($job_data['specialty'])?$job_data['specialty']:"";
                    $data['name'] = 'Speciality';
                    $data['match_title'] = 'Specialty';
                    $data['update_key'] = 'specialty';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "What's your specialty?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Specialty';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['preferred_experience'])?$job['preferred_experience']:"";
                    $data['match'] = $experience;
                    $data['worker'] = !empty($job_data['experience'])?$job_data['experience']:"";
                    $data['name'] = 'Experience';
                    $data['match_title'] = 'Experience';
                    $data['update_key'] = 'experience';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How long have you done this?';
                    $data['job_title'] = $data['job'].' Years';
                    $worker_info[] = $data;

                    $job_data['nursing_license_state'] = isset($job_data['nursing_license_state'])?$job_data['nursing_license_state']:'';
                    $job['job_location'] = isset($job['job_location'])?$job['job_location']:'';
                    if($job_data['nursing_license_state'] == $job['job_location']){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['job_location'])?$job['job_location']:"";
                    $data['match'] = $val;
                    $data['worker'] = !empty($job_data['nursing_license_state'])?$job_data['nursing_license_state']:"";
                    $data['name'] = 'License State';
                    $data['match_title'] = 'Professional Licensure';
                    $data['update_key'] = 'nursing_license_state';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'Where are you licensed?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Professional Licensure';
                    $worker_info[] = $data;

                    $i = 0;
                    foreach($vaccinations as $job_vacc)
                    {
                        $data['job'] = isset($vaccinations[$i])?$vaccinations[$i]:"Vaccinations & Immunizations";
                        $data['match'] = !empty($worker_vaccination[$i])?true:false;
                        $data['worker'] = isset($worker_vaccination[$i])?$worker_vaccination[$i]:"";
                        $data['worker_image'] = isset($vacc_image[$i]['name'])?url('public/images/nurses/vaccination/'.$vacc_image[$i]['name']):"";
                        $data['name'] = $data['worker'].' vaccination';
                        $data['match_title'] = 'Vaccinations & Immunizations';
                        $data['update_key'] = 'worker_vaccination';
                        $data['type'] = 'file';
                        $data['worker_title'] = 'Did you get the '.$data['worker'].' Vaccines?';
                        $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations';
                        $worker_info[] = $data;
                        $i++;
                        // $data['worker_image'] = '';
                    }
                    $data['worker_image'] = '';

                    $data['job'] = isset($job['number_of_references'])?$job['number_of_references']:"";
                    $data['match'] = $worker_ref_num;
                    $data['worker'] = isset($worker_reference_name)?$worker_reference_name:"";
                    $data['name'] = 'Reference';
                    $data['match_title'] = 'Number Of Reference';
                    $data['update_key'] = 'worker_reference_name';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'Who are your References?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' References':'number of references';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['min_title_of_reference'])?$job['min_title_of_reference']:"";
                    $data['match'] = !empty($worker_reference_title)?true:false;
                    $data['worker'] = isset($worker_reference_title)?$worker_reference_title:"";
                    $data['name'] = 'Reference title';
                    $data['match_title'] = 'Min Title Of Reference';
                    $data['update_key'] = 'worker_reference_title';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'What was their title?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'min title of reference';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['recency_of_reference'])?$job['recency_of_reference']:"";
                    $data['match'] = !empty($worker_reference_recency_reference)?true:false;
                    $data['worker'] = isset($worker_reference_recency_reference)?$worker_reference_recency_reference:"";
                    $data['name'] = 'Recency Reference Assignment';
                    $data['match_title'] = 'Recency Of Reference';
                    $data['update_key'] = 'worker_reference_recency_reference';
                    $data['type'] = 'multiple';
                    $data['worker_title'] = 'Is this from your last assignment?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' months':'recency of reference';
                    $worker_info[] = $data;

                    $i = 0;
                    foreach($certificate as $job_cert)
                    {
                        $data['job'] = isset($certificate[$i])?$certificate[$i]:"Certifications";
                        $data['match'] = !empty($worker_certificate_name[$i])?true:false;
                        $data['worker'] = isset($worker_certificate_name[$i])?$worker_certificate_name[$i]:"";
                        if(isset($worker_certificate_name[$i])){
                            $data['worker_image'] = isset($cert_image[$i]['name'])?url('public/images/nurses/certificate/'.$cert_image[$i]['name']):"";
                        }
                        $data['name'] = $data['worker'];
                        $data['match_title'] = 'Certifications';
                        $data['update_key'] = 'worker_certificate';
                        $data['type'] = 'file';
                        $data['worker_title'] = 'No '.$data['worker'];
                        $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications';
                        $worker_info[] = $data;
                        $i++;
                    }
                    $data['worker_image'] = '';

                    $data['job'] = isset($job['skills'])?$job['skills']:"";
                    $data['match'] = !empty($job_data['skills'])?true:false;
                    $data['worker'] = isset($job_data['skills'])?$job_data['skills']:"";
                    if(isset($job_data['skills'])){
                        $data['worker_image'] = isset($skills_checklists[0])?$skills_checklists[0]:"";
                    }
                    
                    $data['name'] = 'Skills';
                    $data['match_title'] = 'Skills checklist';
                    $data['update_key'] = 'skills';
                    $data['type'] = 'file';
                    $data['worker_title'] = 'Upload your latest skills checklist';
                    $data['job_title'] = $data['job'].' Skills checklist';
                    $worker_info[] = $data;
                    $data['worker_image'] = '';

                    if(isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"" == 'yes'){ $eligible_work_in_us = true; }else{ $eligible_work_in_us = false; }
                    $data['job'] = "Eligible to work in the US";
                    $data['match'] = $eligible_work_in_us;
                    $data['worker'] = isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"";
                    $data['name'] = 'eligible_work_in_us';
                    $data['match_title'] = 'Eligible to work in the US';
                    $data['update_key'] = 'eligible_work_in_us';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Does Congress allow you to work here?';
                    $data['job_title'] = 'Eligible to work in the US';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['urgency'])?$job['urgency']:"";
                    $data['match'] = !empty($job_data['worker_urgency'])?true:false;
                    $data['worker'] = isset($job_data['worker_urgency'])?$job_data['worker_urgency']:"";
                    $data['name'] = 'worker_urgency';
                    $data['match_title'] = 'Urgency';
                    $data['update_key'] = 'worker_urgency';
                    $data['type'] = 'input';
                    $data['worker_title'] = "How quickly can you be ready to submit?";
                    if(isset($data['job']) && $data['job'] == '1'){ $data['job'] = 'Auto Offer'; }else{
                        $data['job'] = 'Urgency';
                    }
                    // $data['job_title'] = $data['job'];
                    $data['job_title'] = !empty($job['urgency'])?$job['urgency']:"Urgency";
                    $worker_info[] = $data;

                    $data['job'] = isset($job['position_available'])?$job['position_available']:"";
                    $data['match'] = !empty($job_data["available_position"])?true:false;
                    $data['worker'] = isset($job_data["available_position"])?$job_data["available_position"]:"";
                    $data['name'] = 'available_position';
                    $data['match_title'] = '# of Positions Available';
                    $data['update_key'] = 'available_position';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'You have applied to # jobs?';
                    $data['job_title'] = !empty($data['job'])?$is_vacancy.' of '.$data['job']:'# of Positions Available';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['msp'])?$job['msp']:"";
                    $data['match'] = !empty($job_data['MSP'])?true:false;
                    $data['worker'] = isset($job_data['MSP'])?$job_data['MSP']:"";
                    $data['name'] = 'MSP';
                    $data['match_title'] = 'MSP';
                    $data['update_key'] = 'MSP';
                    $data['worker_title'] = 'Any MSPs you prefer to avoid?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'MSP';
                    $data['type'] = 'dropdown';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['vms'])?$job['vms']:"";
                    $data['match'] = !empty($job_data['VMS'])?true:false;
                    $data['worker'] = isset($job_data['VMS'])?$job_data['VMS']:"";
                    $data['name'] = 'VMS';
                    $data['match_title'] = 'VMS';
                    $data['update_key'] = 'VMS';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "Who's your favorite VMS?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'VMS';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['submission_of_vms'])?$job['submission_of_vms']:"";
                    $data['match'] = !empty($job_data['submission_VMS'])?true:false;
                    $data['worker'] = isset($job_data['submission_VMS'])?$job_data['submission_VMS']:"";
                    $data['name'] = 'submission_VMS';
                    $data['match_title'] = '# of Submissions in VMS';
                    $data['update_key'] = 'submission_VMS';
                    $data['type'] = 'input';
                    $data['worker_title'] = '# of Submissions in VMS';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'# of Submissions in VMS';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['block_scheduling'])?$job['block_scheduling']:"";
                    $data['match'] = !empty($job_data['worker_block_scheduling'])?true:false;
                    $data['worker'] = isset($job_data['worker_block_scheduling'])?$job_data['worker_block_scheduling']:"";
                    $data['name'] = 'Block_scheduling';
                    $data['match_title'] = 'Block Scheduling';
                    $data['update_key'] = 'block_scheduling';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Do you want block scheduling?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Block Scheduling';
                    $worker_info[] = $data;

                    if($job_data['worker_float_requirement'] == 'Yes'){ $val = true; }else{ $val = false; }
                    $data['job'] = isset($job['float_requirement'])?$job['float_requirement']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_float_requirement'])?$job_data['worker_float_requirement']:"";
                    $data['name'] = 'Float Requirement';
                    $data['match_title'] = 'Float requirements';
                    $data['update_key'] = 'float_requirement';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Are you willing float to?';
                    $data['job_title'] = !empty($job['float_requirement'])?$job['float_requirement']:'Float requirements';
                    $worker_info[] = $data;
                    
                    $data['job'] = isset($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:"";
                    $data['match'] = !empty($job_data['worker_facility_shift_cancelation_policy'])?true:false;
                    $data['worker'] = isset($job_data['worker_facility_shift_cancelation_policy'])?$job_data['worker_facility_shift_cancelation_policy']:"";
                    $data['name'] = 'Facility Shift Cancelation Policy';
                    $data['match_title'] = 'Facility Shift Cancellation Policy';
                    $data['update_key'] = 'facility_shift_cancelation_policy';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What terms do you prefer?';
                    $data['job_title'] = !empty($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:'Facility Shift Cancellation Policy';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['contract_termination_policy'])?$job['contract_termination_policy']:"";
                    $data['match'] = !empty($job_data['worker_contract_termination_policy'])?true:false;
                    $data['worker'] = isset($job_data['worker_contract_termination_policy'])?$job_data['worker_contract_termination_policy']:"";
                    $data['name'] = 'Contract Terminology';
                    $data['match_title'] = 'Contract Termination Policy';
                    $data['update_key'] = 'contract_termination_policy';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What terms do you prefer?';
                    $data['job_title'] = !empty($job['contract_termination_policy'])?$job['contract_termination_policy']:'Contract Termination Policy';
                    $worker_info[] = $data;

                    if(isset($job_data['distance_from_your_home']) && ($job_data['distance_from_your_home'] != 0) ){
                        $data['worker'] = $job_data['distance_from_your_home'];
                    }else{
                        $data['worker'] = "";
                    }
                    if($job['traveler_distance_from_facility'] == $data['worker']){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['traveler_distance_from_facility'])?$job['traveler_distance_from_facility']:"";
                    $data['match'] = $val;
                    // $data['worker'] = isset($job_data['distance_from_your_home'])?$job_data['distance_from_your_home']:"";
                    $data['name'] = 'distance from facility';
                    $data['match_title'] = 'Traveler Distance From Facility';
                    $data['update_key'] = 'distance_from_your_home';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Where does the IRS think you live?';
                    $data['job_title'] = !empty($data['job'])?$data['job'].' miles':'Traveler Distance From Facility';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['facility'])?$job['facility']:"";
                    $data['match'] = !empty($job_data['facilities_you_like_to_work_at'])?true:false;
                    $data['worker'] = isset($job_data['facilities_you_like_to_work_at'])?$job_data['facilities_you_like_to_work_at']:"";
                    $data['name'] = 'Facility available upon request';
                    $data['match_title'] = 'Facility';
                    $data['update_key'] = 'facilities_you_like_to_work_at';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What facilities have you worked at?';
                    $data['job_title'] = !empty($job['facility'])?$job['facility']:'Facility';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"";
                    $data['match'] = !empty($job_data['worker_facility_parent_system'])?true:false;
                    $data['worker'] = isset($job_data['worker_facility_parent_system'])?$job_data['worker_facility_parent_system']:"";
                    $data['name'] = 'facility parent system';
                    $data['match_title'] = "Facility's Parent System";
                    $data['update_key'] = 'worker_facility_parent_system';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What facilities would you like to work at?';
                    $data['job_title'] = !empty($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"Facility's Parent System";
                    $worker_info[] = $data;

                    if(isset($job_data['avg_rating_by_facilities']) && ($job_data['avg_rating_by_facilities'] != 0) ){
                        $data['worker'] = $job_data['avg_rating_by_facilities'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['facility_average_rating'])?$job['facility_average_rating']:"";
                    $data['match'] = !empty($job_data['avg_rating_by_facilities'])?true:false;
                    // $data['worker'] = isset($job_data['avg_rating_by_facilities'])?$job_data['avg_rating_by_facilities']:"";
                    $data['name'] = 'facility average rating';
                    $data['match_title'] = 'Facility Average Rating';
                    $data['update_key'] = 'avg_rating_by_facilities';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your facilities';
                    $data['job_title'] = !empty($job['facility_average_rating'])?$job['facility_average_rating']:'Facility Average Rating';
                    $worker_info[] = $data;

                    if(isset($job_data['worker_avg_rating_by_recruiters']) && ($job_data['worker_avg_rating_by_recruiters'] != 0) ){
                        $data['worker'] = $job_data['worker_avg_rating_by_recruiters'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['recruiter_average_rating'])?$job['recruiter_average_rating']:"";
                    $data['match'] = !empty($job_data['worker_avg_rating_by_recruiters'])?true:false;
                    // $data['worker'] = isset($job_data['worker_avg_rating_by_recruiters'])?$job_data['worker_avg_rating_by_recruiters']:"";
                    $data['name'] = 'recruiter average rating';
                    $data['match_title'] = 'Recruiter Average Rating';
                    $data['update_key'] = 'worker_avg_rating_by_recruiters';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your recruiters';
                    $data['job_title'] = !empty($job['recruiter_average_rating'])?$job['recruiter_average_rating']:'Recruiter Average Rating';
                    $worker_info[] = $data;

                    if(isset($job_data['worker_avg_rating_by_employers']) && ($job_data['worker_avg_rating_by_employers'] != 0) ){
                        $data['worker'] = $job_data['worker_avg_rating_by_employers'];
                    }else{
                        $data['worker'] = "";
                    }
                    $data['job'] = isset($job['employer_average_rating'])?$job['employer_average_rating']:"";
                    $data['match'] = !empty($job_data['worker_avg_rating_by_employers'])?true:false;
                    // $data['worker'] = isset($job_data['worker_avg_rating_by_employers'])?$job_data['worker_avg_rating_by_employers']:"";
                    $data['name'] = 'employer average rating';
                    $data['match_title'] = 'Employer Average Rating';
                    $data['update_key'] = 'worker_avg_rating_by_employers';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Your average rating by your employers';
                    $data['job_title'] = !empty($job['employer_average_rating'])?$job['employer_average_rating']:'Employer Average Rating';
                    $worker_info[] = $data;

                    if(isset($job['clinical_setting'])?$job['clinical_setting']:'' == isset($job_data['clinical_setting_you_prefer'])?$job_data['clinical_setting_you_prefer']:""){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['clinical_setting'])?$job['clinical_setting']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['clinical_setting_you_prefer'])?$job_data['clinical_setting_you_prefer']:"";
                    $data['name'] = 'Clinical Setting';
                    $data['match_title'] = 'Clinical Setting';
                    $data['update_key'] = 'clinical_setting_you_prefer';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What setting do you prefer?';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:' Clinical Setting';
                    $worker_info[] = $data;
                    
                    $data['job'] = isset($job['Patient_ratio'])?$job['Patient_ratio']:"";
                    $data['match'] = !empty($job_data['worker_patient_ratio'])?true:false;
                    $data['worker'] = isset($job_data['worker_patient_ratio'])?$job_data['worker_patient_ratio']:"";
                    $data['name'] = 'patient ratio';
                    $data['match_title'] = 'Patient Ratio';
                    $data['update_key'] = 'worker_patient_ratio';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How many patients can you handle?';
                    $data['job_title'] = !empty($job['Patient_ratio'])?$job['Patient_ratio']:'Patient ratio';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['emr'])?$job['emr']:"";
                    $data['match'] = !empty($job_data['worker_emr'])?true:false;
                    $data['worker'] = isset($job_data['worker_emr'])?$job_data['worker_emr']:"";
                    $data['name'] = 'EMR';
                    $data['match_title'] = 'EMR';
                    $data['update_key'] = 'worker_emr';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'What EMRs have you used?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'EMR';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Unit'])?$job['Unit']:"";
                    $data['match'] = !empty($job_data['worker_unit'])?true:false;
                    $data['worker'] = isset($job_data['worker_unit'])?$job_data['worker_unit']:"";
                    $data['name'] = 'Unit';
                    $data['match_title'] = 'Unit';
                    $data['update_key'] = 'worker_unit';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Unit?';
                    $data['job_title'] = !empty($job['Unit'])?$job['Unit']:'Unit';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Department'])?$job['Department']:"";
                    $data['match'] = !empty($job_data['worker_department'])?true:false;
                    $data['worker'] = isset($job_data['worker_department'])?$job_data['worker_department']:"";
                    $data['name'] = 'Department';
                    $data['match_title'] = 'Department';
                    $data['update_key'] = 'worker_department';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Department?';
                    $data['job_title'] = !empty($job['Department'])?$job['Department']:'Department';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Bed_Size'])?$job['Bed_Size']:"";
                    $data['match'] = !empty($job_data['worker_bed_size'])?true:false;
                    $data['worker'] = isset($job_data['worker_bed_size'])?$job_data['worker_bed_size']:"";
                    $data['name'] = 'Bed Size';
                    $data['match_title'] = 'Bed Size';
                    $data['update_key'] = 'worker_bed_size';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'king or california king ?';
                    $data['job_title'] = !empty($job['Bed_Size'])?$job['Bed_Size']:'Bed Size';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['Trauma_Level'])?$job['Trauma_Level']:"";
                    $data['match'] = !empty($job_data['worker_trauma_level'])?true:false;
                    $data['worker'] = isset($job_data['worker_trauma_level'])?$job_data['worker_trauma_level']:"";
                    $data['name'] = 'Trauma Level';
                    $data['match_title'] = 'Trauma Level';
                    $data['update_key'] = 'worker_trauma_level';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal trauma level?';
                    $data['job_title'] = !empty($job['Trauma_Level'])?$job['Trauma_Level']:'Trauma Level';
                    $worker_info[] = $data;

                    if($job['scrub_color'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['scrub_color'])?$job['scrub_color']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_scrub_color'])?$job_data['worker_scrub_color']:"";
                    $data['name'] = 'Scrub color';
                    $data['match_title'] = 'Scrub Color';
                    $data['update_key'] = 'worker_scrub_color';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Fav Scrub Brand?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Scrub Color';
                    $worker_info[] = $data;

                    if($job['job_state'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['job_state'])?$job['job_state']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_facility_state_code'])?$job_data['worker_facility_state_code']:"";
                    $data['name'] = 'Facility state';
                    $data['match_title'] = 'Facility State Code';
                    $data['update_key'] = 'worker_facility_state_code';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "States you'd like to work?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Facility State Code';
                    $worker_info[] = $data;

                    if($job['job_city'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['job_city'])?$job['job_city']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_facility_city'])?$job_data['worker_facility_city']:"";
                    $data['name'] = 'Facility City';
                    $data['match_title'] = 'Facility City';
                    $data['update_key'] = 'worker_facility_city';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = "Cities you'd like to work?";
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Facility City';
                    $worker_info[] = $data;

                    $data['job'] = "InterviewDates";
                    $data['match'] = !empty($job_data['worker_interview_dates'])?true:false;
                    $data['worker'] = isset($job_data['worker_interview_dates'])?$job_data['worker_interview_dates']:"";
                    $data['name'] = 'Interview dates';
                    $data['match_title'] = 'InterviewDates';
                    $data['update_key'] = 'worker_interview_dates';
                    $data['type'] = 'Interview dates';
                    $data['worker_title'] = "Any days you're not available?";
                    $data['job_title'] = 'InterviewDates';
                    $worker_info[] = $data;

                    if(isset($job['as_soon_as']) && ($job['as_soon_as'] == '1')){
                        $data['job'] = "As Soon As";
                    }else{
                        $data['job'] = isset($job['start_date'])?$job['start_date']:"";
                    }
                    if(isset($job_data['worker_as_soon_as_posible']) && ($job_data['worker_as_soon_as_posible'] == '1')){
                        $data['worker'] = "As Soon As";
                    }else{
                        $data['worker'] = isset($job_data['worker_start_date'])?$job_data['worker_start_date']:"";
                    }
                    if($data['worker'] == $data['job']){ $data['match'] = true;}else{ $data['match'] = false; }
                    $data['name'] = 'As Soon As';
                    $data['match_title'] = 'Start Date';
                    $data['update_key'] = 'worker_as_soon_as_posible';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'When can you start?';
                    $data['job_title'] = !empty($job['as_soon_as'])?$job['as_soon_as']:'Start Date';
                    $worker_info[] = $data;

                    if($job['rto'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['rto'])?$job['rto']:"";
                    $data['match'] = $val;
                    $data['worker'] = "";
                    $data['name'] = 'RTO';
                    $data['match_title'] = 'RTO';
                    $data['update_key'] = 'clinical_setting_you_prefer';
                    $data['type'] = 'input';
                    $data['worker_title'] = !empty($data['worker'])?$data['worker']:'Any time off?';
                    $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'RTO';
                    $worker_info[] = $data;

                    if($job['preferred_shift'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['preferred_shift'])?$job['preferred_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"";
                    $data['name'] = 'Shift';
                    $data['match_title'] = 'Shift Time of Day';
                    $data['update_key'] = 'worker_shift_time_of_day';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'Fav Shift?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Shift Time of Day';
                    $worker_info[] = $data;


                    if($job['hours_per_week'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['hours_per_week'])?$job['hours_per_week']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_hours_per_week'])?$job_data['worker_hours_per_week']:"";
                    $data['name'] = 'Hours/week';
                    $data['match_title'] = 'Hours/Week';
                    $data['update_key'] = 'worker_hours_per_week';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal Hours per week?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Week';
                    $worker_info[] = $data;

                    if($job['guaranteed_hours'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['guaranteed_hours'])?$job['guaranteed_hours']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_guaranteed_hours'])?$job_data['worker_guaranteed_hours']:"";
                    $data['name'] = 'Guaranteed Hours';
                    $data['match_title'] = 'Guaranteed Hours';
                    $data['update_key'] = 'worker_guaranteed_hours';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Open to jobs with no guaranteed hours?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Guaranteed Hours';
                    $worker_info[] = $data;

                    if($job['hours_shift'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['hours_shift'])?$job['hours_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_hours_shift'])?$job_data['worker_hours_shift']:"";
                    $data['name'] = 'Shift Hours';
                    $data['match_title'] = 'Hours/Shift';
                    $data['update_key'] = 'worker_hours_shift';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Prefered hours per shift?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Shift';
                    $worker_info[] = $data;

                    if($job['preferred_assignment_duration'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['preferred_assignment_duration'])?$job['preferred_assignment_duration']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weeks_assignment'])?$job_data['worker_weeks_assignment']:"";
                    $data['name'] = 'Assignment in weeks';
                    $data['match_title'] = 'Weeks/Assignment';
                    $data['update_key'] = 'worker_weeks_assignment';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How many weeks?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weeks/Assignment';
                    $worker_info[] = $data;

                    if($job['weeks_shift'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weeks_shift'])?$job['weeks_shift']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_shifts_week'])?$job_data['worker_shifts_week']:"";
                    $data['name'] = 'Shift Week';
                    $data['match_title'] = 'Shifts/Week';
                    $data['update_key'] = 'worker_shifts_week';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Ideal shifts per week?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Shifts/Week';
                    $worker_info[] = $data;

                    if($job['referral_bonus'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['referral_bonus'])?$job['referral_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_referral_bonus'])?$job_data['worker_referral_bonus']:"";
                    $data['name'] = 'Refferel Bonus';
                    $data['match_title'] = 'Referral Bonus';
                    $data['update_key'] = 'worker_referral_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = '# of people you have referred';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Referral Bonus';
                    $worker_info[] = $data;

                    if($job['sign_on_bonus'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['sign_on_bonus'])?$job['sign_on_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_sign_on_bonus'])?$job_data['worker_sign_on_bonus']:"";
                    $data['name'] = 'Sign On Bonus';
                    $data['match_title'] = 'Sign-On Bonus';
                    $data['update_key'] = 'worker_sign_on_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What kind of bonus do you expect?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Sign-On Bonus';
                    $worker_info[] = $data;

                    if($job['completion_bonus'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['completion_bonus'])?$job['completion_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_completion_bonus'])?$job_data['worker_completion_bonus']:"";
                    $data['name'] = 'Completion Bonus';
                    $data['match_title'] = 'Completion Bonus';
                    $data['update_key'] = 'worker_completion_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What kind of bonus do you deserve?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Completion Bonus';
                    $worker_info[] = $data;

                    if($job['extension_bonus'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['extension_bonus'])?$job['extension_bonus']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_extension_bonus'])?$job_data['worker_extension_bonus']:"";
                    $data['name'] = 'extension bonus';
                    $data['match_title'] = 'Extension Bonus';
                    $data['update_key'] = 'worker_extension_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What are you comparing this too?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Extension Bonus';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['other_bonus'])?$job['other_bonus']:"";
                    $data['match'] = !empty($job_data['worker_other_bonus'])?true:false;
                    $data['worker'] = isset($job_data['worker_other_bonus'])?$job_data['worker_other_bonus']:"";
                    $data['name'] = 'Other Bonus';
                    $data['match_title'] = 'Other Bonus';
                    $data['update_key'] = 'worker_other_bonus';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Other bonuses you want?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Other Bonus';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['four_zero_one_k'])?$job['four_zero_one_k']:"";
                    $data['match'] = !empty($job_data['how_much_k'])?true:false;
                    $data['worker'] = isset($job_data['how_much_k'])?$job_data['how_much_k']:"";
                    $data['name'] = '401k';
                    $data['match_title'] = '401K';
                    $data['update_key'] = 'how_much_k';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'401K';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['health_insaurance'])?$job['health_insaurance']:"";
                    $data['match'] = !empty($job_data['worker_health_insurance'])?true:false;
                    $data['worker'] = isset($job_data['worker_health_insurance'])?$job_data['worker_health_insurance']:"";
                    $data['name'] = 'Health Insaurance';
                    $data['match_title'] = 'Health Insurance';
                    $data['update_key'] = 'worker_health_insurance';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Health Insurance';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['dental'])?$job['dental']:"";
                    $data['match'] = !empty($job_data['worker_dental'])?true:false;
                    $data['worker'] = isset($job_data['worker_dental'])?$job_data['worker_dental']:"";
                    $data['name'] = 'Dental';
                    $data['match_title'] = 'Dental';
                    $data['update_key'] = 'worker_dental';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Dental';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['vision'])?$job['vision']:"";
                    $data['match'] = !empty($job_data['worker_vision'])?true:false;
                    $data['worker'] = isset($job_data['worker_vision'])?$job_data['worker_vision']:"";
                    $data['name'] = 'Vision';
                    $data['match_title'] = 'Vision';
                    $data['update_key'] = 'worker_vision';
                    $data['type'] = 'dropdown';
                    $data['worker_title'] = 'How much do you want this?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Vision';
                    $worker_info[] = $data;

                    if($job['actual_hourly_rate'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['actual_hourly_rate'])?$job['actual_hourly_rate']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_actual_hourly_rate'])?$job_data['worker_actual_hourly_rate']:"";
                    $data['name'] = 'Actual Rate';
                    $data['match_title'] = 'Actual Hourly Rate';
                    $data['update_key'] = 'worker_actual_hourly_rate';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What range is fair?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Actual Hourly rate';
                    $worker_info[] = $data;

                    if($job['feels_like_per_hour'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['feels_like_per_hour'])?$job['feels_like_per_hour']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_feels_like_hour'])?$job_data['worker_feels_like_hour']:"";
                    $data['name'] = 'feels/$hr';
                    $data['match_title'] = 'Feels Like $/hr';
                    $data['update_key'] = 'worker_feels_like_hour';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Does this seem fair based on the market?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Feels Like $/hr';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['overtime'])?$job['overtime']:"";
                    $data['match'] = !empty($job_data['worker_overtime'])?true:false;
                    $data['worker'] = isset($job_data['worker_overtime'])?$job_data['worker_overtime']:"";
                    $data['name'] = 'Overtime';
                    $data['match_title'] = 'Overtime';
                    $data['update_key'] = 'worker_overtime';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Would you work more overtime for a higher OT rate?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Overtime';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['holiday'])?$job['holiday']:"";
                    $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                    $data['worker'] = isset($job_data['worker_holiday'])?$job_data['worker_holiday']:"";
                    $data['name'] = 'Holiday';
                    $data['match_title'] = 'Holiday';
                    $data['update_key'] = 'worker_holiday';
                    $data['type'] = 'date';
                    $data['worker_title'] = 'Any holidays you refuse to work?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Holiday';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['on_call'])?$job['on_call']:"";
                    $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                    $data['worker'] = isset($job_data['worker_on_call'])?$job_data['worker_on_call']:"";
                    $data['name'] = 'On call';
                    $data['match_title'] = 'On Call';
                    $data['update_key'] = 'worker_on_call';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Will you do call?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'On Call';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['call_back'])?$job['call_back']:"";
                    $data['match'] = !empty($job_data['worker_call_back'])?true:false;
                    $data['worker'] = isset($job_data['worker_call_back'])?$job_data['worker_call_back']:"";
                    $data['name'] = 'Call Back';
                    $data['match_title'] = 'Call Back';
                    $data['update_key'] = 'worker_call_back';
                    $data['type'] = 'checkbox';
                    $data['worker_title'] = 'Is this rate reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Call Back';
                    $worker_info[] = $data;

                    $data['job'] = isset($job['orientation_rate'])?$job['orientation_rate']:"";
                    $data['match'] = !empty($job_data['worker_orientation_rate'])?true:false;
                    $data['worker'] = isset($job_data['worker_orientation_rate'])?$job_data['worker_orientation_rate']:"";
                    $data['name'] = 'Orientation Rate';
                    $data['match_title'] = 'Orientation Rate';
                    $data['update_key'] = 'worker_orientation_rate';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Is this rate reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Orientation Rate';
                    $worker_info[] = $data;

                    if($job['weekly_taxable_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weekly_taxable_amount'])?$job['weekly_taxable_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weekly_taxable_amount'])?$job_data['worker_weekly_taxable_amount']:"";
                    $data['name'] = 'Weekly Taxable Amount';
                    $data['match_title'] = 'Weekly Taxable Amount';
                    $data['update_key'] = 'worker_weekly_taxable_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly Taxable Amount';
                    $worker_info[] = $data;

                    if($job['weekly_non_taxable_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['weekly_non_taxable_amount'])?$job['weekly_non_taxable_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_weekly_non_taxable_amount'])?$job_data['worker_weekly_non_taxable_amount']:"";
                    $data['name'] = 'Weekly Non Taxable Amount';
                    $data['match_title'] = 'Weekly Non-Taxable Amount';
                    $data['update_key'] = 'worker_weekly_non_taxable_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'Are you going to duplicate expenses?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly non-taxable amount';
                    $worker_info[] = $data;

                    if($job['employer_weekly_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['employer_weekly_amount'])?$job['employer_weekly_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_employer_weekly_amount'])?$job_data['worker_employer_weekly_amount']:"";
                    $data['name'] = 'Employer Weekly Amount';
                    $data['match_title'] = 'Employer Weekly Amount';
                    $data['update_key'] = 'worker_employer_weekly_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'What range is reasonable?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Employer Weekly Amount';
                    $worker_info[] = $data;

                    if($job['goodwork_weekly_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['goodwork_weekly_amount'])?$job['goodwork_weekly_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_goodwork_weekly_amount'])?$job_data['worker_goodwork_weekly_amount']:"";
                    $data['name'] = 'Goodwork Weekly Amount';
                    $data['match_title'] = 'Goodwork Weekly Amount';
                    $data['update_key'] = 'worker_goodwork_weekly_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'You only have (count down time) left before your rate drops from 5% to 2%';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Goodwork Weekly Amount';
                    $worker_info[] = $data;

                    if($job['total_employer_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_employer_amount'])?$job['total_employer_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_employer_amount'])?$job_data['worker_total_employer_amount']:"";
                    $data['name'] = 'Total Employer Amount';
                    $data['match_title'] = 'Total Employer Amount';
                    $data['update_key'] = 'worker_total_employer_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Employer Amount';
                    $worker_info[] = $data;

                    if($job['total_goodwork_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_goodwork_amount'])?$job['total_goodwork_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_goodwork_amount'])?$job_data['worker_total_goodwork_amount']:"";
                    $data['name'] = 'Total Goodwork Amount';
                    $data['match_title'] = 'Total Goodwork Amount';
                    $data['update_key'] = 'worker_total_goodwork_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = 'How would you spend those extra funds?';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Goodwork Amount';
                    $worker_info[] = $data;

                    if($job['total_contract_amount'] == ''){ $val = true; }else{$val = false;}
                    $data['job'] = isset($job['total_contract_amount'])?$job['total_contract_amount']:"";
                    $data['match'] = $val;
                    $data['worker'] = isset($job_data['worker_total_contract_amount'])?$job_data['worker_total_contract_amount']:"";
                    $data['name'] = 'Total Contract Amount';
                    $data['match_title'] = 'Total Contract Amount';
                    $data['update_key'] = 'worker_total_contract_amount';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = !empty($data['job'])?$data['job']:'Total Contract Amount';
                    $worker_info[] = $data;

                    $data['job'] = "Goodwork Number";
                    $data['match'] = !empty($job_data['worker_goodwork_number'])?true:false;
                    $data['worker'] = isset($job_data['worker_goodwork_number'])?$job_data['worker_goodwork_number']:"";
                    $data['name'] = 'goodwork number';
                    $data['match_title'] = 'Goodwork Number';
                    $data['update_key'] = 'worker_goodwork_number';
                    $data['type'] = 'input';
                    $data['worker_title'] = '';
                    $data['job_title'] = 'Goodwork Number';
                    $worker_info[] = $data;

                    $result['worker_info'] = $worker_info;
                    

                    
                    $this->check = "1";
                    $this->message = "Matching details listed successfully";
                    // $this->return_data = $data;
                    $this->return_data = $result;

                // }else{
                //     $this->check = "1";
                //     $this->message = "User Not Found";
                // }
                
            // }else{
            //     $this->check = "1";
            //     $this->message = "Worker Not Found";
            // }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function updateWorkerInformation(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'worker_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker_info  = Nurse::where('id', $request->worker_id);
            $vaccination = [];
            if ($worker_info->count() > 0) {
                $worker = $worker_info->get()->first();

                $worker->specialty = isset($request->specialty)?$request->specialty:$worker->specialty;
                $worker->nursing_license_state = isset($request->nursing_license_state)?$request->nursing_license_state:$worker->nursing_license_state;
                $worker->license_type = isset($request->license_type)?$request->license_type:$worker->license_type;
                $worker->nursing_license_number = isset($request->nursing_license_number)?$request->nursing_license_number:$worker->nursing_license_number;
                $worker->highest_nursing_degree = isset($request->highest_nursing_degree)?$request->highest_nursing_degree:$worker->highest_nursing_degree;
                $worker->city = isset($request->city)?$request->city:$worker->city;
                $worker->state = isset($request->state)?$request->state:$worker->state;
                $worker->country = isset($request->country)?$request->country:$worker->country;
                $worker->hourly_pay_rate = isset($request->hourly_pay_rate)?$request->hourly_pay_rate:$worker->hourly_pay_rate;
                $worker->experience = isset($request->experience)?$request->experience:$worker->experience;
                $worker->recent_experience = isset($request->recent_experience)?$request->recent_experience:$worker->recent_experience;
                $worker->active = isset($request->active)?$request->active:$worker->active;
                $worker->clinical_educator = isset($request->clinical_educator)?$request->clinical_educator:$worker->clinical_educator;
                $worker->credential_title = isset($request->credential_title)?$request->credential_title:$worker->credential_title;
                $worker->languages = isset($request->languages)?$request->languages:$worker->languages;
                $worker->worker_vaccination = isset($worker->worker_vaccination)?$worker->worker_vaccination:null;
                // if(isset($worker->worker_vaccination) && !empty($worker->worker_vaccination))
                // {
                    if(isset($worker->worker_vaccination) && !empty($worker->worker_vaccination)){
                        $resu = json_decode($worker->worker_vaccination);
                        foreach($resu as $vac){
                            $vaccination[] = $vac;
                        }
                    }else{
                        $vaccination[0] = null;
                        $vaccination[1] = null;
                    }

                    // upload covid
                    if ($request->hasFile('covid') && $request->file('covid') != null) 
                    {
                        $dele = NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'covid')->forceDelete();

                        if(!empty($vaccination[0])){
                            if(\File::exists(public_path('images/nurses/vaccination/').$vaccination[0]))
                            {
                                \File::delete(public_path('images/nurses/vaccination/').$vaccination[0]);
                            }
                        }
                        
                        $covid_name_full = $request->file('covid')->getClientOriginalName();
                        $covid_name = pathinfo($covid_name_full, PATHINFO_FILENAME);
                        $covid_ext = $request->file('covid')->getClientOriginalExtension();
                        $covid = $covid_name.'_'.time().'.'.$covid_ext;
                        $destinationPath = 'images/nurses/vaccination';
                        $request->file('covid')->move(public_path($destinationPath), $covid);
                        
                        // write image name in worker table
                        // $worker->covid = $covid;
                        $covid_date = isset($request->covid_date)?$request->covid_date:'';
                        $covid_asset = NurseAsset::create([
                            'nurse_id' => $request->worker_id,
                            'using_date' => $covid_date,
                            'name' => $covid,
                            'filter' => 'covid'
                        ]);
                        $vaccination[0] = $covid;
                        if(isset($covid_asset)){
                            $update = NurseAsset::where(['id' => $covid_asset['id']])->update([
                                'using_date' => $covid_date
                            ]);
                        }
                    }else if(isset($request->covid_date) && !isset($request->covid)){
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'covid')->update([
                            'using_date' => $request->covid_date,
                        ]);
                    }

                    // Upload flu
                    if ($request->hasFile('flu') && $request->file('flu') != null) 
                    {
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'flu')->forceDelete();
                        if(!empty($vaccination[1])){
                            // unlink(public_path('images/nurses/vaccination/').$vaccination[1]);
                            if(\File::exists(public_path('images/nurses/vaccination/').$vaccination[1]))
                            {
                                \File::delete(public_path('images/nurses/vaccination/').$vaccination[1]);
                            }
                        }

                        $flu_name_full = $request->file('flu')->getClientOriginalName();
                        $flu_name = pathinfo($flu_name_full, PATHINFO_FILENAME);
                        $flu_ext = $request->file('flu')->getClientOriginalExtension();
                        $flu = $flu_name.'_'.time().'.'.$flu_ext;
                        $destinationPath = 'images/nurses/vaccination';
                        $request->file('flu')->move(public_path($destinationPath), $flu);

                        // write image name in worker table
                        // $worker->flu = $flu;
                        $flu_date = isset($request->flu_date)?$request->flu_date:'';
                        $flu_asset = NurseAsset::create([
                            'nurse_id' => $request->worker_id,
                            'name' => $flu,
                            'filter' => 'flu',
                            'using_date' => $flu_date,
                        ]);
                        $vaccination[1] = $flu;
                        if(isset($flu_asset)){
                            $update = NurseAsset::where(['id' => $flu_asset['id']])->update([
                                'using_date' => $flu_date
                            ]);
                        }
                    }else if(isset($request->flu_date)){
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'flu')->update([
                            'using_date' => $request->flu_date,
                        ]);
                    }
                    $worker->worker_vaccination = json_encode($vaccination);
                    
                // }
                // Diploma
                if ($request->hasFile('diploma') && $request->file('diploma') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'diploma')->forceDelete();
                    if(!empty($worker->diploma)){
                        if(\File::exists(public_path('images/nurses/diploma/').$worker->diploma))
                        {
                            \File::delete(public_path('images/nurses/diploma/').$worker->diploma);
                        }
                    }

                    $diploma_name_full = $request->file('diploma')->getClientOriginalName();
                    $diploma_name = pathinfo($diploma_name_full, PATHINFO_FILENAME);
                    $diploma_ext = $request->file('diploma')->getClientOriginalExtension();
                    $diploma = $diploma_name.'_'.time().'.'.$diploma_ext;
                    $destinationPath = 'images/nurses/diploma';
                    $request->file('diploma')->move(public_path($destinationPath), $diploma);

                    // write image name in worker table
                    $worker->diploma = $diploma;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $diploma,
                        'filter' => 'diploma'
                    ]);
                }
                
                // Driving License
                if ($request->hasFile('driving_license') && $request->file('driving_license') != null) 
                {    
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'driving_license')->forceDelete();
                    if(!empty($worker->driving_license)){
                        if(\File::exists(public_path('images/nurses/driving_license/').$worker->driving_license))
                        {
                            \File::delete(public_path('images/nurses/driving_license/').$worker->driving_license);
                        }
                    }

                    $driving_license_name_full = $request->file('driving_license')->getClientOriginalName();
                    $driving_license_name = pathinfo($driving_license_name_full, PATHINFO_FILENAME);
                    $driving_license_ext = $request->file('driving_license')->getClientOriginalExtension();
                    $driving_license = $driving_license_name.'_'.time().'.'.$driving_license_ext;
                    $destinationPath = 'images/nurses/driving_license';
                    $request->file('driving_license')->move(public_path($destinationPath), $driving_license);
                    
                    // write image name in worker table
                    $worker->driving_license = $driving_license;
                    $license_expiration_date = isset($request->license_expiration_date)?$request->license_expiration_date:'';
                    $driving_license_asset = NurseAsset::create([
                                                'nurse_id' => $request->worker_id,
                                                'using_date' => $license_expiration_date,
                                                'name' => $driving_license,
                                                'filter' => 'driving_license',
                                            ]);

                    if(isset($driving_license_asset)){
                        $update = NurseAsset::where(['id' => $driving_license_asset['id']])->update([
                            'using_date' => $license_expiration_date
                        ]);
                    }
                }
                $worker->license_expiry_date = isset($request->license_expiry_date)?$request->license_expiry_date:$worker->license_expiry_date;
                $worker->compact_license = isset($request->compact_license)?$request->compact_license:$worker->compact_license;
                $worker->license_issue_date = isset($request->license_issue_date)?$request->license_issue_date:$worker->license_issue_date;
                
                $worker->worker_ss_number = isset($request->worker_ss_number)?$request->worker_ss_number:$worker->worker_ss_number;
                $worker->worker_number_of_references = isset($request->worker_number_of_references)?$request->worker_number_of_references:$worker->worker_number_of_references;
                
                // BLS
                if ($request->hasFile('BLS') && $request->file('BLS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'BLS')->forceDelete();

                    $bls_name_full = $request->file('BLS')->getClientOriginalName();
                    $bls_name = pathinfo($bls_name_full, PATHINFO_FILENAME);
                    $bls_ext = $request->file('BLS')->getClientOriginalExtension();
                    if(!empty($worker->BLS)){
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->BLS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->BLS);
                        }
                    }
                    $bls = $bls_name.'_'.time().'.'.$bls_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('BLS')->move(public_path($destinationPath), $bls);

                    // write image name in worker table
                    $worker->BLS = $bls;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $bls,
                        'filter' => 'BLS'
                    ]);
                }
                
                // ACLS
                if ($request->hasFile('ACLS') && $request->file('ACLS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'ACLS')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->ACLS);

                    $acls_name_full = $request->file('ACLS')->getClientOriginalName();
                    $acls_name = pathinfo($acls_name_full, PATHINFO_FILENAME);
                    $acls_ext = $request->file('ACLS')->getClientOriginalExtension();
                    if(!empty($worker->ACLS)){
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->ACLS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->ACLS);
                        }
                    }
                    $acls = $acls_name.'_'.time().'.'.$acls_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('ACLS')->move(public_path($destinationPath), $acls);

                    // write image name in worker table
                    $worker->ACLS = $acls;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $acls,
                        'filter' => 'ACLS'
                    ]);
                }

                // PALS
                if ($request->hasFile('PALS') && $request->file('PALS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'PALS')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->PALS);

                    $pals_name_full = $request->file('PALS')->getClientOriginalName();
                    $pals_name = pathinfo($pals_name_full, PATHINFO_FILENAME);
                    $pals_ext = $request->file('PALS')->getClientOriginalExtension();
                    if(!empty($worker->PALS)){
                        // unlink(public_path('images/nurses/certificate/').$worker->PALS);
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->PALS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->PALS);
                        }
                    }
                    $pals = $pals_name.'_'.time().'.'.$pals_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('PALS')->move(public_path($destinationPath), $pals);

                    // write image name in worker table
                    $worker->PALS = $pals;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $pals,
                        'filter' => 'PALS'
                    ]);
                }

                // OTHER
                if ($request->hasFile('other') && $request->file('other') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'other')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->other);

                    $other_name_full = $request->file('other')->getClientOriginalName();
                    $other_name = pathinfo($other_name_full, PATHINFO_FILENAME);
                    $other_ext = $request->file('other')->getClientOriginalExtension();
                    if(($other_ext != 'pdf')  && (isset($worker->other))){
                        // unlink(public_path('images/nurses/certificate/').$worker->other);
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->other))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->other);
                        }
                    }
                    $other = $other_name.'_'.time().'.'.$other_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('other')->move(public_path($destinationPath), $other);

                    // write image name in worker table
                    $worker->other = $other;
                    $worker->other_certificate_name = isset($request->other_certificate_name)?$request->other_certificate_name:$worker->other_certificate_name;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $other,
                        'filter' => 'Other'
                    ]);
                }
                // $worker->other_certificate_name = isset($request->other_certificate_name)?$request->other_certificate_name:$worker->other_certificate_name;
                $worker->skills_checklists = isset($request->skills_checklists)?$request->skills_checklists:$worker->skills_checklists;
                $worker->distance_from_your_home = isset($request->distance_from_your_home)?$request->distance_from_your_home:$worker->distance_from_your_home;
                $worker->eligible_work_in_us = isset($request->eligible_work_in_us)?$request->eligible_work_in_us:$worker->eligible_work_in_us;
                $worker->worked_at_facility_before = isset($request->worked_at_facility_before)?$request->worked_at_facility_before:$worker->worked_at_facility_before;
                $worker->facilities_you_like_to_work_at = isset($request->facilities_you_like_to_work_at)?$request->facilities_you_like_to_work_at:$worker->facilities_you_like_to_work_at;
                $worker->avg_rating_by_facilities = isset($request->avg_rating_by_facilities)?$request->avg_rating_by_facilities:$worker->avg_rating_by_facilities;
                $worker->worker_avg_rating_by_recruiters = isset($request->worker_avg_rating_by_recruiters)?$request->worker_avg_rating_by_recruiters:$worker->worker_avg_rating_by_recruiters;
                // rto means worker time off
                $worker->worker_avg_rating_by_employers = isset($request->worker_avg_rating_by_employers)?$request->worker_avg_rating_by_employers:$worker->worker_avg_rating_by_employers;
                $worker->clinical_setting_you_prefer = isset($request->clinical_setting_you_prefer)?$request->clinical_setting_you_prefer:$worker->clinical_setting_you_prefer;
                
                $worker->worker_patient_ratio = isset($request->worker_patient_ratio)?$request->worker_patient_ratio:$worker->worker_patient_ratio;
                $worker->worker_emr = isset($request->worker_emr)?$request->worker_emr:$worker->worker_emr;
                $worker->worker_unit = isset($request->worker_unit)?$request->worker_unit:$worker->worker_unit;
                $worker->worker_department = isset($request->worker_department)?$request->worker_department:$worker->worker_department;
                $worker->worker_bed_size = isset($request->worker_bed_size)?$request->worker_bed_size:$worker->worker_bed_size;
                $worker->worker_trauma_level = isset($request->worker_trauma_level)?$request->worker_trauma_level:$worker->worker_trauma_level;
                $worker->worker_scrub_color = isset($request->worker_scrub_color)?$request->worker_scrub_color:$worker->worker_scrub_color;
                $worker->worker_facility_city = isset($request->worker_facility_city)?$request->worker_facility_city:$worker->worker_facility_city;
                $worker->worker_facility_state_code = isset($request->worker_facility_state_code)?$request->worker_facility_state_code:$worker->worker_facility_state_code;
                $worker->worker_interview_dates = isset($request->worker_interview_dates)?$request->worker_interview_dates:$worker->worker_interview_dates;
                $worker->worker_start_date = isset($request->worker_start_date)?$request->worker_start_date:$worker->worker_start_date;
                $worker->worker_as_soon_as_posible = isset($request->worker_as_soon_as_posible)?$request->worker_as_soon_as_posible:$worker->worker_as_soon_as_posible;
                $worker->worker_shift_time_of_day = isset($request->worker_shift_time_of_day)?$request->worker_shift_time_of_day:$worker->worker_shift_time_of_day;
                $worker->worker_hours_per_week = isset($request->worker_hours_per_week)?$request->worker_hours_per_week:$worker->worker_hours_per_week;
                $worker->worker_guaranteed_hours = isset($request->worker_guaranteed_hours)?$request->worker_guaranteed_hours:$worker->worker_guaranteed_hours;
                $worker->worker_hours_shift = isset($request->worker_hours_shift)?$request->worker_hours_shift:$worker->worker_hours_shift;
                $worker->worker_weeks_assignment = isset($request->worker_weeks_assignment)?$request->worker_weeks_assignment:$worker->worker_weeks_assignment;
                $worker->worker_shifts_week = isset($request->worker_shifts_week)?$request->worker_shifts_week:$worker->worker_shifts_week;
                $worker->worker_people_you_have_reffered = isset($request->worker_people_you_have_reffered)?$request->worker_people_you_have_reffered:$worker->worker_people_you_have_reffered;
                $worker->worker_referral_bonus = isset($request->worker_referral_bonus)?$request->worker_referral_bonus:$worker->worker_referral_bonus;
                $worker->worker_sign_on_bonus = isset($request->worker_sign_on_bonus)?$request->worker_sign_on_bonus:$worker->worker_sign_on_bonus;
                $worker->worker_completion_bonus = isset($request->worker_completion_bonus)?$request->worker_completion_bonus:$worker->worker_completion_bonus;
                $worker->worker_extension_bonus = isset($request->worker_extension_bonus)?$request->worker_extension_bonus:$worker->worker_extension_bonus;
                $worker->worker_other_bonus = isset($request->worker_other_bonus)?$request->worker_other_bonus:$worker->worker_other_bonus;
                $worker->how_much_k = isset($request->how_much_k)?$request->how_much_k:$worker->how_much_k;
                $worker->worker_health_insurance = isset($request->worker_health_insurance)?$request->worker_health_insurance:$worker->worker_health_insurance;
                $worker->worker_dental = isset($request->worker_dental)?$request->worker_dental:$worker->worker_dental;
                $worker->worker_vision = isset($request->worker_vision)?$request->worker_vision:$worker->worker_vision;
                $worker->worker_actual_hourly_rate = isset($request->worker_actual_hourly_rate)?$request->worker_actual_hourly_rate:$worker->worker_actual_hourly_rate;
                $worker->worker_feels_like_hour = isset($request->worker_feels_like_hour)?$request->worker_feels_like_hour:$worker->worker_feels_like_hour;
                $worker->worker_overtime = isset($request->worker_overtime)?$request->worker_overtime:$worker->worker_overtime;
                $worker->worker_holiday = isset($request->worker_holiday)?$request->worker_holiday:$worker->worker_holiday;
                $worker->worker_on_call = isset($request->worker_on_call)?$request->worker_on_call:$worker->worker_on_call;
                $worker->worker_call_back = isset($request->worker_call_back)?$request->worker_call_back:$worker->worker_call_back;
                $worker->available_position = isset($request->available_position)?$request->available_position:$worker->available_position;
                $worker->float_requirement = isset($request->float_requirement)?$request->float_requirement:$worker->float_requirement;
                $worker->facility_shift_cancelation_policy = isset($request->facility_shift_cancelation_policy)?$request->facility_shift_cancelation_policy:$worker->facility_shift_cancelation_policy;
                $worker->contract_termination_policy = isset($request->contract_termination_policy)?$request->contract_termination_policy:$worker->contract_termination_policy;
                $worker->worker_facility_parent_system = isset($request->worker_facility_parent_system)?$request->worker_facility_parent_system:$worker->worker_facility_parent_system;
                $worker->worker_urgency = isset($request->worker_urgency)?$request->worker_urgency:$worker->worker_urgency;
                $worker->MSP = isset($request->MSP)?$request->MSP:$worker->MSP;
                $worker->VMS = isset($request->VMS)?$request->VMS:$worker->VMS;
                $worker->submission_VMS = isset($request->submission_VMS)?$request->submission_VMS:$worker->submission_VMS;
                $worker->block_scheduling = isset($request->block_scheduling)?$request->block_scheduling:$worker->block_scheduling;
                $worker->worker_orientation_rate = isset($request->worker_orientation_rate)?$request->worker_orientation_rate:$worker->worker_orientation_rate;
                $worker->worker_weekly_taxable_amount = isset($request->worker_weekly_taxable_amount)?$request->worker_weekly_taxable_amount:$worker->worker_weekly_taxable_amount;
                $worker->worker_weekly_non_taxable_amount = isset($request->worker_weekly_non_taxable_amount)?$request->worker_weekly_non_taxable_amount:$worker->worker_weekly_non_taxable_amount;
                $worker->worker_employer_weekly_amount = isset($request->worker_employer_weekly_amount)?$request->worker_employer_weekly_amount:$worker->worker_employer_weekly_amount;
                $worker->worker_goodwork_weekly_amount = isset($request->worker_goodwork_weekly_amount)?$request->worker_goodwork_weekly_amount:$worker->worker_goodwork_weekly_amount;
                $worker->worker_total_employer_amount = isset($request->worker_total_employer_amount)?$request->worker_total_employer_amount:$worker->worker_total_employer_amount;
                $worker->worker_total_goodwork_amount = isset($request->worker_total_goodwork_amount)?$request->worker_total_goodwork_amount:$worker->worker_total_goodwork_amount;
                $worker->worker_total_contract_amount = isset($request->worker_total_contract_amount)?$request->worker_total_contract_amount:$worker->worker_total_contract_amount;
                $worker->worker_goodwork_number = $worker->id;
                
                $record = $worker->save();

                $user_info = USER::where('id', $worker->user_id);
                if(isset($record)){
                    $this->check = "1";
                    $this->message = "Worker record Updated successfully";
                    $this->return_data = $worker; 
                }else{
                    $this->check = "1";
                    $this->message = "Worker record Not uploaded";    
                }
                
            }else{
                $this->check = "1";
                $this->message = "Worker Not Found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobInformation(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            // 'worker_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $whereCond = [
                    'facilities.active' => true,
                    'jobs.id' => $request->job_id
                ];

            $respond = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'jobs.created_at as posted_on')
                            ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                            ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                            ->where($whereCond);
            $job_data = $respond->groupBy('jobs.id')->first();
            
            if(empty($job_data)){
                $whereCond1 =  [
                    'facilities.active' => true,
                    'jobs.id' => $request->job_id,
                ];
                
                $worker_jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'jobs.created_at as posted_on')
                
                ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                ->where($whereCond1)->groupBy('jobs.id')->first();
                $job_data['workers_applied'] = $worker_jobs['workers_applied'];
                $job_data['worker_contract_termination_policy'] = $worker_jobs['contract_termination_policy'];
                $job_data['job_id'] = $worker_jobs['job_id'];
                $job_data['facility_name'] = $worker_jobs['facility_name'];
                $job_data['facility_city'] = $worker_jobs['facility_city'];
                $job_data['facility_state'] = $worker_jobs['facility_state'];
                // $job_data['posted_on'] = $worker_jobs['posted_on'];
            }
            $job_data['posted_on'] = $job_data['created_at'];
            if(isset($job_data['recruiter_id']) && !empty($job_data['recruiter_id'])){
                $recruiter_info = USER::where('id', $job_data['recruiter_id'])->get()->first();
                $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
            }else{
                $recruiter_name = '';
            }

            $job = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*')->where('id', $request->job_id)->first();
            // Check total job hire
            $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$job['id'].'"');
            if(isset($is_vacancy)){
                $is_vacancy = $is_vacancy[0]->hired_jobs;
            }else{
                $is_vacancy = '0';
            }
            $worker_reference_name = '';
            $worker_reference_title ='';
            $worker_reference_recency_reference ='';
            
            // Jobs speciality with experience 
            $speciality = explode(',',$job['preferred_specialty']);
            $experiences = explode(',',$job['preferred_experience']);
            $exp = [];
            $spe = [];
            $specialities = [];
            $i = 0;
            foreach($speciality as $special){
                $spe[] = $special;
                $i++;
            }
            foreach($experiences as $experience){
                $exp[] = $experience;
            }
            
            for($j=0; $j< $i; $j++){
                $specialities[$j]['spe'] = $spe[$j]; 
                $specialities[$j]['exp'] = $exp[$j]; 
            }

            // Jobs Certificate
            $certificate = explode(',',$job['certificate']); 
            $worker_certificate = [];
            // $skills_checklists = [];
            $vaccinations = explode(',',$job['vaccinations']);
            $worker_vaccination = json_decode($job_data['worker_vaccination']);
            $worker_certificate_name = json_decode($job_data['worker_certificate_name']);
            $worker_certificate = json_decode($job_data['worker_certificate']);
            $skills_checklists = explode(',', $job_data['skills_checklists']);
            $i=0;
            foreach($skills_checklists as $rec)
            {
                if(isset($rec) && !empty($rec)){
                    $i++;
                    $skills_checklists[$i] = url('public/images/nurses/skill/'.$rec);
                }
                
            }
            // $vacc_image = NurseAsset::where(['filter' => 'vaccination', 'nurse_id' => $worker->id])->get();
            // $cert_image = NurseAsset::where(['filter' => 'certificate', 'nurse_id' => $worker->id])->get();
            $vacc_image = '';
            $cert_image = '';
            $certificate = explode(',',$job['certificate']); 
            if(isset($job_data['recruiter_id'])){
                $recruiter_info = User::where('id', $job_data['recruiter_id'])->first();
            }else{
                $recruiter_info = User::where('id', $job['recruiter_id'])->first();
            }

            $result = [];
            $result['job_id'] = isset($job['id'])?$job['id']:"";
            $result['description'] = isset($job['description'])?$job['description']:"";
            $result['posted_on'] = isset($job_data['posted_on'])?$job_data['posted_on']:"";
            $result['type'] = isset($job['type'])?$job['type']:"";
            $result['terms'] = isset($job['terms'])?$job['terms']:"";
            $result['job_name'] = isset($job['job_name'])?$job['job_name']:"";
            $result['total_applied'] = isset($job['workers_applied'])?$job['workers_applied']:"";
            $result['department'] = isset($job['Department'])?$job['Department']:"";
            $result['worker_name'] = isset($worker_name)?$worker_name:"";
            $result['worker_image'] = isset($worker_img)?$worker_img:"";
            $result['recruiter_name'] = $recruiter_name;
            if(isset($job_data['worked_at_facility_before']) && ($job_data['worked_at_facility_before'] == 'yes')){
                $recs = true;
            }else{
                $recs = false;
            }

            if(isset($job_data['license_type']) && ($job_data['license_type'] != null) && ($job_data['profession'] == $job_data['license_type'])){
                $profession = true;
            }else{
                $profession = false;
            }
            if(isset($job_data['specialty']) && ($job_data['specialty'] != null) && ($job_data['preferred_specialty'] == $job_data['specialty'])){
                $speciality = true;
            }else{
                $speciality = false;
            }
            if(isset($job_data['experience']) && ($job_data['experience'] != null) && ($job_data['preferred_experience'] == $job_data['experience'])){
                $experience = true;
            }else{
                $experience = false;
            }
            $countable = explode(',',$worker_reference_name);
            $num = [];
            foreach($countable as $rec){
                if(!empty($rec)){
                    $num[] = $rec;        
                }
            }
            $countable = count($num);
            if($job_data['number_of_references'] == $countable){
                $worker_ref_num = true;
            }else{
                $worker_ref_num = false;
            }

            $worker_info = [];
            // $data =  [];
            $data['job'] = 'College Diploma';
            $data['match'] = !empty($job_data['diploma'])?true:false;
            $data['worker'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
            $data['name'] = 'Diploma';
            $data['update_key'] = 'diploma';
            $data['type'] = 'files';
            $data['worker_title'] = 'Did you really graduate?';
            $data['job_title'] = 'College Diploma Required';
            $data['worker_image'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
            $worker_info[] = $data;
            $data['worker_image'] = '';

            $data['job'] = 'Drivers License';
            $data['match'] = !empty($job_data['driving_license'])?true:false;
            $data['worker'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
            $data['name'] = 'driving_license';
            $data['update_key'] = 'driving_license';
            $data['type'] = 'files';
            $data['worker_title'] = 'Are you really allowed to drive?';
            $data['job_title'] = 'Drivers License';
            $data['worker_image'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
            $worker_info[] = $data;
            $data['worker_image'] = '';

            $data['job'] = !empty($job['job_worked_at_facility_before'])?$job['job_worked_at_facility_before']:"";
            $data['match'] = $recs;
            $data['worker'] = !empty($job_data['worked_at_facility_before'])?$job_data['worked_at_facility_before']:"";
            $data['name'] = 'Working at Facility Before';
            $data['update_key'] = 'worked_at_facility_before';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Are you sure you never worked here as staff?';
            $data['job_title'] = 'Have you worked here in last 18 months?';
            $worker_info[] = $data;

            $data['job'] = "Last 4 digit of SS# to submit";
            $data['match'] = !empty($job_data['worker_ss_number'])?true:false;
            $data['worker'] = !empty($job_data['worker_ss_number'])?$job_data['worker_ss_number']:"";
            $data['name'] = 'SS Card Number';
            $data['update_key'] = 'worker_ss_number';
            $data['type'] = 'input';
            $data['worker_title'] = 'Yes we need your SS# to submit you';
            $data['job_title'] = 'Last 4 digit of SS# to submit';
            $worker_info[] = $data;

            if($job['profession'] == $job_data['highest_nursing_degree']){ $val = true; }else{ $val = false; }
            $data['job'] = isset($job['profession'])?$job['profession']:"";
            $data['match'] = $val;
            $data['worker'] = !empty($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"";
            $data['name'] = 'Profession';
            $data['update_key'] = 'highest_nursing_degree';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What kind of Professional are you?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Profession';
            $worker_info[] = $data;

            $data['job'] = isset($job['preferred_specialty'])?$job['preferred_specialty']:"";
            $data['match'] = $speciality;
            $data['worker'] = !empty($job_data['specialty'])?$job_data['specialty']:"";
            $data['name'] = 'Speciality';
            $data['update_key'] = 'specialty';
            $data['type'] = 'dropdown';
            $data['worker_title'] = "What's your specialty?";
            $data['job_title'] = !empty($data['job'])?$data['job']:'Specialty';
            $worker_info[] = $data;

            $data['job'] = isset($job['preferred_experience'])?$job['preferred_experience']:"";
            $data['match'] = $experience;
            $data['worker'] = !empty($job_data['experience'])?$job_data['experience']:"";
            $data['name'] = 'Experience';
            $data['update_key'] = 'experience';
            $data['type'] = 'input';
            $data['worker_title'] = 'How long have you done this?';
            $data['job_title'] = $data['job'].' Years';
            $worker_info[] = $data;

            if($job_data['nursing_license_state'] == $job['job_location']){ $val = true; }else{ $val = false; }
            $data['job'] = isset($job['job_location'])?$job['job_location']:"";
            $data['match'] = $val;
            $data['worker'] = !empty($job_data['nursing_license_state'])?$job_data['nursing_license_state']:"";
            $data['name'] = 'License State';
            $data['update_key'] = 'nursing_license_state';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'Where are you licensed?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Professional Licensure';
            $worker_info[] = $data;

            $i = 0;
            foreach($vaccinations as $job_vacc)
            {
                $data['job'] = isset($vaccinations[$i])?$vaccinations[$i]:"Vaccinations & Immunizations";
                $data['match'] = !empty($worker_vaccination[$i])?true:false;
                $data['worker'] = isset($worker_vaccination[$i])?$worker_vaccination[$i]:"";
                $data['worker_image'] = isset($vacc_image[$i]['name'])?url('public/images/nurses/vaccination/'.$vacc_image[$i]['name']):"";
                $data['name'] = $data['worker'].' vaccination';
                $data['match_title'] = 'Vaccinations & Immunizations';
                $data['update_key'] = 'worker_vaccination';
                $data['type'] = 'file';
                $data['worker_title'] = 'Did you get the '.$data['worker'].' Vaccines?';
                $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations';
                $worker_info[] = $data;
                $i++;
                // $data['worker_image'] = '';
            }
            $data['worker_image'] = '';

            // $data['job'] = isset($vaccinations[0])?$vaccinations[0]:"Covid";
            // $data['match'] = !empty($worker_vaccination[0])?true:false;
            // $data['worker'] = isset($worker_vaccination[0])?$worker_vaccination[0]:"";
            // $data['name'] = 'Covid vaccination';
            // $data['update_key'] = 'covid';
            // $data['type'] = 'file';
            // $data['worker_title'] = 'Did you get the COVID Vaccines?';
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations name';
            // $worker_info[] = $data;

            // $data['job'] = isset($vaccinations[1])?$vaccinations[1]:"Flu";
            // $data['match'] = !empty($worker_vaccination[1])?true:false;
            // $data['worker'] = isset($worker_vaccination[1])?$worker_vaccination[1]:"";
            // $data['name'] = 'Flu vaccination';
            // $data['update_key'] = 'flu';
            // $data['type'] = 'file';
            // $data['worker_title'] = 'Did you get the Flu Vaccines?';
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations name';
            // $worker_info[] = $data;

            $data['job'] = isset($job['number_of_references'])?$job['number_of_references']:"";
            $data['match'] = $worker_ref_num;
            $data['worker'] = isset($worker_reference_name)?$worker_reference_name:"";
            $data['name'] = 'Reference';
            $data['update_key'] = 'worker_reference_name';
            $data['type'] = 'multiple';
            $data['worker_title'] = 'Who are your References?';
            $data['job_title'] = !empty($data['job'])?$data['job'].' References':'number of references';
            $worker_info[] = $data;

            $data['job'] = isset($job['min_title_of_reference'])?$job['min_title_of_reference']:"";
            $data['match'] = !empty($worker_reference_title)?true:false;
            $data['worker'] = isset($worker_reference_title)?$worker_reference_title:"";
            $data['name'] = 'Reference title';
            $data['update_key'] = 'worker_reference_title';
            $data['type'] = 'multiple';
            $data['worker_title'] = 'What was their title?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'min title of reference';
            $worker_info[] = $data;

            $data['job'] = isset($job['recency_of_reference'])?$job['recency_of_reference']:"";
            $data['match'] = !empty($worker_reference_recency_reference)?true:false;
            $data['worker'] = isset($worker_reference_recency_reference)?$worker_reference_recency_reference:"";
            $data['name'] = 'Recency Reference Assignment';
            $data['update_key'] = 'worker_reference_recency_reference';
            $data['type'] = 'multiple';
            $data['worker_title'] = 'Is this from your last assignment?';
            $data['job_title'] = !empty($data['job'])?$data['job'].' months':'recency of reference';
            $worker_info[] = $data;

            $i = 0;
            foreach($certificate as $job_cert)
            {
                $data['job'] = isset($certificate[$i])?$certificate[$i]:"Certifications";
                $data['match'] = !empty($worker_certificate_name[$i])?true:false;
                $data['worker'] = isset($worker_certificate_name[$i])?$worker_certificate_name[$i]:"";
                if(isset($worker_certificate_name[$i])){
                    $data['worker_image'] = isset($cert_image[$i]['name'])?url('public/images/nurses/certificate/'.$cert_image[$i]['name']):"";
                }
                $data['name'] = $data['worker'];
                $data['match_title'] = 'Certifications';
                $data['update_key'] = 'worker_certificate';
                $data['type'] = 'file';
                $data['worker_title'] = 'No '.$data['worker'];
                $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications';
                $worker_info[] = $data;
                $i++;
            }
            $data['worker_image'] = '';

            // $data['job'] = isset($certificate[0])?$certificate[0]:"";
            // $data['match'] = !empty($job_data['BLS'])?true:false;
            // $data['worker'] = isset($job_data['BLS'])?$job_data['BLS']:"";
            // $data['name'] = 'BLS';
            // $data['update_key'] = 'BLS';
            // $data['type'] = 'file';
            // $data['worker_title'] = "You don't have a BLS?";
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications BLS';
            // $worker_info[] = $data;

            // $data['job'] = isset($certificate[1])?$certificate[1]:"";
            // $data['match'] = !empty($job_data['ACLS'])?true:false;
            // $data['worker'] = isset($job_data['ACLS'])?$job_data['ACLS']:"";
            // $data['name'] = 'ACLS';
            // $data['update_key'] = 'ACLS';
            // $data['type'] = 'file';
            // $data['worker_title'] = "No ACLS?";
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications ACLS';
            // $worker_info[] = $data;

            // $data['job'] = isset($certificate[3])?$certificate[3]:"";
            // $data['match'] = !empty($job_data['PALS'])?true:false;
            // $data['worker'] = isset($job_data['PALS'])?$job_data['PALS']:"";
            // $data['name'] = 'PALS';
            // $data['update_key'] = 'PALS';
            // $data['type'] = 'file';
            // $data['worker_title'] = "No PALS?";
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications PALS';
            // $worker_info[] = $data;

            // $data['job'] = isset($certificate[2])?$certificate[2]:"";
            // $data['match'] = !empty($job_data['other'])?true:false;
            // $data['worker'] = isset($job_data['other'])?$job_data['other']:"";
            // $data['name'] = 'other';
            // $data['update_key'] = 'other';
            // $data['type'] = 'file';
            // $data['worker_title'] = "No CCRN?";
            // $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications other';
            // $worker_info[] = $data;

            $data['job'] = isset($job['skills'])?$job['skills']:"";
            $data['match'] = !empty($job_data['skills_checklists'])?true:false;
            $data['worker'] = isset($job_data['skills_checklists'])?$job_data['skills_checklists']:"";
            if(isset($job_data['skills'])){
                $data['worker_image'] = isset($skills_checklists)?$skills_checklists[0]:"";
            }
            $data['name'] = 'Skills';
            $data['update_key'] = 'skills_checklists';
            $data['type'] = 'file';
            $data['worker_title'] = 'Upload your latest skills checklist';
            $data['job_title'] = $data['job'].' Skills checklist';
            $worker_info[] = $data;

            if($job_data['eligible_work_in_us'] == 'yes'){ $eligible_work_in_us = true; }else{ $eligible_work_in_us = false; }
            $data['job'] = "Eligible work in the us";
            $data['match'] = $eligible_work_in_us;
            $data['worker'] = isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"";
            $data['name'] = 'eligible_work_in_us';
            $data['update_key'] = 'eligible_work_in_us';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Does Congress allow you to work here?';
            $data['job_title'] = 'Eligible to work in the US Required?';
            $worker_info[] = $data;

            $data['job'] = isset($job['urgency'])?$job['urgency']:"";
            if(isset($data['job']) && $data['job'] == '1'){ $data['job'] = 'Auto Offer'; }else{
                $data['job'] = 'Urgency';
            }
            // $data['job_title'] = $data['job'];
            $data['job_title'] = !empty($job['urgency'])?$job['urgency']:"Urgency";
            $data['match'] = !empty($job_data['worker_urgency'])?true:false;
            $data['worker'] = isset($job_data['worker_urgency'])?$job_data['worker_urgency']:"";
            $data['name'] = 'worker_urgency';
            $data['update_key'] = 'worker_urgency';
            $data['type'] = 'input';
            $data['worker_title'] = "How quickly can you be ready to submit?";
            $worker_info[] = $data;

            $data['job'] = isset($job['position_available'])?$job['position_available']:"";
            $data['match'] = !empty($job_data["available_position"])?true:false;
            $data['worker'] = isset($job_data["available_position"])?$job_data["available_position"]:"";
            $data['name'] = 'available_position';
            $data['update_key'] = 'available_position';
            $data['type'] = 'input';
            $data['worker_title'] = 'You have applied to # jobs?';
            $data['job_title'] = !empty($data['job'])?$is_vacancy.' of '.$data['job']:'# of Positions Available';
            $worker_info[] = $data;

            $data['job'] = isset($job['msp'])?$job['msp']:"";
            $data['match'] = !empty($job_data['MSP'])?true:false;
            $data['worker'] = isset($job_data['MSP'])?$job_data['MSP']:"";
            $data['name'] = 'MSP';
            $data['update_key'] = 'MSP';
            $data['worker_title'] = 'Any MSPs you prefer to avoid?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'MSP';
            $data['type'] = 'dropdown';
            $worker_info[] = $data;

            $data['job'] = isset($job['vms'])?$job['vms']:"";
            $data['match'] = !empty($job_data['VMS'])?true:false;
            $data['worker'] = isset($job_data['VMS'])?$job_data['VMS']:"";
            $data['name'] = 'VMS';
            $data['update_key'] = 'VMS';
            $data['type'] = 'dropdown';
            $data['worker_title'] = "Who's your favorite VMS?";
            $data['job_title'] = !empty($data['job'])?$data['job']:'VMS';
            $worker_info[] = $data;

            $data['job'] = isset($job['submission_of_vms'])?$job['submission_of_vms']:"";
            $data['match'] = !empty($job_data['submission_VMS'])?true:false;
            $data['worker'] = isset($job_data['submission_VMS'])?$job_data['submission_VMS']:"";
            $data['name'] = 'submission_VMS';
            $data['update_key'] = 'submission_VMS';
            $data['type'] = 'input';
            $data['worker_title'] = '# of Submissions in VMS';
            $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'# of Submissions in VMS';
            $worker_info[] = $data;

            $data['job'] = isset($job['block_scheduling'])?$job['block_scheduling']:"";
            $data['match'] = !empty($job_data['worker_block_scheduling'])?true:false;
            $data['worker'] = isset($job_data['worker_block_scheduling'])?$job_data['worker_block_scheduling']:"";
            $data['name'] = 'Block_scheduling';
            $data['update_key'] = 'block_scheduling';
            $data['type'] = 'input';
            $data['worker_title'] = 'Do you want block scheduling?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Block Scheduling';
            $worker_info[] = $data;

            if($job_data['worker_float_requirement'] == 'Yes'){ $val = true; }else{ $val = false; }
            $data['job'] = isset($job['float_requirement'])?$job['float_requirement']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_float_requirement'])?$job_data['worker_float_requirement']:"";
            $data['name'] = 'Float Requirement';
            $data['update_key'] = 'float_requirement';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Are you willing float to?';
            $data['job_title'] = !empty($job['float_requirement'])?$job['float_requirement']:'Float requirements';
            $worker_info[] = $data;
            
            $data['job'] = isset($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:"";
            $data['match'] = !empty($job_data['worker_facility_shift_cancelation_policy'])?true:false;
            $data['worker'] = isset($job_data['worker_facility_shift_cancelation_policy'])?$job_data['worker_facility_shift_cancelation_policy']:"";
            $data['name'] = 'Facility Shift Cancelation Policy';
            $data['update_key'] = 'facility_shift_cancelation_policy';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What terms do you prefer?';
            $data['job_title'] = !empty($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:'Facility Shift Cancellation Policy';
            $worker_info[] = $data;

            $data['job'] = isset($job['contract_termination_policy'])?$job['contract_termination_policy']:"";
            $data['match'] = !empty($job_data['worker_contract_termination_policy'])?true:false;
            $data['worker'] = isset($job_data['worker_contract_termination_policy'])?$job_data['worker_contract_termination_policy']:"";
            $data['name'] = 'Contract Terminology';
            $data['update_key'] = 'contract_termination_policy';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What terms do you prefer?';
            $data['job_title'] = !empty($job['contract_termination_policy'])?$job['contract_termination_policy']:'Contract Termination Policy';
            $worker_info[] = $data;

            if(isset($job_data['distance_from_your_home']) && ($job_data['distance_from_your_home'] != 0) ){
                $data['worker'] = $job_data['distance_from_your_home'];
            }else{
                $data['worker'] = "";
            }
            if($job['traveler_distance_from_facility'] == $job_data['distance_from_your_home']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['traveler_distance_from_facility'])?$job['traveler_distance_from_facility']:"";
            $data['match'] = $val;
            // $data['worker'] = isset($job_data['distance_from_your_home'])?$job_data['distance_from_your_home']:"";
            $data['name'] = 'distance from facility';
            $data['update_key'] = 'distance_from_your_home';
            $data['type'] = 'input';
            $data['worker_title'] = 'Where does the IRS think you live?';
            $data['job_title'] = !empty($data['job'])?$data['job'].' miles Distance From Facility':'Traveler Distance From Facility';
            $worker_info[] = $data;

            $data['job'] = isset($job['facility'])?$job['facility']:"";
            $data['match'] = !empty($job_data['facilities_you_like_to_work_at'])?true:false;
            $data['worker'] = isset($job_data['facilities_you_like_to_work_at'])?$job_data['facilities_you_like_to_work_at']:"";
            $data['name'] = 'Facility available upon request';
            $data['update_key'] = 'facilities_you_like_to_work_at';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What facilities have you worked at?';
            $data['job_title'] = !empty($job['facility'])?$job['facility']:'Facility';
            $worker_info[] = $data;

            $data['job'] = isset($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"";
            $data['match'] = !empty($job_data['worker_facility_parent_system'])?true:false;
            $data['worker'] = isset($job_data['worker_facility_parent_system'])?$job_data['worker_facility_parent_system']:"";
            $data['name'] = 'facility parent system';
            $data['update_key'] = 'worker_facility_parent_system';
            $data['type'] = 'input';
            $data['worker_title'] = 'What facilities would you like to work at?';
            $data['job_title'] = !empty($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"Facility's Parent System";
            $worker_info[] = $data;

            if(isset($job_data['avg_rating_by_facilities']) && ($job_data['avg_rating_by_facilities'] != 0) ){
                $data['worker'] = $job_data['avg_rating_by_facilities'];
            }else{
                $data['worker'] = "";
            }
            $data['job'] = isset($job['facility_average_rating'])?$job['facility_average_rating']:"";
            $data['match'] = !empty($job_data['avg_rating_by_facilities'])?true:false;
            // $data['worker'] = isset($job_data['avg_rating_by_facilities'])?$job_data['avg_rating_by_facilities']:"";
            $data['name'] = 'facility average rating';
            $data['update_key'] = 'avg_rating_by_facilities';
            $data['type'] = 'input';
            $data['worker_title'] = 'Your average rating by your facilities';
            $data['job_title'] = !empty($job['facility_average_rating'])?$job['facility_average_rating']:'Facility Average Rating';
            $worker_info[] = $data;

            if(isset($job_data['worker_avg_rating_by_recruiters']) && ($job_data['worker_avg_rating_by_recruiters'] != 0) ){
                $data['worker'] = $job_data['worker_avg_rating_by_recruiters'];
            }else{
                $data['worker'] = "";
            }
            $data['job'] = isset($job['recruiter_average_rating'])?$job['recruiter_average_rating']:"";
            $data['match'] = !empty($job_data['worker_avg_rating_by_recruiters'])?true:false;
            // $data['worker'] = isset($job_data['worker_avg_rating_by_recruiters'])?$job_data['worker_avg_rating_by_recruiters']:"";
            $data['name'] = 'recruiter average rating';
            $data['update_key'] = 'worker_avg_rating_by_recruiters';
            $data['type'] = 'input';
            $data['worker_title'] = 'Your average rating by your recruiters';
            $data['job_title'] = !empty($job['recruiter_average_rating'])?$job['recruiter_average_rating']:'Recruiter Average Rating';
            $worker_info[] = $data;

            if(isset($job_data['worker_avg_rating_by_employers']) && ($job_data['worker_avg_rating_by_employers'] != 0) ){
                $data['worker'] = $job_data['worker_avg_rating_by_employers'];
            }else{
                $data['worker'] = "";
            }
            $data['job'] = isset($job['employer_average_rating'])?$job['employer_average_rating']:"";
            $data['match'] = !empty($job_data['worker_avg_rating_by_employers'])?true:false;
            // $data['worker'] = isset($job_data['worker_avg_rating_by_employers'])?$job_data['worker_avg_rating_by_employers']:"";
            $data['name'] = 'employer average rating';
            $data['update_key'] = 'worker_avg_rating_by_employers';
            $data['type'] = 'input';
            $data['worker_title'] = 'Your average rating by your employers';
            $data['job_title'] = !empty($job['employer_average_rating'])?$job['employer_average_rating']:'Employer Average Rating';
            $worker_info[] = $data;

            if($job['clinical_setting'] == $job_data['clinical_setting_you_prefer']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['clinical_setting'])?$job['clinical_setting']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['clinical_setting_you_prefer'])?$job_data['clinical_setting_you_prefer']:"";
            $data['name'] = 'Clinical Setting';
            $data['update_key'] = 'clinical_setting_you_prefer';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What setting do you prefer?';
            $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:' Clinical Setting';
            $worker_info[] = $data;
            
            $data['job'] = isset($job['Patient_ratio'])?$job['Patient_ratio']:"";
            $data['match'] = !empty($job_data['worker_patient_ratio'])?true:false;
            $data['worker'] = isset($job_data['worker_patient_ratio'])?$job_data['worker_patient_ratio']:"";
            $data['name'] = 'patient ratio';
            $data['update_key'] = 'worker_patient_ratio';
            $data['type'] = 'input';
            $data['worker_title'] = 'How many patients can you handle?';
            $data['job_title'] = !empty($job['Patient_ratio'])?$job['Patient_ratio']:'Patient ratio';
            $worker_info[] = $data;

            $data['job'] = isset($job['emr'])?$job['emr']:"";
            $data['match'] = !empty($job_data['worker_emr'])?true:false;
            $data['worker'] = isset($job_data['worker_emr'])?$job_data['worker_emr']:"";
            $data['name'] = 'EMR';
            $data['update_key'] = 'worker_emr';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'What EMRs have you used?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'EMR';
            $worker_info[] = $data;

            $data['job'] = isset($job['Unit'])?$job['Unit']:"";
            $data['match'] = !empty($job_data['worker_unit'])?true:false;
            $data['worker'] = isset($job_data['worker_unit'])?$job_data['worker_unit']:"";
            $data['name'] = 'Unit';
            $data['update_key'] = 'worker_unit';
            $data['type'] = 'input';
            $data['worker_title'] = 'Fav Unit?';
            $data['job_title'] = !empty($job['Unit'])?$job['Unit']:'Unit';
            $worker_info[] = $data;

            $data['job'] = isset($job['Department'])?$job['Department']:"";
            $data['match'] = !empty($job_data['worker_department'])?true:false;
            $data['worker'] = isset($job_data['worker_department'])?$job_data['worker_department']:"";
            $data['name'] = 'Department';
            $data['update_key'] = 'worker_department';
            $data['type'] = 'input';
            $data['worker_title'] = 'Fav department?';
            $data['job_title'] = !empty($job['Department'])?$job['Department']:'Department';
            $worker_info[] = $data;

            $data['job'] = isset($job['Bed_Size'])?$job['Bed_Size']:"";
            $data['match'] = !empty($job_data['worker_bed_size'])?true:false;
            $data['worker'] = isset($job_data['worker_bed_size'])?$job_data['worker_bed_size']:"";
            $data['name'] = 'Bed Size';
            $data['update_key'] = 'worker_bed_size';
            $data['type'] = 'input';
            $data['worker_title'] = 'king or california king ?';
            $data['job_title'] = !empty($job['Bed_Size'])?$job['Bed_Size']:'Bed Size';
            $worker_info[] = $data;

            $data['job'] = isset($job['Trauma_Level'])?$job['Trauma_Level']:"";
            $data['match'] = !empty($job_data['worker_trauma_level'])?true:false;
            $data['worker'] = isset($job_data['worker_trauma_level'])?$job_data['worker_trauma_level']:"";
            $data['name'] = 'Trauma Level';
            $data['update_key'] = 'worker_trauma_level';
            $data['type'] = 'input';
            $data['worker_title'] = 'Ideal trauma level?';
            $data['job_title'] = !empty($job['Trauma_Level'])?$job['Trauma_Level']:'Trauma Level';
            $worker_info[] = $data;

            if($job['scrub_color'] == $job_data['worker_scrub_color']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['scrub_color'])?$job['scrub_color']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_scrub_color'])?$job_data['worker_scrub_color']:"";
            $data['name'] = 'Scrub color';
            $data['update_key'] = 'worker_scrub_color';
            $data['type'] = 'input';
            $data['worker_title'] = 'Fav Scrub Brand?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Scrub Color';
            $worker_info[] = $data;

            if($job['job_state'] == $job_data['worker_facility_state_code']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['job_state'])?$job['job_state']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_facility_state_code'])?$job_data['worker_facility_state_code']:"";
            $data['name'] = 'Facility state';
            $data['update_key'] = 'worker_facility_state_code';
            $data['type'] = 'dropdown';
            $data['worker_title'] = "States you'd like to work?";
            $data['job_title'] = !empty($data['job'])?$data['job']:'Facility State Code';
            $worker_info[] = $data;

            if($job['job_city'] == $job_data['worker_facility_city']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['job_city'])?$job['job_city']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_facility_city'])?$job_data['worker_facility_city']:"";
            $data['name'] = 'Facility City';
            $data['update_key'] = 'worker_facility_city';
            $data['type'] = 'dropdown';
            $data['worker_title'] = "cities you'd like to work?";
            $data['job_title'] = !empty($data['job'])?$data['job']:'Facility City';
            $worker_info[] = $data;

            $data['job'] = "InterviewDates";
            $data['match'] = !empty($job_data['worker_interview_dates'])?true:false;
            $data['worker'] = isset($job_data['worker_interview_dates'])?$job_data['worker_interview_dates']:"";
            $data['name'] = 'Interview dates';
            $data['update_key'] = 'worker_interview_dates';
            $data['type'] = 'Interview dates';
            $data['worker_title'] = "Any days you're not available?";
            $data['job_title'] = 'InterviewDates';
            $worker_info[] = $data;

            if(isset($job['as_soon_as']) && ($job['as_soon_as'] == '1')){
                $data['job'] = "As Soon As";
            }else{
                $data['job'] = isset($job['start_date'])?$job['start_date']:"";
            }
            if(isset($job_data['worker_as_soon_as_posible']) && ($job_data['worker_as_soon_as_posible'] == '1')){
                $data['worker'] = "As Soon As";
            }else{
                $data['worker'] = isset($job_data['worker_start_date'])?$job_data['worker_start_date']:"";
            }
            if($data['worker'] == $data['job']){ $data['match'] = true;}else{ $data['match'] = false; }
            $data['name'] = 'As Soon As';
            $data['update_key'] = 'worker_as_soon_as_posible';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'When can you start?';
            $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'Start Date';
            $worker_info[] = $data;

            if($job['rto'] == $job_data['worker_rto']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['rto'])?$job['rto']:"";
            $data['match'] = $val;
            $data['worker'] = "";
            $data['name'] = 'RTO';
            $data['update_key'] = 'clinical_setting_you_prefer';
            $data['type'] = 'input';
            $data['worker_title'] = !empty($data['worker'])?$data['worker']:'Any time off?';
            $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'RTO';
            $worker_info[] = $data;

            if($job['preferred_shift'] == $job_data['worker_shift_time_of_day']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['preferred_shift'])?$job['preferred_shift']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"";
            $data['name'] = 'Shift';
            $data['update_key'] = 'worker_shift_time_of_day';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'Fav Shift?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Shift Time of Day';
            $worker_info[] = $data;


            if($job['hours_per_week'] == $job_data['worker_hours_per_week']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['hours_per_week'])?$job['hours_per_week']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_hours_per_week'])?$job_data['worker_hours_per_week']:"";
            $data['name'] = 'Hours/week';
            $data['update_key'] = 'worker_hours_per_week';
            $data['type'] = 'input';
            $data['worker_title'] = 'Ideal Hours per week?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Week';
            $worker_info[] = $data;

            if($job['guaranteed_hours'] == $job_data['worker_guaranteed_hours']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['guaranteed_hours'])?$job['guaranteed_hours']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_guaranteed_hours'])?$job_data['worker_guaranteed_hours']:"";
            $data['name'] = 'Guaranteed Hours';
            $data['update_key'] = 'worker_guaranteed_hours';
            $data['type'] = 'input';
            $data['worker_title'] = 'Open to jobs with no guaranteed hours?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Guaranteed Hours';
            $worker_info[] = $data;

            if($job['hours_shift'] == $job_data['worker_hours_shift']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['hours_shift'])?$job['hours_shift']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_hours_shift'])?$job_data['worker_hours_shift']:"";
            $data['name'] = 'Shift Hours';
            $data['update_key'] = 'worker_hours_shift';
            $data['type'] = 'input';
            $data['worker_title'] = 'Prefered hours per shift?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Shift';
            $worker_info[] = $data;

            if($job['preferred_assignment_duration'] == $job_data['worker_weeks_assignment']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['preferred_assignment_duration'])?$job['preferred_assignment_duration']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_weeks_assignment'])?$job_data['worker_weeks_assignment']:"";
            $data['name'] = 'Assignment in weeks';
            $data['update_key'] = 'worker_weeks_assignment';
            $data['type'] = 'input';
            $data['worker_title'] = 'How many weeks?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Weeks/Assignment';
            $worker_info[] = $data;

            if($job['weeks_shift'] == $job_data['worker_shifts_week']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['weeks_shift'])?$job['weeks_shift']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_shifts_week'])?$job_data['worker_shifts_week']:"";
            $data['name'] = 'Shift Week';
            $data['update_key'] = 'worker_shifts_week';
            $data['type'] = 'input';
            $data['worker_title'] = 'ideal shifts per week?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Shifts/Week';
            $worker_info[] = $data;

            if($job['referral_bonus'] == $job_data['worker_referral_bonus']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['referral_bonus'])?$job['referral_bonus']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_referral_bonus'])?$job_data['worker_referral_bonus']:"";
            $data['name'] = 'Refferel Bonus';
            $data['update_key'] = 'worker_referral_bonus';
            $data['type'] = 'input';
            $data['worker_title'] = '# of people you have referred';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Referral Bonus';
            $worker_info[] = $data;

            if(($job['sign_on_bonus'] == $job_data['worker_sign_on_bonus']) && (!empty($job_data['worker_sign_on_bonus']))){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['sign_on_bonus'])?$job['sign_on_bonus']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_sign_on_bonus'])?$job_data['worker_sign_on_bonus']:"";
            $data['name'] = 'Sign On Bonus';
            $data['update_key'] = 'worker_sign_on_bonus';
            $data['type'] = 'input';
            $data['worker_title'] = 'What kind of bonus do you expect?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Sign-On Bonus';
            $worker_info[] = $data;

            if($job['completion_bonus'] == $job_data['worker_completion_bonus']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['completion_bonus'])?$job['completion_bonus']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_completion_bonus'])?$job_data['worker_completion_bonus']:"";
            $data['name'] = 'Completion Bonus';
            $data['update_key'] = 'worker_completion_bonus';
            $data['type'] = 'input';
            $data['worker_title'] = 'What kind of bonus do you deserve?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Completion Bonus';
            $worker_info[] = $data;

            if($job['extension_bonus'] == $job_data['worker_extension_bonus']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['extension_bonus'])?$job['extension_bonus']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_extension_bonus'])?$job_data['worker_extension_bonus']:"";
            $data['name'] = 'extension bonus';
            $data['update_key'] = 'worker_extension_bonus';
            $data['type'] = 'input';
            $data['worker_title'] = 'What are you comparing this too?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Extension Bonus';
            $worker_info[] = $data;

            $data['job'] = isset($job['other_bonus'])?$job['other_bonus']:"";
            $data['match'] = !empty($job_data['worker_other_bonus'])?true:false;
            $data['worker'] = isset($job_data['worker_other_bonus'])?$job_data['worker_other_bonus']:"";
            $data['name'] = 'Other Bonus';
            $data['update_key'] = 'worker_other_bonus';
            $data['type'] = 'input';
            $data['worker_title'] = 'Other bonuses you want?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Other Bonus';
            $worker_info[] = $data;

            $data['job'] = isset($job['four_zero_one_k'])?$job['four_zero_one_k']:"";
            $data['match'] = !empty($job_data['how_much_k'])?true:false;
            $data['worker'] = isset($job_data['how_much_k'])?$job_data['how_much_k']:"";
            $data['name'] = '401k';
            $data['update_key'] = 'how_much_k';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'How much do you want this?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'401K';
            $worker_info[] = $data;

            $data['job'] = isset($job['health_insaurance'])?$job['health_insaurance']:"";
            $data['match'] = !empty($job_data['worker_health_insurance'])?true:false;
            $data['worker'] = isset($job_data['worker_health_insurance'])?$job_data['worker_health_insurance']:"";
            $data['name'] = 'Health Insaurance';
            $data['update_key'] = 'worker_health_insurance';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'How much do you want this?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Health Insurance';
            $worker_info[] = $data;

            $data['job'] = isset($job['dental'])?$job['dental']:"";
            $data['match'] = !empty($job_data['worker_dental'])?true:false;
            $data['worker'] = isset($job_data['worker_dental'])?$job_data['worker_dental']:"";
            $data['name'] = 'Dental';
            $data['update_key'] = 'worker_dental';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'How much do you want this?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Dental';
            $worker_info[] = $data;

            $data['job'] = isset($job['vision'])?$job['vision']:"";
            $data['match'] = !empty($job_data['worker_vision'])?true:false;
            $data['worker'] = isset($job_data['worker_vision'])?$job_data['worker_vision']:"";
            $data['name'] = 'Vision';
            $data['update_key'] = 'worker_vision';
            $data['type'] = 'dropdown';
            $data['worker_title'] = 'How much do you want this?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Vision';
            $worker_info[] = $data;

            if($job['actual_hourly_rate'] == $job_data['worker_actual_hourly_rate']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['actual_hourly_rate'])?$job['actual_hourly_rate']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_actual_hourly_rate'])?$job_data['worker_actual_hourly_rate']:"";
            $data['name'] = 'Actually Rate';
            $data['update_key'] = 'worker_actual_hourly_rate';
            $data['type'] = 'input';
            $data['worker_title'] = 'What range is fair?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Actual Hourly rate';
            $worker_info[] = $data;

            if($job['feels_like_per_hour'] == $job_data['worker_feels_like_hour']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['feels_like_per_hour'])?$job['feels_like_per_hour']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_feels_like_hour'])?$job_data['worker_feels_like_hour']:"";
            $data['name'] = 'feels/$hr';
            $data['update_key'] = 'worker_feels_like_hour';
            $data['type'] = 'input';
            $data['worker_title'] = 'Does this seem fair based on the market?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Feels Like $/hr';
            $worker_info[] = $data;

            $data['job'] = isset($job['overtime'])?$job['overtime']:"";
            $data['match'] = !empty($job_data['worker_overtime'])?true:false;
            $data['worker'] = isset($job_data['worker_overtime'])?$job_data['worker_overtime']:"";
            $data['name'] = 'Overtime';
            $data['update_key'] = 'worker_overtime';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Would you work more overtime for a higher OT rate?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Overtime';
            $worker_info[] = $data;

            $data['job'] = isset($job['holiday'])?$job['holiday']:"";
            $data['match'] = !empty($job_data['worker_holiday'])?true:false;
            $data['worker'] = isset($job_data['worker_holiday'])?$job_data['worker_holiday']:"";
            $data['name'] = 'Holiday';
            $data['update_key'] = 'worker_holiday';
            $data['type'] = 'date';
            $data['worker_title'] = 'Any Holiday to refuse your work?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Holiday';
            $worker_info[] = $data;

            $data['job'] = isset($job['on_call'])?$job['on_call']:"";
            $data['match'] = !empty($job_data['worker_holiday'])?true:false;
            $data['worker'] = isset($job_data['worker_on_call'])?$job_data['worker_on_call']:"";
            $data['name'] = 'On call';
            $data['update_key'] = 'worker_on_call';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Will you do call?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'On Call';
            $worker_info[] = $data;

            $data['job'] = isset($job['call_back'])?$job['call_back']:"";
            $data['match'] = !empty($job_data['worker_call_back'])?true:false;
            $data['worker'] = isset($job_data['worker_call_back'])?$job_data['worker_call_back']:"";
            $data['name'] = 'Call Back';
            $data['update_key'] = 'worker_call_back';
            $data['type'] = 'checkbox';
            $data['worker_title'] = 'Is this rate reasonable?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Call Back';
            $worker_info[] = $data;

            $data['job'] = isset($job['orientation_rate'])?$job['orientation_rate']:"";
            $data['match'] = !empty($job_data['worker_orientation_rate'])?true:false;
            $data['worker'] = isset($job_data['worker_orientation_rate'])?$job_data['worker_orientation_rate']:"";
            $data['name'] = 'Orientation Rate';
            $data['update_key'] = 'worker_orientation_rate';
            $data['type'] = 'input';
            $data['worker_title'] = 'Is this rate reasonable?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Orientation Rate';
            $worker_info[] = $data;

            if($job['weekly_taxable_amount'] == $job_data['worker_weekly_taxable_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['weekly_taxable_amount'])?$job['weekly_taxable_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_weekly_taxable_amount'])?$job_data['worker_weekly_taxable_amount']:"";
            $data['name'] = 'Weekly Taxable amount';
            $data['update_key'] = 'worker_weekly_taxable_amount';
            $data['type'] = 'input';
            $data['worker_title'] = '';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly Taxable Amount';
            $worker_info[] = $data;

            if($job['weekly_non_taxable_amount'] == $job_data['worker_weekly_non_taxable_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['weekly_non_taxable_amount'])?$job['weekly_non_taxable_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_weekly_non_taxable_amount'])?$job_data['worker_weekly_non_taxable_amount']:"";
            $data['name'] = 'Weekly Non Taxable Amount';
            $data['update_key'] = 'worker_weekly_non_taxable_amount';
            $data['type'] = 'input';
            $data['worker_title'] = 'Are you going to duplicate expenses?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly non-taxable amount';
            $worker_info[] = $data;

            if($job['employer_weekly_amount'] == $job_data['worker_employer_weekly_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['employer_weekly_amount'])?$job['employer_weekly_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_employer_weekly_amount'])?$job_data['worker_employer_weekly_amount']:"";
            $data['name'] = 'Employer Weekly Amount';
            $data['update_key'] = 'worker_employer_weekly_amount';
            $data['type'] = 'input';
            $data['worker_title'] = 'What range is reasonable?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Employer Weekly Amount';
            $worker_info[] = $data;

            if($job['goodwork_weekly_amount'] == $job_data['worker_goodwork_weekly_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['goodwork_weekly_amount'])?$job['goodwork_weekly_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_goodwork_weekly_amount'])?$job_data['worker_goodwork_weekly_amount']:"";
            $data['name'] = 'Goodwork Weekly Amount';
            $data['update_key'] = 'worker_goodwork_weekly_amount';
            $data['type'] = 'input';
            $data['worker_title'] = 'You only have (count down time) left before your rate drops from 5% to 2%';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Goodwork Weekly Amount';
            $worker_info[] = $data;

            if($job['total_employer_amount'] == $job_data['worker_total_employer_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['total_employer_amount'])?$job['total_employer_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_total_employer_amount'])?$job_data['worker_total_employer_amount']:"";
            $data['name'] = 'Total Employer Amount';
            $data['update_key'] = 'worker_total_employer_amount';
            $data['type'] = 'input';
            $data['worker_title'] = '';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Total Employer Amount';
            $worker_info[] = $data;

            if($job['total_goodwork_amount'] == $job_data['worker_total_goodwork_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['total_goodwork_amount'])?$job['total_goodwork_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_total_goodwork_amount'])?$job_data['worker_total_goodwork_amount']:"";
            $data['name'] = 'Total Goodwork Amount';
            $data['update_key'] = 'worker_total_goodwork_amount';
            $data['type'] = 'input';
            $data['worker_title'] = 'How would you spend those extra funds?';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Total Goodwork Amount';
            $worker_info[] = $data;

            if($job['total_contract_amount'] == $job_data['worker_total_contract_amount']){ $val = true; }else{$val = false;}
            $data['job'] = isset($job['total_contract_amount'])?$job['total_contract_amount']:"";
            $data['match'] = $val;
            $data['worker'] = isset($job_data['worker_total_contract_amount'])?$job_data['worker_total_contract_amount']:"";
            $data['name'] = 'Total Contract Amount';
            $data['update_key'] = 'worker_total_contract_amount';
            $data['type'] = 'input';
            $data['worker_title'] = '';
            $data['job_title'] = !empty($data['job'])?$data['job']:'Total Contract Amount';
            $worker_info[] = $data;

            $data['job'] = "Goodwork Number";
            $data['match'] = !empty($job_data['worker_goodwork_number'])?true:false;
            $data['worker'] = isset($job_data['worker_goodwork_number'])?$job_data['worker_goodwork_number']:"";
            $data['name'] = 'goodwork number';
            $data['update_key'] = 'worker_goodwork_number';
            $data['type'] = 'input';
            $data['worker_title'] = '';
            $data['job_title'] = 'Goodwork Number';
            $worker_info[] = $data;

            $result['worker_info'] = $worker_info;
            

            
            $this->check = "1";
            $this->message = "Matching details listed successfully";
            // $this->return_data = $data;
            $this->return_data = $result;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getfacilities(Request $request) 
    {
        $facilities = Facility::where('active','=', true)->select('id','name')->get();

        $this->check = "1";
        $this->message = "Employer has been listed successfully";
        $this->return_data = $facilities;

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }
    
    public function exploreScreen(Request $request)
    {

        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $user_info = USER::where('id', $request->user_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();
                       
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $request->user_id,
                    'jobs.is_closed' => "0"
                ];

                $respond = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'offers.nurse_id as worker_id', 'users.first_name', 'users.last_name', 'users.image', 'facilities.name as facility_name', 'jobs.*', 'jobs.created_at as posted_on')
                                ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                                ->join('users','users.id', '=', 'jobs.recruiter_id')
                                ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                ->where($whereCond);
                $job_data = $respond->groupBy('jobs.id')->get();
                 
                foreach($job_data as $job){
                    $job->job_location = isset($job->job_location) ? $job->job_location : "";
                    $job->facility_name = isset($job->facility_name) ? $job->facility_name : "";
                    $job->job_name = isset($job->job_name) ? $job->job_name : "";
                    $job->preferred_specialty = isset($job->preferred_specialty) ? $job->preferred_specialty : "";
                    $job->preferred_shift = isset($job->preferred_shift) ? $job->preferred_shift : "";
                    $job->profession = isset($job->profession) ? $job->profession : "";
                    $job->hours_per_week = isset($job->hours_per_week) ? $job->hours_per_week : "";
                    $job->job_type = isset($job->job_type) ? $job->job_type : "";
                    $job->type = isset($job->type) ? $job->type : "";
                    $job->preferred_assignment_duration = isset($job->preferred_assignment_duration) ? $job->preferred_assignment_duration : "";
                    if(isset($job->posted_on)){
                        $job->posted_on = 'Posted on '.date('M j Y', strtotime($job->posted_on));
                    }else{
                        $job->posted_on = '';
                    }
                    $job->image = (isset($job->image) && $job->image != "") ? url("public/images/nurses/profile/" . $job->image) : "";

                    $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/8810d9fb-c8f4-458c-85ef-d3674e2c540a');
                    if ($job->image) {
                        $t = \Illuminate\Support\Facades\Storage::exists('assets/nurses/profile/' . $job->image);
                        if ($t) {
                            $profileNurse = \Illuminate\Support\Facades\Storage::get('assets/nurses/profile/' . $job->image);
                        }
                    }

                }

                $this->check = "1";
                $this->message = "Explore screen listed successfully";
                $this->return_data = $job_data;

            }else{
                $this->check = "1";
                $this->message = "User Not Found";
            }

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);



    }

    public function recruiterInformation(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_job = Job::where('id', $request->job_id)->first();
            if(isset($check_job) && $check_job['is_hidden'] != 1){
                $worker_info  = Nurse::where('id', $request->worker_id);
                if ($worker_info->count() > 0) {
                    $worker = $worker_info->get()->first();
                    $user_info = USER::where('id', $worker->user_id);
                    if($user_info->count() > 0){
                        $user = $user_info->get()->first();
                        $worker_name = $user->first_name.' '.$user->last_name;
                        $worker_id = $worker->id;
                        $worker_img = $user->image;
                        $whereCond = [
                                'facilities.active' => true,
                                'users.id' => $worker->user_id,
                                'nurses.id' => $worker->id,
                                'jobs.id' => $request->job_id,
                            ];
    
                        $respond = Nurse::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'nurses.block_scheduling as worker_block_scheduling', 'nurses.float_requirement as worker_float_requirement', 'nurses.facility_shift_cancelation_policy as worker_facility_shift_cancelation_policy', 'nurses.contract_termination_policy as worker_contract_termination_policy', 'offers.id as offer_id', 'offers.start_date as posted_on', 'offers.status as job_status', 'jobs.created_at as created_at')
                                        ->join('users','users.id', '=', 'nurses.user_id')
                                        ->leftJoin('offers','offers.nurse_id', '=', 'nurses.id')
                                        ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                                        ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                        ->where($whereCond);
                        $job_data = $respond->groupBy('jobs.id')->first();
                        $job_data = $worker;
                        $job_data['worker_block_scheduling'] = $job_data['block_scheduling'];
                        $job_data['worker_float_requirement'] = $job_data['float_requirement'];
                        $job_data['worker_facility_shift_cancelation_policy'] = $job_data['facility_shift_cancelation_policy'];
                        $job_data['worker_contract_termination_policy'] = $job_data['contract_termination_policy'];
                        
                        if(empty($job_data)){
                            $whereCond1 =  [
                                'facilities.active' => true,
                                'jobs.id' => $request->job_id,
                            ];
                            
                            $worker_jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'offers.start_date as posted_on', 'jobs.created_at as created_at')
                            
                            ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                            ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                            ->where($whereCond1)->groupBy('jobs.id')->first();
                            $job_data['workers_applied'] = $worker_jobs['workers_applied'];
                            $job_data['worker_contract_termination_policy'] = $worker_jobs['contract_termination_policy'];
                            $job_data['job_id'] = $worker_jobs['job_id'];
                            $job_data['facility_name'] = $worker_jobs['facility_name'];
                            $job_data['facility_city'] = $worker_jobs['facility_city'];
                            $job_data['facility_state'] = $worker_jobs['facility_state'];
                            // $job_data['posted_on'] = $worker_jobs['posted_on'];
                            $job_data['created_at'] = $worker_jobs['created_at'];
                        }
                        $job_data['posted_on'] = $job_data['created_at'];
                        if(isset($job_data['recruiter_id']) && !empty($job_data['recruiter_id'])){
                            $recruiter_info = USER::where('id', $job_data['recruiter_id'])->get()->first();
                            $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
                            $recruiter_id = $job_data['recruiter_id'];
                        }else{
                            $recruiter_name = '';
                            $recruiter_id = '';
                        }
                        $worker_reference = NURSE::select('nurse_references.name','nurse_references.min_title_of_reference','nurse_references.recency_of_reference')
                        ->leftJoin('nurse_references','nurse_references.nurse_id', '=', 'nurses.id')
                        ->where('nurses.id', $worker->id)->get();
                        
                        $job = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*')->where('id', $request->job_id)->first();
                        $worker_reference_name = '';
                        $worker_reference_title ='';
                        $worker_reference_recency_reference ='';
                        foreach($worker_reference as $val){
                            if(!empty($val['name'])){
                                $worker_reference_name = $val['name'].','.$worker_reference_name;
                            }
                            if(!empty($val['min_title_of_reference'])){
                                $worker_reference_title = $val['min_title_of_reference'].','.$worker_reference_title;
                            }
                            if(!empty($val['recency_of_reference'])){
                                $worker_reference_recency_reference = $val['recency_of_reference'].','.$worker_reference_recency_reference;
                            }
                        }

                        // Check total job hire
                        $is_vacancy = DB::select("SELECT COUNT(id) as hired_jobs, job_id FROM `offers` WHERE status = 'Onboarding' AND job_id = ".'"'.$job['id'].'"');
                        if(isset($is_vacancy)){
                            $is_vacancy = $is_vacancy[0]->hired_jobs;
                        }else{
                            $is_vacancy = '0';
                        }
                        
                        // Jobs speciality with experience 
                        $speciality = explode(',',$job['preferred_specialty']);
                        $experiences = explode(',',$job['preferred_experience']);
                        $exp = [];
                        $spe = [];
                        $specialities = [];
                        $i = 0;
                        foreach($speciality as $special){
                            $spe[] = $special;
                            $i++;
                        }
                        foreach($experiences as $experience){
                            $exp[] = $experience;
                        }
                       
                        for($j=0; $j< $i; $j++){
                            $specialities[$j]['spe'] = $spe[$j]; 
                            $specialities[$j]['exp'] = $exp[$j]; 
                        }
    
                        // Worker speciality
                        $worker_speciality = explode(',',$worker->specialty);
                        $worker_experiences = explode(',',$worker->experience);
                        $worker_exp = [];
                        $worker_spe = [];
                        $worker_specialities = [];
                        $i = 0;
                        foreach($speciality as $special){
                            $worker_spe[] = $special;
                            $i++;
                        }
                        foreach($experiences as $experience){
                            $worker_exp[] = $experience;
                        }
                       
                        for($j=0; $j< $i; $j++){
                            $worker_specialities[$j]['spe'] = $worker_spe[$j]; 
                            $worker_specialities[$j]['exp'] = $worker_exp[$j]; 
                        }
    
                        $worker_certificate = [];
                        // $skills_checklists = [];
                        $vaccinations = explode(',',$job['vaccinations']);
                        $worker_vaccination = json_decode($job_data['worker_vaccination']);
                        $worker_certificate_name = json_decode($job_data['worker_certificate_name']);
                        $worker_certificate = json_decode($job_data['worker_certificate']);
                        $skills_checklists = explode(',', $job_data['skills_checklists']);
                        $i=0;
                        foreach($skills_checklists as $rec)
                        {
                            if(isset($rec) && !empty($rec)){
                                $skills_checklists[$i] = url('public/images/nurses/skill/'.$rec);
                                $i++;
                            }
                            
                        }
                        $vacc_image = NurseAsset::where(['filter' => 'vaccination', 'nurse_id' => $worker->id])->get();
                        $cert_image = NurseAsset::where(['filter' => 'certificate', 'nurse_id' => $worker->id])->get();
                        $certificate = explode(',',$job['certificate']); 
    
                        $result = [];
                        $result['job_id'] = isset($job['id'])?$job['id']:"";
                        $result['description'] = isset($job['description'])?$job['description']:"";
                        $result['posted_on'] = isset($job_data['posted_on'])?date('M j Y', strtotime($job_data['posted_on'])):"";
                        $result['type'] = isset($job['type'])?$job['type']:"";
                        $result['terms'] = isset($job['terms'])?$job['terms']:"";
                        $result['job_name'] = isset($job['job_name'])?$job['job_name']:"";
                        $result['job_status'] = isset($job_data['job_status'])?$job_data['job_status']:"";
                        $result['offer_id'] = isset($job_data['offer_id'])?$job_data['offer_id']:"";
                        $result['total_applied'] = isset($job['workers_applied'])?$job['workers_applied']:"";
                        $result['department'] = isset($job['Department'])?$job['Department']:"";
                        $result['worker_name'] = isset($worker_name)?$worker_name:"";
                        $result['worker_image'] = isset($worker_img)?$worker_img:"";
                        $result['worker_id'] = isset($worker_id)?$worker_id:"";
                        $result['recruiter_name'] = $recruiter_name;
                        $result['recruiter_id'] = $recruiter_id;
                        if(isset($job_data['worked_at_facility_before']) && ($job_data['worked_at_facility_before'] == 'yes')){
                            $recs = true;
                        }else{
                            $recs = false;
                        }
    
                        if(isset($job_data['license_type']) && ($job_data['license_type'] != null) && ($job_data['profession'] == $job_data['license_type'])){
                            $profession = true;
                        }else{
                            $profession = false;
                        }
                        if(isset($job_data['specialty']) && ($job_data['specialty'] != null) && ($job_data['preferred_specialty'] == $job_data['specialty'])){
                            $speciality = true;
                        }else{
                            $speciality = false;
                        }
                        if(isset($job_data['experience']) && ($job_data['experience'] != null) && ($job_data['preferred_experience'] == $job_data['experience'])){
                            $experience = true;
                        }else{
                            $experience = false;
                        }
                        $countable = explode(',',$worker_reference_name);
                        $num = [];
                        foreach($countable as $rec){
                            if(!empty($rec)){
                                $num[] = $rec;        
                            }
                        }
                        $countable = count($num);
                        if($job_data['number_of_references'] == $countable){
                            $worker_ref_num = true;
                        }else{
                            $worker_ref_num = false;
                        }
    
                        $worker_info = [];
                        // $data =  [];
                        $data['job'] = 'College Diploma Required';
                        $data['match'] = !empty($job_data['diploma'])?true:false;
                        $data['worker'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                        $data['name'] = 'Diploma';
                        $data['match_title'] = 'Diploma';
                        $data['update_key'] = 'diploma';
                        $data['type'] = 'files';
                        $data['worker_title'] = 'Did you really graduate?';
                        $data['job_title'] = 'College Diploma Required';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $data['worker_image'] = !empty($job_data['diploma'])?url('public/images/nurses/diploma/'.$job_data['diploma']):"";
                        $worker_info[] = $data;
                        $data['worker_image'] = '';
    
                        $data['job'] = 'Drivers License';
                        $data['match'] = !empty($job_data['driving_license'])?true:false;
                        $data['worker'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                        $data['name'] = 'driving_license';
                        $data['match_title'] = 'Driving License';
                        $data['update_key'] = 'driving_license';
                        $data['type'] = 'files';
                        $data['worker_title'] = 'Are you really allowed to drive?';
                        $data['job_title'] = 'Picture of Front and Back DL';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $data['worker_image'] = !empty($job_data['driving_license'])?url('public/images/nurses/driving_license/'.$job_data['driving_license']):"";
                        $worker_info[] = $data;
                        $data['worker_image'] = '';
    
                        $data['job'] = !empty($job['job_worked_at_facility_before'])?$job['job_worked_at_facility_before']:"";
                        $data['match'] = $recs;
                        $data['worker'] = !empty($job_data['worked_at_facility_before'])?$job_data['worked_at_facility_before']:"";
                        $data['name'] = 'Working at Facility Before';
                        $data['match_title'] = 'Worked at Facility Before';
                        $data['update_key'] = 'worked_at_facility_before';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Are you sure you never worked here as staff?';
                        $data['job_title'] = 'Have you worked here in the last 18 months?';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = "Last 4 digit of SS# to submit";
                        $data['match'] = !empty($job_data['worker_ss_number'])?true:false;
                        $data['worker'] = !empty($job_data['worker_ss_number'])?$job_data['worker_ss_number']:"";
                        $data['name'] = 'SS Card Number';
                        $data['match_title'] = 'SS # Or SS Card';
                        $data['update_key'] = 'worker_ss_number';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Yes we need your SS# to submit you';
                        $data['job_title'] = 'last 4 digit of SS# to submit';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['profession'] == $job_data['highest_nursing_degree']){ $val = true; }else{ $val = false; }
                        $data['job'] = isset($job['profession'])?$job['profession']:"";
                        $data['match'] = $val;
                        $data['worker'] = !empty($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"";
                        $data['name'] = 'Profession';
                        $data['match_title'] = 'Profession';
                        $data['update_key'] = 'highest_nursing_degree';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What kind of Professional are you?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Profession';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['preferred_specialty'])?$job['preferred_specialty']:"";
                        $data['match'] = $speciality;
                        $data['worker'] = !empty($job_data['specialty'])?$job_data['specialty']:"";
                        $data['name'] = 'Speciality';
                        $data['match_title'] = 'Speciality';
                        $data['update_key'] = 'specialty';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = "What's your specialty?";
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Specialty';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;

                        $data['job'] = isset($job['preferred_experience'])?$job['preferred_experience']:"";
                        $data['match'] = $experience;
                        $data['worker'] = !empty($job_data['experience'])?$job_data['experience']:"";
                        $data['name'] = 'Experience';
                        $data['match_title'] = 'Experience';
                        $data['update_key'] = 'experience';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'How long have you done this?';
                        $data['job_title'] = $data['job'].' Years';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job_data['nursing_license_state'] == $job['job_location']){ $val = true; }else{ $val = false; }
                        $data['job'] = isset($job['job_location'])?$job['job_location']:"";
                        $data['match'] = $val;
                        $data['worker'] = !empty($job_data['nursing_license_state'])?$job_data['nursing_license_state']:"";
                        $data['name'] = 'License State';
                        $data['match_title'] = 'Professional Licensure';
                        $data['update_key'] = 'nursing_license_state';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'Where are you licensed?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Professional Licensure';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;

                        $i = 0;
                        foreach($vaccinations as $job_vacc)
                        {
                            $data['job'] = isset($vaccinations[$i])?$vaccinations[$i]:"Vaccinations & Immunizations";
                            $data['match'] = !empty($worker_vaccination[$i])?true:false;
                            $data['worker'] = isset($worker_vaccination[$i])?$worker_vaccination[$i]:"";
                            $data['worker_image'] = isset($vacc_image[$i]['name'])?url('public/images/nurses/vaccination/'.$vacc_image[$i]['name']):"";
                            $data['name'] = $data['worker'].' vaccination';
                            $data['match_title'] = 'Vaccinations & Immunizations';
                            $data['update_key'] = 'worker_vaccination';
                            $data['type'] = 'file';
                            $data['worker_title'] = 'Did you get the '.$data['worker'].' Vaccines?';
                            $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Vaccinations & Immunizations';
                            $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                            $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                            $worker_info[] = $data;
                            $i++;
                            // $data['worker_image'] = '';
                        }
                        $data['worker_image'] = '';
                        
                        $data['job'] = isset($job['number_of_references'])?$job['number_of_references']:"";
                        $data['match'] = $worker_ref_num;
                        $data['worker'] = isset($worker_reference_name)?$worker_reference_name:"";
                        $data['name'] = 'Reference';
                        $data['match_title'] = 'Number Of Reference';
                        $data['update_key'] = 'worker_reference_name';
                        $data['type'] = 'multiple';
                        $data['worker_title'] = 'Who are your References?';
                        $data['job_title'] = !empty($data['job'])?$data['job'].' References':'number of references';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['min_title_of_reference'])?$job['min_title_of_reference']:"";
                        $data['match'] = !empty($worker_reference_title)?true:false;
                        $data['worker'] = isset($worker_reference_title)?$worker_reference_title:"";
                        $data['name'] = 'Reference title';
                        $data['match_title'] = 'Min Title Of Reference';
                        $data['update_key'] = 'worker_reference_title';
                        $data['type'] = 'multiple';
                        $data['worker_title'] = 'What was their title?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'min title of reference';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['recency_of_reference'])?$job['recency_of_reference']:"";
                        $data['match'] = !empty($worker_reference_recency_reference)?true:false;
                        $data['worker'] = isset($worker_reference_recency_reference)?$worker_reference_recency_reference:"";
                        $data['name'] = 'Recency Reference Assignment';
                        $data['match_title'] = 'Recency Of Reference';
                        $data['update_key'] = 'worker_reference_recency_reference';
                        $data['type'] = 'multiple';
                        $data['worker_title'] = 'Is this from your last assignment?';
                        $data['job_title'] = !empty($data['job'])?$data['job'].' months':'recency of reference';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;

                        $i = 0;
                        foreach($certificate as $job_cert)
                        {
                            $data['job'] = isset($certificate[$i])?$certificate[$i]:"Certifications";
                            $data['match'] = !empty($worker_certificate_name[$i])?true:false;
                            $data['worker'] = isset($worker_certificate_name[$i])?$worker_certificate_name[$i]:"";
                            if(isset($worker_certificate_name[$i])){
                                $data['worker_image'] = isset($cert_image[$i]['name'])?url('public/images/nurses/certificate/'.$cert_image[$i]['name']):"";
                            }
                            $data['name'] = $data['worker'];
                            $data['match_title'] = 'Certifications';
                            $data['update_key'] = 'worker_certificate';
                            $data['type'] = 'file';
                            $data['worker_title'] = 'No '.$data['worker'];
                            $data['job_title'] = !empty($data['job'])?$data['job'].' Required':'Certifications';
                            $worker_info[] = $data;
                            $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                            $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                            $i++;    
                        }
                        $data['worker_image'] = '';

                        $data['job'] = isset($job['skills'])?$job['skills']:"";
                        $data['match'] = !empty($job_data['skills_checklists'])?true:false;
                        $data['worker'] = isset($job_data['skills'])?$job_data['skills']:"";
                        if(isset($job_data['skills'])){
                            $data['worker_image'] = isset($skills_checklists)?$skills_checklists[0]:"";
                        }
                        $data['name'] = 'Skills';
                        $data['match_title'] = 'Skills checklist';
                        $data['update_key'] = 'skills_checklists';
                        $data['type'] = 'file';
                        $data['worker_title'] = 'Upload your latest skills checklist';
                        $data['job_title'] = $data['job'].' Skills checklist';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
                        $data['worker_image'] = '';
    
                        if($job_data['eligible_work_in_us'] == 'yes'){ $eligible_work_in_us = true; }else{ $eligible_work_in_us = false; }
                        $data['job'] = "Eligible work in the us";
                        $data['match'] = $eligible_work_in_us;
                        $data['worker'] = isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"";
                        $data['name'] = 'eligible_work_in_us';
                        $data['match_title'] = 'Eligible to work in the US';
                        $data['update_key'] = 'eligible_work_in_us';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Does Congress allow you to work here?';
                        $data['job_title'] = 'Eligible to work in the US';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['urgency'])?$job['urgency']:"";
                        $data['match'] = !empty($job_data['worker_urgency'])?true:false;
                        $data['worker'] = isset($job_data['worker_urgency'])?$job_data['worker_urgency']:"";
                        $data['name'] = 'worker_urgency';
                        $data['match_title'] = 'Urgency';
                        $data['update_key'] = 'worker_urgency';
                        $data['type'] = 'input';
                        $data['worker_title'] = "How quickly can you be ready to submit?";
                        $data['job'] = isset($job['urgency'])?$job['urgency']:"";
                        if(isset($data['job']) && $data['job'] == '1'){ $data['job'] = 'Auto Offer'; }else{
                            $data['job'] = 'Urgency';
                        }
                        // $data['job_title'] = $data['job'];
                        $data['job_title'] = !empty($job['urgency'])?$job['urgency']:"Urgency";
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['position_available'])?$job['position_available']:"";
                        $data['match'] = !empty($job_data["available_position"])?true:false;
                        $data['worker'] = isset($job_data["available_position"])?$job_data["available_position"]:"";
                        $data['name'] = 'available_position';
                        $data['match_title'] = '# of Positions Available';
                        $data['update_key'] = 'available_position';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'You have applied to # jobs?';
                        $data['job_title'] = !empty($data['job'])?$is_vacancy.' of '.$data['job']:'# of Positions Available';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['msp'])?$job['msp']:"";
                        $data['match'] = !empty($job_data['MSP'])?true:false;
                        $data['worker'] = isset($job_data['MSP'])?$job_data['MSP']:"";
                        $data['name'] = 'MSP';
                        $data['match_title'] = 'MSP';
                        $data['update_key'] = 'MSP';
                        $data['worker_title'] = 'Any MSPs you prefer to avoid?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'MSP';
                        $data['type'] = 'dropdown';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['vms'])?$job['vms']:"";
                        $data['match'] = !empty($job_data['VMS'])?true:false;
                        $data['worker'] = isset($job_data['VMS'])?$job_data['VMS']:"";
                        $data['name'] = 'VMS';
                        $data['match_title'] = 'VMS';
                        $data['update_key'] = 'VMS';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = "Who's your favorite VMS?";
                        $data['job_title'] = !empty($data['job'])?$data['job']:'VMS';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['submission_of_vms'])?$job['submission_of_vms']:"";
                        $data['match'] = !empty($job_data['submission_VMS'])?true:false;
                        $data['worker'] = isset($job_data['submission_VMS'])?$job_data['submission_VMS']:"";
                        $data['name'] = 'submission_VMS';
                        $data['match_title'] = '# of Submissions in VMS';
                        $data['update_key'] = 'submission_VMS';
                        $data['type'] = 'input';
                        $data['worker_title'] = '# of Submissions in VMS';
                        $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'# of Submissions in VMS';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['block_scheduling'])?$job['block_scheduling']:"";
                        $data['match'] = !empty($job_data['worker_block_scheduling'])?true:false;
                        $data['worker'] = isset($job_data['worker_block_scheduling'])?$job_data['worker_block_scheduling']:"";
                        $data['name'] = 'Block_scheduling';
                        $data['match_title'] = 'Block Scheduling';
                        $data['update_key'] = 'block_scheduling';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Do you want block scheduling?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Block Scheduling';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job_data['worker_float_requirement'] == 'Yes'){ $val = true; }else{ $val = false; }
                        $data['job'] = isset($job['float_requirement'])?$job['float_requirement']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_float_requirement'])?$job_data['worker_float_requirement']:"";
                        $data['name'] = 'Float Requirement';
                        $data['match_title'] = 'Float requirements';
                        $data['update_key'] = 'float_requirement';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Are you willing float to?';
                        $data['job_title'] = !empty($job['float_requirement'])?$job['float_requirement']:'Float requirements';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
                        
                        $data['job'] = isset($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:"";
                        $data['match'] = !empty($job_data['worker_facility_shift_cancelation_policy'])?true:false;
                        $data['worker'] = isset($job_data['worker_facility_shift_cancelation_policy'])?$job_data['worker_facility_shift_cancelation_policy']:"";
                        $data['name'] = 'Facility Shift Cancelation Policy';
                        $data['match_title'] = 'Facility Shift Cancellation Policy';
                        $data['update_key'] = 'facility_shift_cancelation_policy';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What terms do you prefer?';
                        $data['job_title'] = !empty($job['facility_shift_cancelation_policy'])?$job['facility_shift_cancelation_policy']:'Facility Shift Cancellation Policy';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['contract_termination_policy'])?$job['contract_termination_policy']:"";
                        $data['match'] = !empty($job_data['worker_contract_termination_policy'])?true:false;
                        $data['worker'] = isset($job_data['worker_contract_termination_policy'])?$job_data['worker_contract_termination_policy']:"";
                        $data['name'] = 'Contract Terminology';
                        $data['match_title'] = 'Contract Termination Policy';
                        $data['update_key'] = 'contract_termination_policy';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What terms do you prefer?';
                        $data['job_title'] = !empty($job['contract_termination_policy'])?$job['contract_termination_policy']:'Contract Termination Policy';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(isset($job_data['distance_from_your_home']) && ($job_data['distance_from_your_home'] != 0) ){
                            $data['worker'] = $job_data['distance_from_your_home'];
                        }else{
                            $data['worker'] = "";
                        }
                        if($job['traveler_distance_from_facility'] == $job_data['distance_from_your_home']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['traveler_distance_from_facility'])?$job['traveler_distance_from_facility']:"";
                        $data['match'] = $val;
                        // $data['worker'] = isset($job_data['distance_from_your_home'])?$job_data['distance_from_your_home']:"";
                        $data['name'] = 'distance from facility';
                        $data['match_title'] = 'Traveler Distance From Facility';
                        $data['update_key'] = 'distance_from_your_home';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Where does the IRS think you live?';
                        $data['job_title'] = !empty($data['job'])?$data['job'].' miles':'Traveler Distance From Facility';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['facility'])?$job['facility']:"";
                        $data['match'] = !empty($job_data['facilities_you_like_to_work_at'])?true:false;
                        $data['worker'] = isset($job_data['facilities_you_like_to_work_at'])?$job_data['facilities_you_like_to_work_at']:"";
                        $data['name'] = 'Facility available upon request';
                        $data['match_title'] = 'Facility';
                        $data['update_key'] = 'facilities_you_like_to_work_at';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What facilities have you worked at?';
                        $data['job_title'] = !empty($job['facility'])?$job['facility']:'Facility';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"";
                        $data['match'] = !empty($job_data['worker_facility_parent_system'])?true:false;
                        $data['worker'] = isset($job_data['worker_facility_parent_system'])?$job_data['worker_facility_parent_system']:"";
                        $data['name'] = 'facility parent system';
                        $data['match_title'] = "Facility's Parent System";
                        $data['update_key'] = 'worker_facility_parent_system';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What facilities would you like to work at?';
                        $data['job_title'] = !empty($job['facilitys_parent_system'])?$job['facilitys_parent_system']:"Facility's Parent System";
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(isset($job_data['avg_rating_by_facilities']) && ($job_data['avg_rating_by_facilities'] != 0) ){
                            $data['worker'] = $job_data['avg_rating_by_facilities'];
                        }else{
                            $data['worker'] = "";
                        }
                        $data['job'] = isset($job['facility_average_rating'])?$job['facility_average_rating']:"";
                        $data['match'] = !empty($job_data['avg_rating_by_facilities'])?true:false;
                        // $data['worker'] = isset($job_data['avg_rating_by_facilities'])?$job_data['avg_rating_by_facilities']:"";
                        $data['name'] = 'facility average rating';
                        $data['match_title'] = 'Facility Average Rating';
                        $data['update_key'] = 'avg_rating_by_facilities';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Your average rating by your facilities';
                        $data['job_title'] = !empty($job['facility_average_rating'])?$job['facility_average_rating']:'Facility Average Rating';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(isset($job_data['worker_avg_rating_by_recruiters']) && ($job_data['worker_avg_rating_by_recruiters'] != 0) ){
                            $data['worker'] = $job_data['worker_avg_rating_by_recruiters'];
                        }else{
                            $data['worker'] = "";
                        }
                        $data['job'] = isset($job['recruiter_average_rating'])?$job['recruiter_average_rating']:"";
                        $data['match'] = !empty($job_data['worker_avg_rating_by_recruiters'])?true:false;
                        // $data['worker'] = isset($job_data['worker_avg_rating_by_recruiters'])?$job_data['worker_avg_rating_by_recruiters']:"";
                        $data['name'] = 'recruiter average rating';
                        $data['match_title'] = 'Recruiter Average Rating';
                        $data['update_key'] = 'worker_avg_rating_by_recruiters';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Your average rating by your recruiters';
                        $data['job_title'] = !empty($job['recruiter_average_rating'])?$job['recruiter_average_rating']:'Recruiter Average Rating';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(isset($job_data['worker_avg_rating_by_employers']) && ($job_data['worker_avg_rating_by_employers'] != 0) ){
                            $data['worker'] = $job_data['worker_avg_rating_by_employers'];
                        }else{
                            $data['worker'] = "";
                        }
                        $data['job'] = isset($job['employer_average_rating'])?$job['employer_average_rating']:"";
                        $data['match'] = !empty($job_data['worker_avg_rating_by_employers'])?true:false;
                        // $data['worker'] = isset($job_data['worker_avg_rating_by_employers'])?$job_data['worker_avg_rating_by_employers']:"";
                        $data['name'] = 'employer average rating';
                        $data['match_title'] = 'Employer Average Rating';
                        $data['update_key'] = 'worker_avg_rating_by_employers';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Your average rating by your employers';
                        $data['job_title'] = !empty($job['employer_average_rating'])?$job['employer_average_rating']:'Employer Average Rating';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['clinical_setting'] == $job_data['clinical_setting_you_prefer']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['clinical_setting'])?$job['clinical_setting']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['clinical_setting_you_prefer'])?$job_data['clinical_setting_you_prefer']:"";
                        $data['name'] = 'Clinical Setting';
                        $data['match_title'] = 'Clinical Setting';
                        $data['update_key'] = 'clinical_setting_you_prefer';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What setting do you prefer?';
                        $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:' Clinical Setting';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
                        
                        $data['job'] = isset($job['Patient_ratio'])?$job['Patient_ratio']:"";
                        $data['match'] = !empty($job_data['worker_patient_ratio'])?true:false;
                        $data['worker'] = isset($job_data['worker_patient_ratio'])?$job_data['worker_patient_ratio']:"";
                        $data['name'] = 'patient ratio';
                        $data['match_title'] = 'Patient Ratio';
                        $data['update_key'] = 'worker_patient_ratio';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'How many patients can you handle?';
                        $data['job_title'] = !empty($job['Patient_ratio'])?$job['Patient_ratio']:'Patient ratio';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['emr'])?$job['emr']:"";
                        $data['match'] = !empty($job_data['worker_emr'])?true:false;
                        $data['worker'] = isset($job_data['worker_emr'])?$job_data['worker_emr']:"";
                        $data['name'] = 'EMR';
                        $data['match_title'] = 'EMR';
                        $data['update_key'] = 'worker_emr';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'What EMRs have you used?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'EMR';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['Unit'])?$job['Unit']:"";
                        $data['match'] = !empty($job_data['worker_unit'])?true:false;
                        $data['worker'] = isset($job_data['worker_unit'])?$job_data['worker_unit']:"";
                        $data['name'] = 'Unit';
                        $data['match_title'] = 'Unit';
                        $data['update_key'] = 'worker_unit';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Fav Unit?';
                        $data['job_title'] = !empty($job['Unit'])?$job['Unit']:'Unit';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['Department'])?$job['Department']:"";
                        $data['match'] = !empty($job_data['worker_department'])?true:false;
                        $data['worker'] = isset($job_data['worker_department'])?$job_data['worker_department']:"";
                        $data['name'] = 'Department';
                        $data['match_title'] = 'Department';
                        $data['update_key'] = 'worker_department';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Fav Department?';
                        $data['job_title'] = !empty($job['Department'])?$job['Department']:'Department';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['Bed_Size'])?$job['Bed_Size']:"";
                        $data['match'] = !empty($job_data['worker_bed_size'])?true:false;
                        $data['worker'] = isset($job_data['worker_bed_size'])?$job_data['worker_bed_size']:"";
                        $data['name'] = 'Bed Size';
                        $data['match_title'] = 'Bed Size';
                        $data['update_key'] = 'worker_bed_size';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'king or california king ';
                        $data['job_title'] = !empty($job['Bed_Size'])?$job['Bed_Size']:'Bed Size';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['Trauma_Level'])?$job['Trauma_Level']:"";
                        $data['match'] = !empty($job_data['worker_trauma_level'])?true:false;
                        $data['worker'] = isset($job_data['worker_trauma_level'])?$job_data['worker_trauma_level']:"";
                        $data['name'] = 'Trauma Level';
                        $data['match_title'] = 'Trauma Level';
                        $data['update_key'] = 'worker_trauma_level';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Ideal trauma level?';
                        $data['job_title'] = !empty($job['Trauma_Level'])?$job['Trauma_Level']:'Trauma Level';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['scrub_color'] == $job_data['worker_scrub_color']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['scrub_color'])?$job['scrub_color']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_scrub_color'])?$job_data['worker_scrub_color']:"";
                        $data['name'] = 'Scrub color';
                        $data['match_title'] = 'Scrub Color';
                        $data['update_key'] = 'worker_scrub_color';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Fav Scrub Brand?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Scrub Color';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['job_state'] == $job_data['worker_facility_state_code']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['job_state'])?$job['job_state']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_facility_state_code'])?$job_data['worker_facility_state_code']:"";
                        $data['name'] = 'Facility state';
                        $data['match_title'] = 'Facility State Code';
                        $data['update_key'] = 'worker_facility_state_code';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = "States you'd like to work?";
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Facility State Code';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;

                        if($job['job_city'] == $job_data['worker_facility_city']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['job_city'])?$job['job_city']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_facility_city'])?$job_data['worker_facility_city']:"";
                        $data['name'] = 'Facility City';
                        $data['match_title'] = 'Facility City';
                        $data['update_key'] = 'worker_facility_city';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = "Cities you'd like to work?";
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Facility City';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = "InterviewDates";
                        $data['match'] = !empty($job_data['worker_interview_dates'])?true:false;
                        $data['worker'] = isset($job_data['worker_interview_dates'])?$job_data['worker_interview_dates']:"";
                        $data['name'] = 'Interview dates';
                        $data['match_title'] = 'InterviewDates';
                        $data['update_key'] = 'worker_interview_dates';
                        $data['type'] = 'Interview dates';
                        $data['worker_title'] = "Any days you're not available?";
                        $data['job_title'] = 'InterviewDates';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(isset($job['as_soon_as']) && ($job['as_soon_as'] == '1')){
                            $data['job'] = "As Soon As";
                        }else{
                            $data['job'] = isset($job['start_date'])?$job['start_date']:"";
                        }
                        if(isset($job_data['worker_as_soon_as_posible']) && ($job_data['worker_as_soon_as_posible'] == '1')){
                            $data['worker'] = "As Soon As";
                        }else{
                            $data['worker'] = isset($job_data['worker_start_date'])?$job_data['worker_start_date']:"";
                        }
                        if($data['worker'] == $data['job']){ $data['match'] = true;}else{ $data['match'] = false; }
                        $data['name'] = 'As Soon As';
                        $data['match_title'] = 'Start Date';
                        $data['update_key'] = 'worker_as_soon_as_posible';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'When can you start?';
                        $data['job_title'] = !empty($job['as_soon_as'])?$job['as_soon_as']:'Start Date';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['rto'] == $job_data['worker_rto']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['rto'])?$job['rto']:"";
                        $data['match'] = $val;
                        $data['worker'] = "";
                        $data['name'] = 'RTO';
                        $data['match_title'] = 'RTO';
                        $data['update_key'] = 'clinical_setting_you_prefer';
                        $data['type'] = 'input';
                        $data['worker_title'] = !empty($data['worker'])?$data['worker']:'Any time off?';
                        $data['job_title'] = (isset($data['job']) && !empty($data['job']))?$data['job']:'RTO';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['preferred_shift'] == $job_data['worker_shift_time_of_day']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['preferred_shift'])?$job['preferred_shift']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"";
                        $data['name'] = 'Shift';
                        $data['match_title'] = 'Shift Time of Day';
                        $data['update_key'] = 'worker_shift_time_of_day';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'Fav Shift?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Shift Time of Day';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
    
                        if($job['hours_per_week'] == $job_data['worker_hours_per_week']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['hours_per_week'])?$job['hours_per_week']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_hours_per_week'])?$job_data['worker_hours_per_week']:"";
                        $data['name'] = 'Hours/week';
                        $data['match_title'] = 'Hours/Week';
                        $data['update_key'] = 'worker_hours_per_week';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Ideal Hours per week?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Week';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['guaranteed_hours'] == $job_data['worker_guaranteed_hours']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['guaranteed_hours'])?$job['guaranteed_hours']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_guaranteed_hours'])?$job_data['worker_guaranteed_hours']:"";
                        $data['name'] = 'Guaranteed Hours';
                        $data['match_title'] = 'Guaranteed Hours';
                        $data['update_key'] = 'worker_guaranteed_hours';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Open to jobs with no guaranteed hours?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Guaranteed Hours';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['hours_shift'] == $job_data['worker_hours_shift']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['hours_shift'])?$job['hours_shift']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_hours_shift'])?$job_data['worker_hours_shift']:"";
                        $data['name'] = 'Shift Hours';
                        $data['match_title'] = 'Hours/Shift';
                        $data['update_key'] = 'worker_hours_shift';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Prefered hours per shift?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Hours/Shift';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['preferred_assignment_duration'] == $job_data['worker_weeks_assignment']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['preferred_assignment_duration'])?$job['preferred_assignment_duration']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_weeks_assignment'])?$job_data['worker_weeks_assignment']:"";
                        $data['name'] = 'Assignment in weeks';
                        $data['match_title'] = 'Weeks/Assignment';
                        $data['update_key'] = 'worker_weeks_assignment';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'How many weeks?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Weeks/Assignment';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['weeks_shift'] == $job_data['worker_shifts_week']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['weeks_shift'])?$job['weeks_shift']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_shifts_week'])?$job_data['worker_shifts_week']:"";
                        $data['name'] = 'Shift Week';
                        $data['match_title'] = 'Shifts/Week';
                        $data['update_key'] = 'worker_shifts_week';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Ideal shifts per week?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Shifts/Week';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['referral_bonus'] == $job_data['worker_referral_bonus']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['referral_bonus'])?$job['referral_bonus']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_referral_bonus'])?$job_data['worker_referral_bonus']:"";
                        $data['name'] = 'Refferel Bonus';
                        $data['match_title'] = 'Referral Bonus';
                        $data['update_key'] = 'worker_referral_bonus';
                        $data['type'] = 'input';
                        $data['worker_title'] = '# of people you have referred';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Referral Bonus';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if(($job['sign_on_bonus'] == $job_data['worker_sign_on_bonus']) && (!empty($job_data['worker_sign_on_bonus']))){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['sign_on_bonus'])?$job['sign_on_bonus']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_sign_on_bonus'])?$job_data['worker_sign_on_bonus']:"";
                        $data['name'] = 'Sign On Bonus';
                        $data['match_title'] = 'Sign-On Bonus';
                        $data['update_key'] = 'worker_sign_on_bonus';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What kind of bonus do you expect?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Sign-On Bonus';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['completion_bonus'] == $job_data['worker_completion_bonus']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['completion_bonus'])?$job['completion_bonus']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_completion_bonus'])?$job_data['worker_completion_bonus']:"";
                        $data['name'] = 'Completion Bonus';
                        $data['match_title'] = 'Completion Bonus';
                        $data['update_key'] = 'worker_completion_bonus';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What kind of bonus do you deserve?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Completion Bonus';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['extension_bonus'] == $job_data['worker_extension_bonus']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['extension_bonus'])?$job['extension_bonus']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_extension_bonus'])?$job_data['worker_extension_bonus']:"";
                        $data['name'] = 'extension bonus';
                        $data['match_title'] = 'Extension Bonus';
                        $data['update_key'] = 'worker_extension_bonus';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What are you comparing this too?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Extension Bonus';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['other_bonus'])?$job['other_bonus']:"";
                        $data['match'] = !empty($job_data['worker_other_bonus'])?true:false;
                        $data['worker'] = isset($job_data['worker_other_bonus'])?$job_data['worker_other_bonus']:"";
                        $data['name'] = 'Other Bonus';
                        $data['match_title'] = 'Other Bonus';
                        $data['update_key'] = 'worker_other_bonus';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Other bonuses you want?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Other Bonus';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['four_zero_one_k'])?$job['four_zero_one_k']:"";
                        $data['match'] = !empty($job_data['how_much_k'])?true:false;
                        $data['worker'] = isset($job_data['how_much_k'])?$job_data['how_much_k']:"";
                        $data['name'] = '401k';
                        $data['match_title'] = '401k';
                        $data['update_key'] = 'how_much_k';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'How much do you want this?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'401K';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['health_insaurance'])?$job['health_insaurance']:"";
                        $data['match'] = !empty($job_data['worker_health_insurance'])?true:false;
                        $data['worker'] = isset($job_data['worker_health_insurance'])?$job_data['worker_health_insurance']:"";
                        $data['name'] = 'Health Insaurance';
                        $data['match_title'] = 'Health Insurance';
                        $data['update_key'] = 'worker_health_insurance';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'How much do you want this?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Health Insurance';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['dental'])?$job['dental']:"";
                        $data['match'] = !empty($job_data['worker_dental'])?true:false;
                        $data['worker'] = isset($job_data['worker_dental'])?$job_data['worker_dental']:"";
                        $data['name'] = 'Dental';
                        $data['match_title'] = 'Dental';
                        $data['update_key'] = 'worker_dental';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'How much do you want this?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Dental';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['vision'])?$job['vision']:"";
                        $data['match'] = !empty($job_data['worker_vision'])?true:false;
                        $data['worker'] = isset($job_data['worker_vision'])?$job_data['worker_vision']:"";
                        $data['name'] = 'Vision';
                        $data['match_title'] = 'Vision';
                        $data['update_key'] = 'worker_vision';
                        $data['type'] = 'dropdown';
                        $data['worker_title'] = 'How much do you want this?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Vision';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['actual_hourly_rate'] == $job_data['worker_actual_hourly_rate']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['actual_hourly_rate'])?$job['actual_hourly_rate']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_actual_hourly_rate'])?$job_data['worker_actual_hourly_rate']:"";
                        $data['name'] = 'Actually Rate';
                        $data['match_title'] = 'Actual Hourly rate';
                        $data['update_key'] = 'worker_actual_hourly_rate';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What range is fair?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Actual Hourly rate';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['feels_like_per_hour'] == $job_data['worker_feels_like_hour']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['feels_like_per_hour'])?$job['feels_like_per_hour']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_feels_like_hour'])?$job_data['worker_feels_like_hour']:"";
                        $data['name'] = 'feels/$hr';
                        $data['match_title'] = 'Feels Like $/hr';
                        $data['update_key'] = 'worker_feels_like_hour';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Does this seem fair based on the market?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Feels Like $/hr';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['overtime'])?$job['overtime']:"";
                        $data['match'] = !empty($job_data['worker_overtime'])?true:false;
                        $data['worker'] = isset($job_data['worker_overtime'])?$job_data['worker_overtime']:"";
                        $data['name'] = 'Overtime';
                        $data['match_title'] = 'Overtime';
                        $data['update_key'] = 'worker_overtime';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Would you work more overtime for a higher OT rate?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Overtime';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['holiday'])?$job['holiday']:"";
                        $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                        $data['worker'] = isset($job_data['worker_holiday'])?$job_data['worker_holiday']:"";
                        $data['name'] = 'Holiday';
                        $data['match_title'] = 'Holiday';
                        $data['update_key'] = 'worker_holiday';
                        $data['type'] = 'date';
                        $data['worker_title'] = 'Any holidays you refuse to work?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Holiday';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['on_call'])?$job['on_call']:"";
                        $data['match'] = !empty($job_data['worker_holiday'])?true:false;
                        $data['worker'] = isset($job_data['worker_on_call'])?$job_data['worker_on_call']:"";
                        $data['name'] = 'On call';
                        $data['match_title'] = 'On call';
                        $data['update_key'] = 'worker_on_call';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Will you do call?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'On Call';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['call_back'])?$job['call_back']:"";
                        $data['match'] = !empty($job_data['worker_call_back'])?true:false;
                        $data['worker'] = isset($job_data['worker_call_back'])?$job_data['worker_call_back']:"";
                        $data['name'] = 'Call Back';
                        $data['match_title'] = 'Call Back';
                        $data['update_key'] = 'worker_call_back';
                        $data['type'] = 'checkbox';
                        $data['worker_title'] = 'Is this rate reasonable?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Call Back';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = isset($job['orientation_rate'])?$job['orientation_rate']:"";
                        $data['match'] = !empty($job_data['worker_orientation_rate'])?true:false;
                        $data['worker'] = isset($job_data['worker_orientation_rate'])?$job_data['worker_orientation_rate']:"";
                        $data['name'] = 'Orientation Rate';
                        $data['match_title'] = 'Orientation Rate';
                        $data['update_key'] = 'worker_orientation_rate';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Is this rate reasonable?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Orientation Rate';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['weekly_taxable_amount'] == $job_data['worker_weekly_taxable_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['weekly_taxable_amount'])?$job['weekly_taxable_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_weekly_taxable_amount'])?$job_data['worker_weekly_taxable_amount']:"";
                        $data['name'] = 'Weekly Taxable amount';
                        $data['match_title'] = 'Weekly Taxable Amount';
                        $data['update_key'] = 'worker_weekly_taxable_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = '';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly Taxable amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['weekly_non_taxable_amount'] == $job_data['worker_weekly_non_taxable_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['weekly_non_taxable_amount'])?$job['weekly_non_taxable_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_weekly_non_taxable_amount'])?$job_data['worker_weekly_non_taxable_amount']:"";
                        $data['name'] = 'Weekly Non Taxable Amount';
                        $data['match_title'] = 'Weekly Non Taxable Amount';
                        $data['update_key'] = 'worker_weekly_non_taxable_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'Are you going to duplicate expenses?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Weekly non-taxable amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['employer_weekly_amount'] == $job_data['worker_employer_weekly_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['employer_weekly_amount'])?$job['employer_weekly_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_employer_weekly_amount'])?$job_data['worker_employer_weekly_amount']:"";
                        $data['name'] = 'Employer Weekly Amount';
                        $data['match_title'] = 'Employer Weekly Amount';
                        $data['update_key'] = 'worker_employer_weekly_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'What range is reasonable?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Employer Weekly Amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['goodwork_weekly_amount'] == $job_data['worker_goodwork_weekly_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['goodwork_weekly_amount'])?$job['goodwork_weekly_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_goodwork_weekly_amount'])?$job_data['worker_goodwork_weekly_amount']:"";
                        $data['name'] = 'Goodwork Weekly Amount';
                        $data['match_title'] = 'Goodwork Weekly Amount';
                        $data['update_key'] = 'worker_goodwork_weekly_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'You only have (count down time) left before your rate drops from 5% to 2%';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Goodwork Weekly Amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['total_employer_amount'] == $job_data['worker_total_employer_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['total_employer_amount'])?$job['total_employer_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_total_employer_amount'])?$job_data['worker_total_employer_amount']:"";
                        $data['name'] = 'Total Employer Amount';
                        $data['match_title'] = 'Total Employer Amount';
                        $data['update_key'] = 'worker_total_employer_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = '';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Total Employer Amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['total_goodwork_amount'] == $job_data['worker_total_goodwork_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['total_goodwork_amount'])?$job['total_goodwork_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_total_goodwork_amount'])?$job_data['worker_total_goodwork_amount']:"";
                        $data['name'] = 'Total Goodwork Amount';
                        $data['match_title'] = 'Total Goodwork Amount';
                        $data['update_key'] = 'worker_total_goodwork_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = 'How would you spend those extra funds?';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Total Goodwork Amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        if($job['total_contract_amount'] == $job_data['worker_total_contract_amount']){ $val = true; }else{$val = false;}
                        $data['job'] = isset($job['total_contract_amount'])?$job['total_contract_amount']:"";
                        $data['match'] = $val;
                        $data['worker'] = isset($job_data['worker_total_contract_amount'])?$job_data['worker_total_contract_amount']:"";
                        $data['name'] = 'Total Contract Amount';
                        $data['match_title'] = 'Total Contract Amount';
                        $data['update_key'] = 'worker_total_contract_amount';
                        $data['type'] = 'input';
                        $data['worker_title'] = '';
                        $data['job_title'] = !empty($data['job'])?$data['job']:'Total Contract Amount';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $data['job'] = "Goodwork Number";
                        $data['match'] = !empty($job_data['worker_goodwork_number'])?true:false;
                        $data['worker'] = isset($job_data['worker_goodwork_number'])?$job_data['worker_goodwork_number']:"";
                        $data['name'] = 'goodwork number';
                        $data['match_title'] = 'Goodwork Number';
                        $data['update_key'] = 'worker_goodwork_number';
                        $data['type'] = 'input';
                        $data['worker_title'] = '';
                        $data['job_title'] = 'Goodwork Number';
                        $ask_worker = DB::table('ask_worker')->where(['update_key' => $data['update_key'], 'worker_id' => $result['worker_id']])->first();
                        $data['isAlreadyAsk'] = !empty($ask_worker)?true:false;
                        $worker_info[] = $data;
    
                        $result['worker_info'] = $worker_info;
                        
    
                        
                        $this->check = "1";
                        $this->message = "Matching details listed successfully";
                        // $this->return_data = $data;
                        $this->return_data = $result;
    
                    }else{
                        $this->check = "1";
                        $this->message = "User Not Found";
                    }
                    
                }else{
                    $this->check = "1";
                    $this->message = "Worker Not Found";
                }
            }else{
                $this->check = "1";
                $this->message = "Job Not Found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function updateRecruiterInformation(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'user_id' => 'required',
            'api_key' => 'required',
            'worker_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $worker_info  = Nurse::where('id', $request->worker_id);
            $vaccination = [];
            if ($worker_info->count() > 0) {
                $worker = $worker_info->get()->first();

                $worker->specialty = isset($request->specialty)?$request->specialty:$worker->specialty;
                $worker->nursing_license_state = isset($request->nursing_license_state)?$request->nursing_license_state:$worker->nursing_license_state;
                $worker->license_type = isset($request->license_type)?$request->license_type:$worker->license_type;
                $worker->nursing_license_number = isset($request->nursing_license_number)?$request->nursing_license_number:$worker->nursing_license_number;
                $worker->highest_nursing_degree = isset($request->highest_nursing_degree)?$request->highest_nursing_degree:$worker->highest_nursing_degree;
                $worker->city = isset($request->city)?$request->city:$worker->city;
                $worker->state = isset($request->state)?$request->state:$worker->state;
                $worker->country = isset($request->country)?$request->country:$worker->country;
                $worker->hourly_pay_rate = isset($request->hourly_pay_rate)?$request->hourly_pay_rate:$worker->hourly_pay_rate;
                $worker->experience = isset($request->experience)?$request->experience:$worker->experience;
                $worker->recent_experience = isset($request->recent_experience)?$request->recent_experience:$worker->recent_experience;
                $worker->active = isset($request->active)?$request->active:$worker->active;
                $worker->clinical_educator = isset($request->clinical_educator)?$request->clinical_educator:$worker->clinical_educator;
                $worker->credential_title = isset($request->credential_title)?$request->credential_title:$worker->credential_title;
                $worker->languages = isset($request->languages)?$request->languages:$worker->languages;
                $worker->worker_vaccination = isset($worker->worker_vaccination)?$worker->worker_vaccination:null;
                // if(isset($worker->worker_vaccination) && !empty($worker->worker_vaccination))
                // {
                    if(isset($worker->worker_vaccination) && !empty($worker->worker_vaccination)){
                        $resu = json_decode($worker->worker_vaccination);
                        foreach($resu as $vac){
                            $vaccination[] = $vac;
                        }
                    }else{
                        $vaccination[0] = null;
                        $vaccination[1] = null;
                    }

                    // upload covid
                    if ($request->hasFile('covid') && $request->file('covid') != null) 
                    {
                        $dele = NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'covid')->forceDelete();

                        if(!empty($vaccination[0])){
                            if(\File::exists(public_path('images/nurses/vaccination/').$vaccination[0]))
                            {
                                \File::delete(public_path('images/nurses/vaccination/').$vaccination[0]);
                            }
                        }
                        
                        $covid_name_full = $request->file('covid')->getClientOriginalName();
                        $covid_name = pathinfo($covid_name_full, PATHINFO_FILENAME);
                        $covid_ext = $request->file('covid')->getClientOriginalExtension();
                        $covid = $covid_name.'_'.time().'.'.$covid_ext;
                        $destinationPath = 'images/nurses/vaccination';
                        $request->file('covid')->move(public_path($destinationPath), $covid);
                        
                        // write image name in worker table
                        // $worker->covid = $covid;
                        $covid_date = isset($request->covid_date)?$request->covid_date:'';
                        $covid_asset = NurseAsset::create([
                            'nurse_id' => $request->worker_id,
                            'using_date' => $covid_date,
                            'name' => $covid,
                            'filter' => 'covid'
                        ]);
                        $vaccination[0] = $covid;
                        if(isset($covid_asset)){
                            $update = NurseAsset::where(['id' => $covid_asset['id']])->update([
                                'using_date' => $covid_date
                            ]);
                        }
                    }else if(isset($request->covid_date) && !isset($request->covid)){
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'covid')->update([
                            'using_date' => $request->covid_date,
                        ]);
                    }

                    // Upload flu
                    if ($request->hasFile('flu') && $request->file('flu') != null) 
                    {
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'flu')->forceDelete();
                        if(!empty($vaccination[1])){
                            // unlink(public_path('images/nurses/vaccination/').$vaccination[1]);
                            if(\File::exists(public_path('images/nurses/vaccination/').$vaccination[1]))
                            {
                                \File::delete(public_path('images/nurses/vaccination/').$vaccination[1]);
                            }
                        }

                        $flu_name_full = $request->file('flu')->getClientOriginalName();
                        $flu_name = pathinfo($flu_name_full, PATHINFO_FILENAME);
                        $flu_ext = $request->file('flu')->getClientOriginalExtension();
                        $flu = $flu_name.'_'.time().'.'.$flu_ext;
                        $destinationPath = 'images/nurses/vaccination';
                        $request->file('flu')->move(public_path($destinationPath), $flu);

                        // write image name in worker table
                        // $worker->flu = $flu;
                        $flu_date = isset($request->flu_date)?$request->flu_date:'';
                        $flu_asset = NurseAsset::create([
                            'nurse_id' => $request->worker_id,
                            'name' => $flu,
                            'filter' => 'flu',
                            'using_date' => $flu_date,
                        ]);
                        $vaccination[1] = $flu;
                        if(isset($flu_asset)){
                            $update = NurseAsset::where(['id' => $flu_asset['id']])->update([
                                'using_date' => $flu_date
                            ]);
                        }
                    }else if(isset($request->flu_date)){
                        NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'flu')->update([
                            'using_date' => $request->flu_date,
                        ]);
                    }
                    $worker->worker_vaccination = json_encode($vaccination);
                    
                // }
                // Diploma
                if ($request->hasFile('diploma') && $request->file('diploma') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'diploma')->forceDelete();
                    if(!empty($worker->diploma)){
                        if(\File::exists(public_path('images/nurses/diploma/').$worker->diploma))
                        {
                            \File::delete(public_path('images/nurses/diploma/').$worker->diploma);
                        }
                    }

                    $diploma_name_full = $request->file('diploma')->getClientOriginalName();
                    $diploma_name = pathinfo($diploma_name_full, PATHINFO_FILENAME);
                    $diploma_ext = $request->file('diploma')->getClientOriginalExtension();
                    $diploma = $diploma_name.'_'.time().'.'.$diploma_ext;
                    $destinationPath = 'images/nurses/diploma';
                    $request->file('diploma')->move(public_path($destinationPath), $diploma);

                    // write image name in worker table
                    $worker->diploma = $diploma;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $diploma,
                        'filter' => 'diploma'
                    ]);
                }
                
                // Driving License
                if ($request->hasFile('driving_license') && $request->file('driving_license') != null) 
                {    
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'driving_license')->forceDelete();
                    if(!empty($worker->driving_license)){
                        if(\File::exists(public_path('images/nurses/driving_license/').$worker->driving_license))
                        {
                            \File::delete(public_path('images/nurses/driving_license/').$worker->driving_license);
                        }
                    }

                    $driving_license_name_full = $request->file('driving_license')->getClientOriginalName();
                    $driving_license_name = pathinfo($driving_license_name_full, PATHINFO_FILENAME);
                    $driving_license_ext = $request->file('driving_license')->getClientOriginalExtension();
                    $driving_license = $driving_license_name.'_'.time().'.'.$driving_license_ext;
                    $destinationPath = 'images/nurses/driving_license';
                    $request->file('driving_license')->move(public_path($destinationPath), $driving_license);
                    
                    // write image name in worker table
                    $worker->driving_license = $driving_license;
                    $license_expiration_date = isset($request->license_expiration_date)?$request->license_expiration_date:'';
                    $driving_license_asset = NurseAsset::create([
                                                'nurse_id' => $request->worker_id,
                                                'using_date' => $license_expiration_date,
                                                'name' => $driving_license,
                                                'filter' => 'driving_license',
                                            ]);

                    if(isset($driving_license_asset)){
                        $update = NurseAsset::where(['id' => $driving_license_asset['id']])->update([
                            'using_date' => $license_expiration_date
                        ]);
                    }
                }
                $worker->license_expiry_date = isset($request->license_expiry_date)?$request->license_expiry_date:$worker->license_expiry_date;
                $worker->compact_license = isset($request->compact_license)?$request->compact_license:$worker->compact_license;
                $worker->license_issue_date = isset($request->license_issue_date)?$request->license_issue_date:$worker->license_issue_date;
                
                $worker->worker_ss_number = isset($request->worker_ss_number)?$request->worker_ss_number:$worker->worker_ss_number;
                $worker->worker_number_of_references = isset($request->worker_number_of_references)?$request->worker_number_of_references:$worker->worker_number_of_references;
                
                // BLS
                if ($request->hasFile('BLS') && $request->file('BLS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'BLS')->forceDelete();

                    $bls_name_full = $request->file('BLS')->getClientOriginalName();
                    $bls_name = pathinfo($bls_name_full, PATHINFO_FILENAME);
                    $bls_ext = $request->file('BLS')->getClientOriginalExtension();
                    if(!empty($worker->BLS)){
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->BLS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->BLS);
                        }
                    }
                    $bls = $bls_name.'_'.time().'.'.$bls_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('BLS')->move(public_path($destinationPath), $bls);

                    // write image name in worker table
                    $worker->BLS = $bls;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $bls,
                        'filter' => 'BLS'
                    ]);
                }
                
                // ACLS
                if ($request->hasFile('ACLS') && $request->file('ACLS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'ACLS')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->ACLS);

                    $acls_name_full = $request->file('ACLS')->getClientOriginalName();
                    $acls_name = pathinfo($acls_name_full, PATHINFO_FILENAME);
                    $acls_ext = $request->file('ACLS')->getClientOriginalExtension();
                    if(!empty($worker->ACLS)){
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->ACLS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->ACLS);
                        }
                    }
                    $acls = $acls_name.'_'.time().'.'.$acls_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('ACLS')->move(public_path($destinationPath), $acls);

                    // write image name in worker table
                    $worker->ACLS = $acls;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $acls,
                        'filter' => 'ACLS'
                    ]);
                }

                // PALS
                if ($request->hasFile('PALS') && $request->file('PALS') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'PALS')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->PALS);

                    $pals_name_full = $request->file('PALS')->getClientOriginalName();
                    $pals_name = pathinfo($pals_name_full, PATHINFO_FILENAME);
                    $pals_ext = $request->file('PALS')->getClientOriginalExtension();
                    if(!empty($worker->PALS)){
                        // unlink(public_path('images/nurses/certificate/').$worker->PALS);
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->PALS))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->PALS);
                        }
                    }
                    $pals = $pals_name.'_'.time().'.'.$pals_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('PALS')->move(public_path($destinationPath), $pals);

                    // write image name in worker table
                    $worker->PALS = $pals;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $pals,
                        'filter' => 'PALS'
                    ]);
                }

                // OTHER
                if ($request->hasFile('other') && $request->file('other') != null) 
                {
                    NurseAsset::where('nurse_id', $request->worker_id)->where('filter', 'other')->forceDelete();
                    // unlink(public_path('images/nurses/certificate/').$worker->other);

                    $other_name_full = $request->file('other')->getClientOriginalName();
                    $other_name = pathinfo($other_name_full, PATHINFO_FILENAME);
                    $other_ext = $request->file('other')->getClientOriginalExtension();
                    if(($other_ext != 'pdf')  && (isset($worker->other))){
                        // unlink(public_path('images/nurses/certificate/').$worker->other);
                        if(\File::exists(public_path('images/nurses/certificate/').$worker->other))
                        {
                            \File::delete(public_path('images/nurses/certificate/').$worker->other);
                        }
                    }
                    $other = $other_name.'_'.time().'.'.$other_ext;
                    $destinationPath = 'images/nurses/certificate';
                    $request->file('other')->move(public_path($destinationPath), $other);

                    // write image name in worker table
                    $worker->other = $other;
                    $worker->other_certificate_name = isset($request->other_certificate_name)?$request->other_certificate_name:$worker->other_certificate_name;
                    $diploma_asset = NurseAsset::create([
                        'nurse_id' => $request->worker_id,
                        'name' => $other,
                        'filter' => 'Other'
                    ]);
                }
                $worker->other_certificate_name = isset($request->other_certificate_name)?$request->other_certificate_name:$worker->other_certificate_name;
                $worker->skills_checklists = isset($request->skills_checklists)?$request->skills_checklists:$worker->skills_checklists;
                $worker->distance_from_your_home = isset($request->distance_from_your_home)?$request->distance_from_your_home:$worker->distance_from_your_home;
                $worker->eligible_work_in_us = isset($request->eligible_work_in_us)?$request->eligible_work_in_us:$worker->eligible_work_in_us;
                $worker->worked_at_facility_before = isset($request->worked_at_facility_before)?$request->worked_at_facility_before:$worker->worked_at_facility_before;
                $worker->facilities_you_like_to_work_at = isset($request->facilities_you_like_to_work_at)?$request->facilities_you_like_to_work_at:$worker->facilities_you_like_to_work_at;
                $worker->avg_rating_by_facilities = isset($request->avg_rating_by_facilities)?$request->avg_rating_by_facilities:$worker->avg_rating_by_facilities;
                $worker->worker_avg_rating_by_recruiters = isset($request->worker_avg_rating_by_recruiters)?$request->worker_avg_rating_by_recruiters:$worker->worker_avg_rating_by_recruiters;
                // rto means worker time off
                $worker->worker_avg_rating_by_employers = isset($request->worker_avg_rating_by_employers)?$request->worker_avg_rating_by_employers:$worker->worker_avg_rating_by_employers;
                $worker->clinical_setting_you_prefer = isset($request->clinical_setting_you_prefer)?$request->clinical_setting_you_prefer:$worker->clinical_setting_you_prefer;
                
                $worker->worker_patient_ratio = isset($request->worker_patient_ratio)?$request->worker_patient_ratio:$worker->worker_patient_ratio;
                $worker->worker_emr = isset($request->worker_emr)?$request->worker_emr:$worker->worker_emr;
                $worker->worker_unit = isset($request->worker_unit)?$request->worker_unit:$worker->worker_unit;
                $worker->worker_department = isset($request->worker_department)?$request->worker_department:$worker->worker_department;
                $worker->worker_bed_size = isset($request->worker_bed_size)?$request->worker_bed_size:$worker->worker_bed_size;
                $worker->worker_trauma_level = isset($request->worker_trauma_level)?$request->worker_trauma_level:$worker->worker_trauma_level;
                $worker->worker_scrub_color = isset($request->worker_scrub_color)?$request->worker_scrub_color:$worker->worker_scrub_color;
                $worker->worker_facility_city = isset($request->worker_facility_city)?$request->worker_facility_city:$worker->worker_facility_city;
                $worker->worker_facility_state_code = isset($request->worker_facility_state_code)?$request->worker_facility_state_code:$worker->worker_facility_state_code;
                $worker->worker_interview_dates = isset($request->worker_interview_dates)?$request->worker_interview_dates:$worker->worker_interview_dates;
                $worker->worker_start_date = isset($request->worker_start_date)?$request->worker_start_date:$worker->worker_start_date;
                $worker->worker_as_soon_as_posible = isset($request->worker_as_soon_as_posible)?$request->worker_as_soon_as_posible:$worker->worker_as_soon_as_posible;
                $worker->worker_shift_time_of_day = isset($request->worker_shift_time_of_day)?$request->worker_shift_time_of_day:$worker->worker_shift_time_of_day;
                $worker->worker_hours_per_week = isset($request->worker_hours_per_week)?$request->worker_hours_per_week:$worker->worker_hours_per_week;
                $worker->worker_guaranteed_hours = isset($request->worker_guaranteed_hours)?$request->worker_guaranteed_hours:$worker->worker_guaranteed_hours;
                $worker->worker_hours_shift = isset($request->worker_hours_shift)?$request->worker_hours_shift:$worker->worker_hours_shift;
                $worker->worker_weeks_assignment = isset($request->worker_weeks_assignment)?$request->worker_weeks_assignment:$worker->worker_weeks_assignment;
                $worker->worker_shifts_week = isset($request->worker_shifts_week)?$request->worker_shifts_week:$worker->worker_shifts_week;
                $worker->worker_people_you_have_reffered = isset($request->worker_people_you_have_reffered)?$request->worker_people_you_have_reffered:$worker->worker_people_you_have_reffered;
                $worker->worker_referral_bonus = isset($request->worker_referral_bonus)?$request->worker_referral_bonus:$worker->worker_referral_bonus;
                $worker->worker_sign_on_bonus = isset($request->worker_sign_on_bonus)?$request->worker_sign_on_bonus:$worker->worker_sign_on_bonus;
                $worker->worker_completion_bonus = isset($request->worker_completion_bonus)?$request->worker_completion_bonus:$worker->worker_completion_bonus;
                $worker->worker_extension_bonus = isset($request->worker_extension_bonus)?$request->worker_extension_bonus:$worker->worker_extension_bonus;
                $worker->worker_other_bonus = isset($request->worker_other_bonus)?$request->worker_other_bonus:$worker->worker_other_bonus;
                $worker->how_much_k = isset($request->how_much_k)?$request->how_much_k:$worker->how_much_k;
                $worker->worker_health_insurance = isset($request->worker_health_insurance)?$request->worker_health_insurance:$worker->worker_health_insurance;
                $worker->worker_dental = isset($request->worker_dental)?$request->worker_dental:$worker->worker_dental;
                $worker->worker_vision = isset($request->worker_vision)?$request->worker_vision:$worker->worker_vision;
                $worker->worker_actual_hourly_rate = isset($request->worker_actual_hourly_rate)?$request->worker_actual_hourly_rate:$worker->worker_actual_hourly_rate;
                $worker->worker_feels_like_hour = isset($request->worker_feels_like_hour)?$request->worker_feels_like_hour:$worker->worker_feels_like_hour;
                $worker->worker_overtime = isset($request->worker_overtime)?$request->worker_overtime:$worker->worker_overtime;
                $worker->worker_holiday = isset($request->worker_holiday)?$request->worker_holiday:$worker->worker_holiday;
                $worker->worker_on_call = isset($request->worker_on_call)?$request->worker_on_call:$worker->worker_on_call;
                $worker->worker_call_back = isset($request->worker_call_back)?$request->worker_call_back:$worker->worker_call_back;
                $worker->available_position = isset($request->available_position)?$request->available_position:$worker->available_position;
                $worker->float_requirement = isset($request->float_requirement)?$request->float_requirement:$worker->float_requirement;
                $worker->facility_shift_cancelation_policy = isset($request->facility_shift_cancelation_policy)?$request->facility_shift_cancelation_policy:$worker->facility_shift_cancelation_policy;
                $worker->contract_termination_policy = isset($request->contract_termination_policy)?$request->contract_termination_policy:$worker->contract_termination_policy;
                $worker->worker_facility_parent_system = isset($request->worker_facility_parent_system)?$request->worker_facility_parent_system:$worker->worker_facility_parent_system;
                $worker->worker_urgency = isset($request->worker_urgency)?$request->worker_urgency:$worker->worker_urgency;
                $worker->MSP = isset($request->MSP)?$request->MSP:$worker->MSP;
                $worker->VMS = isset($request->VMS)?$request->VMS:$worker->VMS;
                $worker->submission_VMS = isset($request->submission_VMS)?$request->submission_VMS:$worker->submission_VMS;
                $worker->block_scheduling = isset($request->block_scheduling)?$request->block_scheduling:$worker->block_scheduling;
                $worker->worker_orientation_rate = isset($request->worker_orientation_rate)?$request->worker_orientation_rate:$worker->worker_orientation_rate;
                $worker->worker_weekly_taxable_amount = isset($request->worker_weekly_taxable_amount)?$request->worker_weekly_taxable_amount:$worker->worker_weekly_taxable_amount;
                $worker->worker_weekly_non_taxable_amount = isset($request->worker_weekly_non_taxable_amount)?$request->worker_weekly_non_taxable_amount:$worker->worker_weekly_non_taxable_amount;
                $worker->worker_employer_weekly_amount = isset($request->worker_employer_weekly_amount)?$request->worker_employer_weekly_amount:$worker->worker_employer_weekly_amount;
                $worker->worker_goodwork_weekly_amount = isset($request->worker_goodwork_weekly_amount)?$request->worker_goodwork_weekly_amount:$worker->worker_goodwork_weekly_amount;
                $worker->worker_total_employer_amount = isset($request->worker_total_employer_amount)?$request->worker_total_employer_amount:$worker->worker_total_employer_amount;
                $worker->worker_total_goodwork_amount = isset($request->worker_total_goodwork_amount)?$request->worker_total_goodwork_amount:$worker->worker_total_goodwork_amount;
                $worker->worker_total_contract_amount = isset($request->worker_total_contract_amount)?$request->worker_total_contract_amount:$worker->worker_total_contract_amount;
                $worker->worker_goodwork_number = $worker->id;
                
                $record = $worker->save();

                $user_info = USER::where('id', $worker->user_id);
                if(isset($record)){
                    $this->check = "1";
                    $this->message = "Worker record Updated successfully";
                    $this->return_data = $worker; 
                }else{
                    $this->check = "1";
                    $this->message = "Worker record Not uploaded";    
                }
                
            }else{
                $this->check = "1";
                $this->message = "Worker Not Found";
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function recruiterInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'api_key' => 'required',
            'job_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $check_job = Job::where('id', $request->job_id)->first();
            if(isset($check_job) && $check_job['is_hidden'] != 1){
                $worker_info  = Nurse::where('id', $request->worker_id);
            
                if ($worker_info->count() > 0) {
                    $worker = $worker_info->get()->first();
                    $user_info = USER::where('id', $worker->user_id);
                    $offer_check = Offer::where(['nurse_id' => $request->worker_id, 'job_id' => $request->job_id])->first();
                    if(isset($offer_check)){
                        if($user_info->count() > 0){
                            $user = $user_info->get()->first();
                            $worker_name = $user->first_name.' '.$user->last_name;
                            $worker_id = $worker->id;
                            $worker_img = $user->image;
                            $whereCond = [
                                    'facilities.active' => true,
                                    'users.id' => $worker->user_id,
                                    'nurses.id' => $worker->id,
                                    'jobs.id' => $request->job_id
                                ];
        
                            $respond = Nurse::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.nurse_id=nurses.id) as workers_applied"), 'nurses.*', 'jobs.*', 'offers.job_id as job_id', 'offers.id as offer_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'nurses.block_scheduling as worker_block_scheduling', 'nurses.float_requirement as worker_float_requirement', 'nurses.facility_shift_cancelation_policy as worker_facility_shift_cancelation_policy', 'nurses.contract_termination_policy as worker_contract_termination_policy', 'offers.start_date as posted_on', 'jobs.created_at as created_at', 'jobs.recruiter_id as recruiter_id')
                                            ->join('users','users.id', '=', 'nurses.user_id')
                                            ->leftJoin('offers','offers.nurse_id', '=', 'nurses.id')
                                            ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                                            ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                            ->where($whereCond);
                            $job_data = $respond->groupBy('jobs.id')->first();
                            
                            
                            $job_data['worker_block_scheduling'] = $job_data['block_scheduling'];
                            $job_data['worker_float_requirement'] = $job_data['float_requirement'];
                            $job_data['worker_facility_shift_cancelation_policy'] = $job_data['facility_shift_cancelation_policy'];
                            $job_data['worker_contract_termination_policy'] = $job_data['contract_termination_policy'];
                            // print_r($job_data);
                            // die();
                            if(empty($job_data)){
                                $whereCond1 =  [
                                    'facilities.active' => true,
                                    'jobs.id' => $request->job_id,
                                ];
                                // $job_data = $worker;
                                $worker_jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.nurse_id=nurses.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'offers.id as offer_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'offers.start_date as posted_on', 'jobs.created_at as created_at', 'jobs.recruiter_id as recruiter_id')
                                // ->leftJoin('jobs', 'offers.job_id', '=', 'jobs.id')
                                ->leftJoin('offers','offers.job_id', '=', 'jobs.id')
                                ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')
                                ->where($whereCond1)->groupBy('jobs.id')->first();
                                $job_data['jobs_applied'] = $worker_jobs['workers_applied'];
                                $job_data['worker_contract_termination_policy'] = $worker_jobs['contract_termination_policy'];
                                $job_data['job_id'] = $worker_jobs['job_id'];
                                $job_data['facility_name'] = $worker_jobs['facility_name'];
                                $job_data['facility_city'] = $worker_jobs['facility_city'];
                                $job_data['facility_state'] = $worker_jobs['facility_state'];
                                // $job_data['posted_on'] = isset($published['start_date'])?'Posted on '.date('M j Y', strtotime($worker_jobs['posted_on'])):"";
                                $job_data['created_at'] = $worker_jobs['created_at'];
                            }
                            
                            if(isset($job_data['recruiter_id']) && !empty($job_data['recruiter_id'])){
                                $recruiter_info = USER::where('id', $job_data['recruiter_id'])->get()->first();
                                $recruiter_name = $recruiter_info->first_name.' '.$recruiter_info->last_name;
                                $recruiter_id = $recruiter_info->id;
                            }else{
                                $recruiter_name = '';
                                $recruiter_id = '';
                            }
                            $worker_reference = NURSE::select('nurse_references.name','nurse_references.min_title_of_reference','nurse_references.recency_of_reference')
                            ->leftJoin('nurse_references','nurse_references.nurse_id', '=', 'nurses.id')
                            ->where('nurses.id', $worker->id)->get();
        
                            $job = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*')->where('id', $request->job_id)->first();
                            $job_data['posted_on'] = $job_data['created_at'];
                            $worker_reference_name = '';
                            $worker_reference_title ='';
                            $worker_reference_recency_reference ='';
                            
                            foreach($worker_reference as $val){
                                if(!empty($val['name'])){
                                    $worker_reference_name = $val['name'].','.$worker_reference_name;
                                }
                                if(!empty($val['min_title_of_reference'])){
                                    $worker_reference_title = $val['min_title_of_reference'].','.$worker_reference_title;
                                }
                                if(!empty($val['recency_of_reference'])){
                                    $worker_reference_recency_reference = $val['recency_of_reference'].','.$worker_reference_recency_reference;
                                }
                            }
                            
                            // Jobs speciality with experience 
                            $speciality = explode(',',$job['preferred_specialty']);
                            $experiences = explode(',',$job['preferred_experience']);
                            $exp = [];
                            $spe = [];
                            $specialities = [];
                            $i = 0;
                            foreach($speciality as $special){
                                $spe[] = $special;
                                $i++;
                            }
                            foreach($experiences as $experience){
                                $exp[] = $experience;
                            }
                           
                            for($j=0; $j< $i; $j++){
                                $specialities[$j]['spe'] = $spe[$j]; 
                                $specialities[$j]['exp'] = $exp[$j]; 
                            }
        
                            // Worker speciality
                            $worker_speciality = explode(',',$worker->specialty);
                            $worker_experiences = explode(',',$worker->experience);
                            $worker_exp = [];
                            $worker_spe = [];
                            $worker_specialities = [];
                            $i = 0;
                            foreach($speciality as $special){
                                $worker_spe[] = $special;
                                $i++;
                            }
                            foreach($experiences as $experience){
                                $worker_exp[] = $experience;
                            }
                           
                            for($j=0; $j< $i; $j++){
                                $worker_specialities[$j]['spe'] = $worker_spe[$j]; 
                                $worker_specialities[$j]['exp'] = $worker_exp[$j]; 
                            }
        
                            // Worker vaccination
                            $worker_vaccination = json_decode($job_data['worker_vaccination']);
                            $worker_certificate_name = json_decode($job_data['worker_certificate_name']);
                            $worker_certificate = json_decode($job_data['worker_certificate']);
                            $skills_checklists = explode(',', $job_data['skills_checklists']);
                            $i=0;
                            foreach($skills_checklists as $rec)
                            {
                                if(isset($rec) && !empty($rec)){
                                    $skills_checklists[$i] = url('public/images/nurses/skill/'.$rec);
                                    $i++;
                                }
                                
                            }
                            $vacc_image = NurseAsset::where(['filter' => 'vaccination', 'nurse_id' => $worker->id])->get();
                            $cert_image = NurseAsset::where(['filter' => 'certificate', 'nurse_id' => $worker->id])->get();
                            $result = [];
                            
                            $result['jobs_applied'] = isset($job_data['workers_applied'])?$job_data['workers_applied']:"";
                            $result['job_id'] = isset($job['id'])?$job['id']:"";
                            $result['description'] = isset($job_data['description'])?$job_data['description']:"";
                            $result['posted_on'] = isset($job_data['posted_on'])?date('M j Y', strtotime($job_data['posted_on'])):"";
                            $result['type'] = isset($job['type'])?$job['type']:"";
                            $result['terms'] = isset($job['terms'])?$job['terms']:"";
                            $result['job_name'] = isset($job['job_name'])?$job['job_name']:"";
                            $result['total_applied'] = isset($job['jobs_applied'])?$job['jobs_applied']:"";
                            $result['department'] = isset($job['Department'])?$job['Department']:"";
                            $result['worker_name'] = isset($worker_name)?$worker_name:"";
                            $result['worker_image'] = isset($worker_img)?$worker_img:"";
                            $result['worker_id'] = isset($worker_id)?$worker_id:"";
                            $result['recruiter_name'] = $recruiter_name;
                            $result['recruiter_id'] = $recruiter_id;
                            $result['worker_userID'] = isset($worker->user_id)?$worker->user_id:'';
                            $result['offer_id'] = $job_data['offer_id'];
                            if(isset($job_data['worked_at_facility_before']) && ($job_data['worked_at_facility_before'] == 'yes')){
                                $recs = true;
                            }else{
                                $recs = false;
                            }
        
                            if(isset($job_data['license_type']) && ($job_data['license_type'] != null) && ($job_data['profession'] == $job_data['license_type'])){
                                $profession = true;
                            }else{
                                $profession = false;
                            }
                            if(isset($job_data['specialty']) && ($job_data['specialty'] != null) && ($job_data['preferred_specialty'] == $job_data['specialty'])){
                                $speciality = true;
                            }else{
                                $speciality = false;
                            }
                            if(isset($job_data['experience']) && ($job_data['experience'] != null) && ($job_data['preferred_experience'] == $job_data['experience'])){
                                $experience = true;
                            }else{
                                $experience = false;
                            }
                            $countable = explode(',',$worker_reference_name);
                            $num = [];
                            foreach($countable as $rec){
                                if(!empty($rec)){
                                    $num[] = $rec;        
                                }
                            }
                            $countable = count($num);
                            if($job_data['number_of_references'] == $countable){
                                $worker_ref_num = true;
                            }else{
                                $worker_ref_num = false;
                            }
                            $worker_info = [];
                            $worker_vacc = [];
                            $worker_cert = [];
                            $data['worker'] = !empty($job_data['highest_nursing_degree'])?$job_data['highest_nursing_degree']:"-";
                            $data['name'] = 'Profession';
                            $data['worker1'] = !empty($job_data['specialty'])?$job_data['specialty']:"-";
                            $data['name1'] = 'Speciality';
                            $worker_info[] = $data;
        
                            if($job_data['nursing_license_state'] == $job_data['job_location']){ $val = true; }else{ $val = false; }
                            $data['worker'] = !empty($job_data['nursing_license_state'])?$job_data['nursing_license_state']:"-";
                            $data['name'] = 'Professional Licensure';
                            $data['worker1'] = !empty($job_data['experience'])?$job_data['experience']:"-";
                            $data['name1'] = 'Experience';
                            $worker_info[] = $data;

                            $data['worker'] = isset($worker_number_of_references)?$worker_number_of_references:"-";
                            $data['name'] = 'Number Of References';
                            $data['worker1'] = isset($worker_reference_title)?$worker_reference_title:"-";
                            $data['name1'] = 'Min Title Of References';
                            $worker_info[] = $data;
        
                            
                            // $data['worker1'] = isset($job_data['BLS'])?$job_data['BLS']:"-";
                            // $data['name1'] = 'BLS';
                            // $worker_info[] = $data;
        
                            // $data['worker'] = isset($job_data['ACLS'])?$job_data['ACLS']:"-";
                            // $data['name'] = 'ACLS';
                            // $data['worker1'] = isset($job_data['PALS'])?$job_data['PALS']:"-";
                            // $data['name1'] = 'PALS';
                            // $worker_info[] = $data;
        
                            $data['worker'] = isset($worker_reference_recency_reference)?$worker_reference_recency_reference:"-";
                            $data['name'] = 'Recency Of Reference';
                            $data['worker1'] = isset($job_data['skills_checklists'])?$job_data['skills_checklists']:"-";
                            $data['name1'] = 'Skills Checklist';
                            $worker_info[] = $data;
        
                            $data['worker'] = isset($job_data['eligible_work_in_us'])?$job_data['eligible_work_in_us']:"-";
                            $data['name'] = 'Eligible To Work In The US';
                            $data['worker1'] = isset($job_data['worker_urgency'])?$job_data['worker_urgency']:"-";
                            $data['name1'] = 'Urgency';
                            $worker_info[] = $data;
        
        
                            if($job['traveler_distance_from_facility'] == $job_data['distance_from_your_home']){ $val = true; }else{$val = false;}
                            $data['worker'] = isset($job['traveler_distance_from_facility'])?$job['traveler_distance_from_facility']:"-";
                            $data['name'] = 'Traveler Distance from facility';
                            $data['worker1'] = isset($job_data['facilities_you_like_to_work_at'])?$job_data['facilities_you_like_to_work_at']:"-";
                            $data['name1'] = 'Facility';
                            $worker_info[] = $data;
        
                            $data['worker'] = isset($job_data['state'])?$job_data['state']:"-";
                            $data['name'] = 'Location';
                            $data['worker1'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"-";
                            $data['name1'] = 'Shift';
                            $worker_info[] = $data;
        
                            $data['worker'] = isset($job_data['distance_from_your_home'])?$job_data['distance_from_your_home']:"-";
                            $data['name'] = 'Distance from your home';
                            $data['worker1'] = isset($job_data['worked_at_facility_before'])?$job_data['worked_at_facility_before']:"-";
                            $data['name1'] = "Facilities you've worket at";
                            $worker_info[] = $data;
        
                            $data['worker'] = isset($job_data['worker_facility_city'])?$job_data['worker_facility_state_code']:"-";
                            $data['name'] = 'Facility City';
                            $data['worker1'] = isset($job_data['worker_start_date'])?$job_data['worker_start_date']:"-";
                            $data['name1'] = 'Start Date';
                            $worker_info[] = $data;
        
        
                            $data['worker'] = "-";
                            $data['name'] = 'RTO';
                            $data['worker1'] = isset($job_data['worker_shift_time_of_day'])?$job_data['worker_shift_time_of_day']:"-";
                            $data['name1'] = 'Shift Time of Day';
                            $worker_info[] = $data;
        
                            $data['worker'] = isset($job_data['worker_weeks_assignment'])?$job_data['worker_weeks_assignment']:"-";
                            $data['name'] = 'Assignment in weeks';
                            $data['worker1'] = isset($job_data['worker_employer_weekly_amount'])?$job_data['worker_employer_weekly_amount']:"-";
                            $data['name1'] = 'Employer Weekly Amount';
                            $worker_info[] = $data;
        
                            
                            $data['worker'] = isset($job_data['worker_goodwork_number'])?$job_data['worker_goodwork_number']:"-";
                            $data['name'] = 'Goodwork Number';
                            $worker_info[] = $data;
                            
                            $data['worker'] = '';
                            $data['name'] = '';
                            $data['worker1'] = '';
                            $data['name1'] = '';
                            $i = 0;
                            if(isset($worker_vaccination)){
                                foreach($worker_vaccination as $job_vacc)
                                {
                                    $data['worker'] = isset($worker_vaccination[$i])?$worker_vaccination[$i]:"-";
                                    $data['name'] = 'Vaccinations & Immunications '.$worker_vaccination[$i];
                                    $worker_vacc[] = $data;
                                    $i++;
                                }
                            }else{
                                $data['worker'] = '-';
                                $data['name'] = 'Vaccinations & Immunications ';
                                $worker_vacc[] = $data;
                            }
                            

                            $i = 0;
                            if(isset($worker_certificate_name)){
                                foreach($worker_certificate_name as $job_vacc)
                                {
                                    $data['worker'] = isset($worker_certificate_name[$i])?$worker_certificate_name[$i]:"-";
                                    $data['name'] = 'Certification Name';
                                    $worker_cert[] = $data;
                                    $i++;
                                }
                            }else{
                                $data['worker'] = '-';
                                $data['name'] = 'Certification Name';
                                $worker_cert[] = $data;
                            }
        
                            $result['worker_info'] = $worker_info;
                            $result['worker_certificate'] = $worker_cert;
                            $result['worker_vaccination'] = $worker_vacc;
                            
                            $this->check = "1";
                            $this->message = "Matching details listed successfully";
                            $this->return_data = $result;
        
                        }else{
                            $this->check = "1";
                            $this->message = "User Not Found";
                        }
                    }else{
                        $this->check = "1";
                        $this->message = "This worker offer Not Found";
                    }
                    
                    
                }else{
                    $this->check = "1";
                    $this->message = "Worker Not Found";
                }
            }else{
                $this->check = "1";
                $this->message = "Job Not Found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function recruiterAppliedJobs(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'worker_id' => 'required',
            'recruiter_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse_info = NURSE::where('id', $request->worker_id)->first();
            
            $user_info = USER::where('id', $request->recruiter_id);
            if ($user_info->count() > 0) {
                $user = $user_info->get()->first();

                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $user->id,
                    'offers.nurse_id' => $request->worker_id
                ];

                $ret = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*', 'jobs.created_at as posted_on', 'offers.id as offer_id', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->where($whereCond)
                ->orderBy('offers.nurse_id', 'desc');
                $job_data = $ret->get();
                
                $result = [];
                $record = [];
                foreach($job_data as $rec)
                {
                    
                    $result['worker_id'] = $rec['id'];
                    $result['worker_user_id'] = $rec['user_id'];
                    $result['job_id'] = $rec['job_id'];
                    $result['recruiter_id'] = $rec['recruiter_id'];
                    $result['offer_id'] = $rec['offer_id'];
                    $result['job_type'] = isset($rec['job_type'])?$rec['job_type']:"";
                    $result['type'] = isset($rec['type'])?$rec['type']:"";
                    $result['workers_applied'] = isset($rec['workers_applied'])?$rec['workers_applied']:0;
                    $result['posted_on'] = 'Posted on '.date('M j Y', strtotime($rec['posted_on']));
                    $result['job_name'] = isset($rec['job_name'])?$rec['job_name']:"";
                    $result['job_city'] = isset($rec['job_city'])?$rec['job_city'].',':"";
                    $result['job_state'] = isset($rec['job_state'])?$rec['job_state']:"";
                    // $result['job_location'] = isset($rec['job_location'])?$rec['job_location']:"";
                    $result['job_location'] = $result['job_city'].' '.$result['job_state'];
                    $result['preferred_shift'] = isset($rec['preferred_shift'])?$rec['preferred_shift']:"";
                    $result['preferred_assignment_duration'] = isset($rec['preferred_assignment_duration'])?$rec['preferred_assignment_duration']:"";
                    $result['worker_image'] = isset($rec['worker_image'])? url("public/images/nurses/profile/" . $rec['worker_image']):"";
                    $result['worker_name'] = isset($rec['first_name'])?$rec['first_name'].' '.$rec['last_name']:"";
                    $result['facility_name'] = isset($rec['facility_name'])?$rec['facility_name']:"";
                    $result['employer_weekly_amount'] = isset($rec['employer_weekly_amount'])?$rec['employer_weekly_amount']:"";
                    $result['profession'] = isset($rec['profession'])?$rec['profession']:"";
                    $result['specialty'] = isset($rec['preferred_specialty'])?$rec['preferred_specialty']:"";
                    $result['experience'] = isset($rec['preferred_experience'])?$rec['preferred_experience'].' Years of Experience':"";
                    
                    $record[] =  $result;
                }
                $this->check = "1";
                $this->message = "Data listed successfully";
                $this->return_data = $record;
    
            }else{
                $this->check = "1";
                $this->message = "User not found";

            }
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function applicationInfo(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $whereCond = [
                    'facilities.active' => true,
                    'jobs.id' => $request->job_id,
                ];

            $respond = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.*', 'offers.job_id as job_id', 'offers.id as offer_id', 'facilities.name as facility_name', 'facilities.city as facility_city', 'facilities.state as facility_state', 'jobs.created_at as posted_on')
                        ->leftJoin('facilities','jobs.facility_id', '=', 'facilities.id')   
                        ->leftJoin('offers','offers.job_id', '=', 'jobs.id')         
                        ->leftJoin('nurses', 'offers.nurse_id', '=', 'nurses.id')
                        ->leftJoin('users','nurses.user_id', '=', 'users.id')
                        ->where($whereCond);
            $job_data = $respond->groupBy('jobs.id')->first();
            $recruiter_info = User::where('id', $request->recruiter_id)->first();
            
            $result = [];
            $result['jobs_applied'] = isset($job_data['workers_applied'])?$job_data['workers_applied']:"";
            $result['job_id'] = isset($job_data['id'])?$job_data['id']:"";
            $result['description'] = isset($job_data['description'])?$job_data['description']:"";
            // $result['posted_on'] = isset($job_data['posted_on'])?'Posted on '.date('M j Y', strtotime($job_data['posted_on'])):"";
            $result['posted_on'] = isset($job_data['posted_on'])?date('M j', strtotime($job_data['posted_on'])):"";
            $result['type'] = isset($job_data['type'])?$job_data['type']:"";
            $result['terms'] = isset($job_data['terms'])?$job_data['terms']:"";
            $result['job_name'] = isset($job_data['job_name'])?$job_data['job_name']:"";
            $result['total_applied'] = isset($job_data['jobs_applied'])?$job_data['jobs_applied']:"";
            $result['department'] = isset($job_data['Department'])?$job_data['Department']:"";
            $result['recruiter_name'] = $recruiter_info['first_name'].' '.$recruiter_info['last_name'];
            $result['recruiter_id'] = $recruiter_info->id;
            $result['facility_name'] = $job_data['facility_name'];
            $result['offer_id'] = $job_data['offer_id'];
            
            $vaccinations = explode(',',$job_data['vaccinations']);
            $certificates = explode(',',$job_data['certificate']);
            $worker_info = [];

            $data['job'] = !empty($job_data['profession'])?$job_data['profession']:"-";
            $data['name'] = 'Profession';
            $data['job1'] = !empty($job_data['preferred_specialty'])?$job_data['preferred_specialty']:"-";
            $data['name1'] = 'Speciality';
            $worker_info[] = $data;

            $data['job'] = !empty($job_data['job_location'])?$job_data['job_location']:"-";
            $data['name'] = 'Professional Licensure';
            $data['job1'] = !empty($job_data['preferred_experience'])?$job_data['preferred_experience']:"-";
            $data['name1'] = 'Experience';
            $worker_info[] = $data;

            // $data['job'] = isset($vaccinations[0])?$vaccinations[0]:"-";
            // $data['name'] = 'Vaccinations & Immunications Covid';
            // $data['job1'] = isset($vaccinations[1])?$vaccinations[1]:"-";
            // $data['name1'] = 'Vaccinations & Immunications Flu';
            // $worker_info[] = $data;
            
            $data['job'] = isset($job_data['number_of_references'])?$job_data['number_of_references']:"-";
            $data['name'] = 'Number Of References';
            $data['job1'] = isset($job_data['min_title_of_reference'])?$job_data['min_title_of_reference']:"-";
            $data['name1'] = 'Min Title Of References';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['recency_of_reference'])?$job_data['recency_of_reference']:"-";
            $data['name'] = 'Recency Of Reference';
            $data['job1'] = isset($job_data['skills'])?$job_data['skills']:"-";
            $data['name1'] = 'Skills Checklist';
            $worker_info[] = $data;

            // $data['job'] = isset($certificates[1])?$certificates[1]:"-";
            // $data['name'] = 'ACLS';
            // $data['job1'] = isset($certificates[3])?$certificates[3]:"-";
            // $data['name1'] = 'PALS';
            // $worker_info[] = $data;

            // $data['job'] = isset($certificates[2])?$certificates[2]:"-";
            // $data['name'] = 'other';
            

            $data['job'] = isset($job_data['position_available'])?$job_data['position_available']:"-";
            $data['name'] = '# of Positions Available';
            $data['job1'] = isset($job_data['msp'])?$job_data['msp']:"-";
            $data['name1'] = 'MSP';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['vms'])?$job_data['vms']:"-";
            $data['name'] = 'VMS';
            $data['job1'] = isset($job_data['submission_of_vms'])?$job_data['submission_of_vms']:"-";
            $data['name1'] = '# of Submissions in VMS';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['block_scheduling'])?$job_data['block_scheduling']:"-";
            $data['name'] = 'Block Scheduling';
            $data['job1'] = isset($job_data['facility_shift_cancelation_policy'])?$job_data['facility_shift_cancelation_policy']:"-";
            $data['name1'] = 'Facility Shift Cancellation Policy';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['contract_termination_policy'])?$job_data['contract_termination_policy']:"-";
            $data['name'] = 'Contract Termination Policy';
            $data['job1'] = isset($job_data['traveler_distance_from_facility'])?$job_data['traveler_distance_from_facility'].' miles':"-";
            $data['name1'] = 'Traveler Distance From Facility';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['facility_name'])?$job_data['facility_name']:"-";
            $data['name'] = 'Facility';
            $data['job1'] = isset($job_data['facilitys_parent_system'])?$job_data['facilitys_parent_system']:"-";
            $data['name1'] = "Facility's Parent System";
            $worker_info[] = $data;

            $data['job'] = isset($job_data['facility_average_rating'])?$job_data['facility_average_rating']:"-";
            $data['name'] = "Facility Average Rating";
            $data['job1'] = isset($job_data['recruiter_average_rating'])?$job_data['recruiter_average_rating']:"-";
            $data['name1'] = "Recruiter Average Rating";
            $worker_info[] = $data;

            $data['job'] = isset($job_data['employer_average_rating'])?$job_data['employer_average_rating']:"-";
            $data['name'] = "Employer Average Rating";
            $data['job1'] = isset($job_data['clinical_setting'])?$job_data['clinical_setting']:"-";
            $data['name1'] = 'Clinical Setting';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['Patient_ratio'])?$job_data['Patient_ratio']:"-";
            $data['name'] = "Patient ratio";
            $data['job1'] = isset($job_data['emr'])?$job_data['emr']:"-";
            $data['name1'] = 'EMR';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['Unit'])?$job_data['Unit']:"-";
            $data['name'] = "Unit";
            $data['job1'] = isset($job_data['Department'])?$job_data['Department']:"-";
            $data['name1'] = 'Department';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['Bed_Size'])?$job_data['Bed_Size']:"-";
            $data['name'] = "Bed Size";
            $data['job1'] = isset($job_data['Trauma_Level'])?$job_data['Trauma_Level']:"-";
            $data['name1'] = 'Trauma Level';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['scrub_color'])?$job_data['scrub_color']:"-";
            $data['name'] = "Scrub Color";
            $data['job1'] = isset($job_data['facility_city'])?$job_data['facility_city']:"-";
            $data['name1'] = 'Facility City';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['facility_state'])?$job_data['facility_state']:"-";
            $data['name'] = "Facility State Code";
            $data['job1'] = isset($job_data['start_date'])?$job_data['start_date']:"-";
            $data['name1'] = 'Start Date';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['rto'])?$job_data['rto']:"-";
            $data['name'] = "RTO";
            $data['job1'] = isset($job_data['preferred_shift'])?$job_data['preferred_shift']:"-";
            $data['name1'] = 'Shift Time of Day';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['hours_per_week'])?$job_data['hours_per_week']:"-";
            $data['name'] = "Hours/Week";
            $data['job1'] = isset($job_data['guaranteed_hours'])?$job_data['guaranteed_hours']:"-";
            $data['name1'] = 'Guaranteed Hours';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['hours_shift'])?$job_data['hours_shift']:"-";
            $data['name'] = "Hours/Shift";
            $data['job1'] = isset($job_data['preferred_assignment_duration'])?$job_data['preferred_assignment_duration']:"-";
            $data['name1'] = 'Weeks/Assignment';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['weeks_shift'])?$job_data['weeks_shift']:"-";
            $data['name'] = "Shifts/Week";
            $data['job1'] = isset($job_data['referral_bonus'])?$job_data['referral_bonus']:"-";
            $data['name1'] = 'Referral Bonus';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['sign_on_bonus'])?$job_data['sign_on_bonus']:"-";
            $data['name'] = "Sign-On Bonus";
            $data['job1'] = isset($job_data['completion_bonus'])?$job_data['completion_bonus']:"-";
            $data['name1'] = 'Completion Bonus';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['extension_bonus'])?$job_data['extension_bonus']:"-";
            $data['name'] = "Extension Bonus";
            $data['job1'] = isset($job_data['other_bonus'])?$job_data['other_bonus']:"-";
            $data['name1'] = 'Other Bonus';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['four_zero_one_k'])?$job_data['four_zero_one_k']:"-";
            $data['name'] = "401K";
            $data['job1'] = isset($job_data['health_insaurance'])?$job_data['health_insaurance']:"-";
            $data['name1'] = 'Health Insurance';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['dental'])?$job_data['dental']:"-";
            $data['name'] = "Dental";
            $data['job1'] = isset($job_data['vision'])?$job_data['vision']:"-";
            $data['name1'] = 'Vision';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['actual_hourly_rate'])?$job_data['actual_hourly_rate']:"-";
            $data['name'] = "Actual Hourly rate";
            $data['job1'] = isset($job_data['feels_like_per_hour'])?$job_data['feels_like_per_hour']:"-";
            $data['name1'] = 'Feels Like $/hr';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['overtime'])?$job_data['overtime']:"-";
            $data['name'] = "Overtime";
            $data['job1'] = isset($job_data['holiday'])?$job_data['holiday']:"-";
            $data['name1'] = 'Holiday';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['on_call'])?$job_data['on_call']:"-";
            $data['name'] = "On Call";
            $data['job1'] = isset($job_data['call_back'])?$job_data['call_back']:"-";
            $data['name1'] = 'Call Back';
            $worker_info[] = $data;
           
            $data['job'] = isset($job_data['orientation_rate'])?$job_data['orientation_rate']:"-";
            $data['name'] = "Orientation Rate";
            $data['job1'] = isset($job_data['weekly_taxable_amount'])?$job_data['weekly_taxable_amount']:"-";
            $data['name1'] = 'Weekly Taxable amount';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['weekly_non_taxable_amount'])?$job_data['weekly_non_taxable_amount']:"-";
            $data['name'] = "Weekly non-taxable amount";
            $data['job1'] = isset($job_data['employer_weekly_amount'])?$job_data['employer_weekly_amount']:"-";
            $data['name1'] = 'Employer Weekly Amount';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['goodwork_weekly_amount'])?$job_data['goodwork_weekly_amount']:"-";
            $data['name'] = "Goodwork Weekly Amount";
            $data['job1'] = isset($job_data['total_employer_amount'])?$job_data['total_employer_amount']:"-";
            $data['name1'] = 'Total Employer Amount';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['total_goodwork_amount'])?$job_data['total_goodwork_amount']:"-";
            $data['name'] = "Total Goodwork Amount";
            $data['job1'] = isset($job_data['total_contract_amount'])?$job_data['total_contract_amount']:"-";
            $data['name1'] = 'Total Contract Amount';
            $worker_info[] = $data;

            $data['job'] = isset($job_data['id'])?$job_data['id']:"-";
            $data['name'] = "Goodwork Number"; 
            $worker_info[] = $data;

            $data['job1'] ='';
            $data['name1'] ='';
            if(isset($vaccinations) && !empty($vaccinations[0])){
                $i=0;
                foreach($vaccinations as $vacc){
                    $data['job'] = isset($vaccinations[$i])?$vaccinations[$i]:"-";
                    $data['name'] = 'Vaccinations & Immunications '.$vaccinations[$i];
                    $i++;
                    $worker_vacc[] = $data;
                }
            }else{
                $worker_vacc = [];
            }

            if(isset($certificates) && $certificates[0] != ''){
                $i=0;
                foreach($certificates as $vacc){
                    $data['job'] = isset($certificates[$i])?$certificates[$i]:"-";
                    $data['name'] = 'Certification Name';
                    $i++;
                    $worker_cert[] = $data;
                }
            }else{
                $worker_cert = [];
            }
            
            $result['worker_info'] = $worker_info;
            $result['worker_vaccination'] = $worker_vacc;
            $result['worker_certificate'] = $worker_cert;
            
            $this->check = "1";
            $this->message = "Matching details listed successfully";
            $this->return_data = $result;

        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function jobAppliedWorkers(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
                $whereCond = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $request->recruiter_id,
                    'jobs.id' => $request->job_id
                ];

                $ret = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*', 'jobs.created_at as posted_on', 'offers.id as offer_id', 'offers.created_at as offer_created_at', 'users.first_name as first_name', 'users.last_name as last_name', 'users.image as worker_image', 'nurses.*', 'facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->join('nurses', 'offers.nurse_id', '=', 'nurses.id')
                    ->join('users', 'nurses.user_id', '=', 'users.id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->where($whereCond)
                ->orderBy('offers.nurse_id', 'desc');
                $job_data = $ret->get();
                // print_r($job_data);
                // die();
                $whereCond1 = [
                    'facilities.active' => true,
                    'jobs.recruiter_id' => $request->recruiter_id,
                    'jobs.id' => $request->job_id
                ];
                $jobs = Job::select(DB::raw("(SELECT COUNT(id) AS applied_people FROM offers WHERE offers.job_id=jobs.id) as workers_applied"), 'jobs.id as job_id', 'jobs.*', 'jobs.created_at as posted_on', 'offers.id as offer_id', 'offers.created_at as created_at','facilities.name as facility_name')
                    ->join('offers', 'jobs.id', '=', 'offers.job_id')
                    ->Join('facilities', function ($join) {
                            $join->on('facilities.id', '=', 'jobs.facility_id');
                        })
                    ->where($whereCond1)
                ->orderBy('offers.nurse_id', 'desc');
                $job = $jobs->first();

                $recruiter = User::where('id', $request->recruiter_id)->first();
                $result = [];
                $record = [];
                $val = [];

                $record['jobs_applied'] = isset($job['workers_applied'])?$job['workers_applied']:"";
                $record['job_id'] = isset($job['id'])?$job['id']:"";
                $record['description'] = isset($job['description'])?$job['description']:"";
                $record['posted_on'] = isset($job['created_at'])?'Applied '.date('M j', strtotime($job['created_at'])):"";
                $record['type'] = isset($job['type'])?$job['type']:"";
                $record['terms'] = isset($job['terms'])?$job['terms']:"";
                $record['job_name'] = isset($job['job_name'])?$job['job_name']:"";
                $record['total_applied'] = isset($job['jobs_applied'])?$job['jobs_applied']:"";
                $record['department'] = isset($job['Department'])?$job['Department']:"";
                $record['recruiter_name'] = $recruiter['first_name'].' '.$recruiter['last_name'];
                $record['recruiter_id'] = $recruiter['id'];
                $record['facility_name'] = isset($job['facility_name'])?$job['facility_name']:'';
                
                foreach($job_data as $rec)
                {
                    $result['worker_id'] = $rec['id'];
                    $result['worker_user_id'] = $rec['user_id'];
                    $result['job_id'] = $rec['job_id'];
                    $result['recruiter_id'] = $rec['recruiter_id'];
                    $result['offer_id'] = $rec['offer_id'];
                    $result['job_type'] = isset($rec['job_type'])?$rec['job_type']:"";
                    $result['type'] = isset($rec['type'])?$rec['type']:"";
                    $result['workers_applied'] = isset($rec['workers_applied'])?$rec['workers_applied']:0;
                    $result['posted_on'] = 'Applied on '.date('M j Y', strtotime($rec['offer_created_at']));
                    $result['job_name'] = isset($rec['job_name'])?$rec['job_name']:"";
                    $result['job_city'] = isset($rec['job_city'])?$rec['job_city']:"";
                    $result['job_state'] = isset($rec['job_state'])?$rec['job_state']:"";
                    $result['job_location'] = isset($rec['job_location'])?$rec['job_location']:"";
                    $result['preferred_shift'] = isset($rec['preferred_shift'])?$rec['preferred_shift']:"";
                    $result['preferred_assignment_duration'] = isset($rec['preferred_assignment_duration'])?$rec['preferred_assignment_duration']:"";
                    $result['worker_image'] = isset($rec['worker_image'])? url("public/images/nurses/profile/" . $rec['worker_image']):"";
                    $result['worker_name'] = isset($rec['first_name'])?$rec['first_name'].' '.$rec['last_name']:"";
                    $result['facility_name'] = isset($rec['facility_name'])?$rec['facility_name']:"";
                    $result['employer_weekly_amount'] = isset($rec['employer_weekly_amount'])?$rec['employer_weekly_amount']:"";
                    $result['profession'] = isset($rec['profession'])?$rec['profession']:"";
                    $result['specialty'] = isset($rec['preferred_specialty'])?$rec['preferred_specialty']:"";
                    $result['experience'] = isset($rec['preferred_experience'])?$rec['preferred_experience'].' Years of Experience':"";
                    
                    $val[] =  $result;
                }
                $record["worker_info"] = $val;
                $this->check = "1";
                $this->message = "Data listed successfully";
                $this->return_data = $record;
    
                
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function unblockWorker(Request $request)
    {
        
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'api_key' => 'required',
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = Nurse::where('id', $request->worker_id)->first();
            if ($nurse) {   
                $this->check = "1";
                $nurse_deleted = DB::table('blocked_users')->where('worker_id', '=', $request->worker_id)->delete();
                
                if($nurse_deleted){
                    $this->message = "Worker unblocked successfully";
                    $this->return_data = 1;
                }else{
                    $this->message = "Worker not unblocked";
                    $this->return_data = 0;
                }
                
            } else {
                $this->message = "Worker not exists";
                $this->return_data = 0;
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    } 

    public function sendRecordNotification(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'update' => 'required',
            'update_key' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $nurse = Nurse::where('id', $request->worker_id)->first();
            $user = User::where('id', $nurse['user_id'])->first();
            $check = DB::table('ask_worker')->where(['text_field' => $request->update, 'worker_id' => $request->worker_id])->first();
            if(empty($check)){
                
                $notification = Notification::create(['created_by' => $user['id'], 'title' => $request->update, 'job_id' => $request->job_id, 'isAskWorker' => '1', 'text' => 'Please update '.$request->update]);
                $record = DB::table('ask_worker')->insert(['text_field' => $request->update, 'update_key' => $request->update_key, 'worker_id' => $request->worker_id]);
                if($notification){
                    $this->check = "1";
                    $this->message = "Text saved successfully";
                    $this->return_data = $request->update;
                }else{
                    $this->check = "0";
                    $this->message = "Text not saved successfully";
                    $this->return_data = '0';
                }
            }else{
                $this->check = "1";
                $this->message = "Text already saved";
                $this->return_data = '0';
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    } 

    public function pushNotification(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'worker_id' => 'required',
            'api_key' => 'required'
        ]);

        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            // $recuiter = User::where('id', $request->recruiter_id)->first();
            $check = DB::table('ask_worker')->where('worker_id', $request->worker_id)->get();
            if(isset($check)){
                    $this->check = "1";
                    $this->message = "Push Notifiaction listed successfully";
                    $this->return_data = $check;
            }else{
                $this->check = "0";
                $this->message = "No Record Found";
                $this->return_data = '0';
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    } 

    public function getJobKeys(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'job_id' => 'required',
            'api_key' => 'required',
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $return_data = [];
            $jobs = Job::where('id', $request->job_id)->first();

            if (isset($jobs)) {  
                $job_data['job_id'] = $jobs['id'];
                $job_data["job_name"] = isset($jobs['job_name'])?$jobs['job_name']:'';
                $job_data["end_date"] = isset($jobs['end_date'])?$jobs['end_date']:'';
                $job_data["type"] = isset($jobs['type'])?$jobs['type']:'';
                $job_data["compact"] = isset($jobs['compact'])?$jobs['compact']:'';
                $job_data["term"] = isset($jobs['terms'])?$jobs['terms']:'';
                $job_data["profession"] = isset($jobs['profession'])?$jobs['profession']:'';
                $job_data["specialty"] = isset($jobs['preferred_specialty'])?$jobs['preferred_specialty']:'';
                $job_data["experience"] = isset($jobs['preferred_experience'])?$jobs['preferred_experience']:'';
                $job_data["professional_licensure"] = isset($jobs['job_location'])?$jobs['job_location']:'';
                $job_data["vaccinations"] = isset($jobs['vaccinations'])?$jobs['vaccinations']:'';
                $job_data["number_of_references"] = isset($jobs['number_of_references'])?$jobs['number_of_references']:'';
                $job_data["min_title_of_reference"] = isset($jobs['min_title_of_reference'])?$jobs['min_title_of_reference']:'';
                $job_data["recency_of_reference"] = isset($jobs['recency_of_reference'])?$jobs['recency_of_reference']:'';
                $job_data["certificate"] = isset($jobs['certificate'])?$jobs['certificate']:'';
                $job_data["skills_checklist"] = isset($jobs['skills'])?$jobs['skills']:'';
                $job_data["urgency"] = isset($jobs['urgency'])?$jobs['urgency']:'';
                $job_data["position_available"] = isset($jobs['position_available'])?$jobs['position_available']:'';
                $job_data["msp"] = isset($jobs['msp'])?$jobs['msp']:'';
                $job_data["vms"] = isset($jobs['vms'])?$jobs['vms']:'';
                $job_data["submission_of_vms"] = isset($jobs['submission_of_vms'])?$jobs['submission_of_vms']:'';
                $job_data["block_scheduling"] = isset($jobs['block_scheduling'])?$jobs['block_scheduling']:'';
                $job_data["float_requirement"] = isset($jobs['float_requirement'])?$jobs['float_requirement']:'';
                $job_data["facility_shift_cancelation_policy"] = isset($jobs['facility_shift_cancelation_policy'])?$jobs['facility_shift_cancelation_policy']:'';
                $job_data["contract_termination_policy"] = isset($jobs['contract_termination_policy'])?$jobs['contract_termination_policy']:'';
                $job_data["traveler_distance_from_facility"] = isset($jobs['traveler_distance_from_facility'])?$jobs['traveler_distance_from_facility']:'';
                // $job_data["facility"] = isset($jobs['facility'])?$jobs['facility']:'';
                // $job_data["facility_id"] = isset($jobs->facility_id)?$jobs->facility_id:$facility_id;
                $job_data["facility"] = 'Testing Facility';
                $job_data["facility_id"] = "GWf000001";
                
                $job_data["clinical_setting"] = isset($jobs['clinical_setting'])?$jobs['clinical_setting']:'';
                $job_data["Patient_ratio"] = isset($jobs['Patient_ratio'])?$jobs['Patient_ratio']:'';
                $job_data["emr"] = isset($jobs['emr'])?$jobs['emr']:'';
                $job_data["Unit"] = isset($jobs['Unit'])?$jobs['Unit']:'';
                $job_data["Department"] = isset($jobs['Department'])?$jobs['Department']:'';
                $job_data["Bed_Size"] = isset($jobs['Bed_Size'])?$jobs['Bed_Size']:'';
                $job_data["Trauma_Level"] = isset($jobs['Trauma_Level'])?$jobs['Trauma_Level']:'';
                $job_data["scrub_color"] = isset($jobs['scrub_color'])?$jobs['scrub_color']:'';
                $job_data["start_date"] = isset($jobs['start_date'])?$jobs['start_date']:'';
                $job_data["as_soon_as"] = isset($jobs['as_soon_as'])?$jobs['as_soon_as']:'';
                $job_data["rto"] = isset($jobs['rto'])?$jobs['rto']:'';
                $job_data["preferred_shift"] = isset($jobs['preferred_shift'])?$jobs['preferred_shift']:'';
                $job_data["hours_per_week"] = isset($jobs['hours_per_week'])?$jobs['hours_per_week']:'';
                $job_data["guaranteed_hours"] = isset($jobs['guaranteed_hours'])?$jobs['guaranteed_hours']:'';
                $job_data["hours_shift"] = isset($jobs['hours_shift'])?$jobs['hours_shift']:'';
                $job_data["weeks_shift"] = isset($jobs['weeks_shift'])?$jobs['weeks_shift']:'';
                $job_data["preferred_assignment_duration"] = isset($jobs['preferred_assignment_duration'])?$jobs['preferred_assignment_duration']:'';
                $job_data["referral_bonus"] = isset($jobs['referral_bonus'])?$jobs['referral_bonus']:'';
                $job_data["sign_on_bonus"] = isset($jobs['sign_on_bonus'])?$jobs['sign_on_bonus']:'';
                $job_data["completion_bonus"] = isset($jobs['completion_bonus'])?$jobs['completion_bonus']:'';
                $job_data["extension_bonus"] = isset($jobs['extension_bonus'])?$jobs['extension_bonus']:'';
                $job_data["other_bonus"] = isset($jobs['other_bonus'])?$jobs['other_bonus']:'';
                $job_data["four_zero_one_k"] = isset($jobs['four_zero_one_k'])?$jobs['four_zero_one_k']:'';
                $job_data["health_insaurance"] = isset($jobs['health_insaurance'])?$jobs['health_insaurance']:'';
                $job_data["dental"] = isset($jobs['dental'])?$jobs['dental']:'';
                $job_data["vision"] = isset($jobs['vision'])?$jobs['vision']:'';
                $job_data["actual_hourly_rate"] = isset($jobs['actual_hourly_rate'])?$jobs['actual_hourly_rate']:'';
                $job_data["overtime"] = isset($jobs['overtime'])?$jobs['overtime']:'';
                $job_data["holiday"] = isset($jobs['holiday'])?$jobs['holiday']:'';
                $job_data["on_call"] = isset($jobs['on_call'])?$jobs['on_call']:'';
                $job_data["orientation_rate"] = isset($jobs['orientation_rate'])?$jobs['orientation_rate']:'';
                $job_data["weekly_non_taxable_amount"] = isset($jobs['weekly_non_taxable_amount'])?$jobs['weekly_non_taxable_amount']:'';
                $job_data["description"] = isset($jobs['description'])?$jobs['description']:'';
                
                $job_data["facilitys_parent_system"] = isset($jobs['facilitys_parent_system'])?$jobs['facilitys_parent_system']:'';
                $job_data["facility_average_rating"] = isset($jobs['facility_average_rating'])?$jobs['facility_average_rating']:'';
                $job_data["recruiter_average_rating"] = isset($jobs['recruiter_average_rating'])?$jobs['recruiter_average_rating']:'';
                $job_data["employer_average_rating"] = isset($jobs['employer_average_rating'])?$jobs['employer_average_rating']:'';
                $job_data["city"] = isset($jobs['job_city'])?$jobs['job_city']:'';
                $job_data["state"] = isset($jobs['job_state'])?$jobs['job_state']:'';
                $job_data["active"] = isset($jobs['active'])?$jobs['active']:'0';
                $job_data["weekly_taxable_amount"] = $job_data["hours_per_week"]*$job_data["actual_hourly_rate"];
                $job_data["employer_weekly_amount"] = $job_data["weekly_taxable_amount"]+$job_data["weekly_non_taxable_amount"];
                $job_data["goodwork_weekly_amount"] = $job_data["employer_weekly_amount"]*0.05;
                $job_data["total_employer_amount"] = ($job_data["preferred_assignment_duration"]*$job_data["employer_weekly_amount"])+$job_data["sign_on_bonus"]+$job_data["completion_bonus"];
                $job_data["total_goodwork_amount"] = $job_data["preferred_assignment_duration"]*$job_data["goodwork_weekly_amount"];
                $job_data["total_contract_amount"] = $job_data["total_employer_amount"]+$job_data["total_goodwork_amount"];
                $job_data["additional_terms"] = isset($jobs['additional_terms'])?$jobs['additional_terms']:'';
                $job_data['weekly_pay'] = $job_data["employer_weekly_amount"];
                if($job_data["hours_per_week"] == 0){
                    $job_data["feels_like_per_hour"] = 0;
                }else{
                    $job_data["feels_like_per_hour"] = $job_data["employer_weekly_amount"]/$job_data["hours_per_week"];
                }
                
                $this->check = "1";
                $this->message = "Job listed successfully";
                $this->return_data = $job_data;
            } else {
                $this->check = "0";
                $this->message = "Job not found";
                $this->return_data = 0;
            }
        }

        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    } 

    public function removeDraftJob(Request $request)
    {
        if (
            isset($request->recruiter_id) && $request->recruiter_id != "" &&
            isset($request->job_id) && $request->job_id != "" &&
            isset($request->api_key) && $request->api_key != "" 
        ) {
            $user = User::where('id', '=', $request->recruiter_id)->first();

            $product = Job::where('active', '0')->where('id', $request->job_id)->forceDelete();
            if(isset($product)){
                $this->check = "1";
                $this->message = "Draft Job removed successfully";
            }else{
                $this->message = "This Job not deleted";
            }
             
        } else {
            $this->message = $this->param_missing;
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    // Send offer Jobs Work
    public function sendOfferJob(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required',
            'worker_user_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $update_array["job_id"] = isset($request->job_id)?$request->job_id:'';
            $update_array["recruiter_id"] = isset($request->recruiter_id)?$request->recruiter_id:'';
            $update_array["worker_user_id"] = isset($request->worker_user_id)?$request->worker_user_id:'';
            $update_array["job_name"] = isset($request->job_name)?$request->job_name:'';
            $update_array["type"] = isset($request->type)?$request->type:'';
            $update_array["compact"] = isset($request->compact)?$request->compact:'';
            $update_array["terms"] = isset($request->term)?$request->term:'';
            $update_array["profession"] = isset($request->profession)?$request->profession:'';
            $update_array["preferred_specialty"] = isset($request->specialty)?$request->specialty:'';
            $update_array["preferred_experience"] = isset($request->experience)?$request->experience:'';
            $update_array["job_location"] = isset($request->professional_licensure)?$request->professional_licensure:'';
            $update_array["vaccinations"] = isset($request->vaccinations)?$request->vaccinations:'';
            $update_array["number_of_references"] = isset($request->number_of_references)?$request->number_of_references:'';
            $update_array["min_title_of_reference"] = isset($request->min_title_of_reference)?$request->min_title_of_reference:'';
            $update_array["recency_of_reference"] = isset($request->recency_of_reference)?$request->recency_of_reference:'';
            $update_array["certificate"] = isset($request->certificate)?$request->certificate:'';
            $update_array["skills"] = isset($request->skills_checklist)?$request->skills_checklist:'';
            $update_array["urgency"] = isset($request->urgency)?$request->urgency:'';
            $update_array["position_available"] = isset($request->position_available)?$request->position_available:'';
            $update_array["msp"] = isset($request->msp)?$request->msp:'';
            $update_array["vms"] = isset($request->vms)?$request->vms:'';
            $update_array["submission_of_vms"] = isset($request->submission_of_vms)?$request->submission_of_vms:'';
            $update_array["block_scheduling"] = isset($request->block_scheduling)?$request->block_scheduling:'';
            $update_array["float_requirement"] = isset($request->float_requirement)?$request->float_requirement:'';
            $update_array["facility_shift_cancelation_policy"] = isset($request->facility_shift_cancelation_policy)?$request->facility_shift_cancelation_policy:'';
            $update_array["contract_termination_policy"] = isset($request->contract_termination_policy)?$request->contract_termination_policy:'';
            $update_array["traveler_distance_from_facility"] = isset($request->traveler_distance_from_facility)?$request->traveler_distance_from_facility:'';
            $update_array["facility"] = isset($request->facility)?$request->facility:'';
            $update_array["facility_id"] = isset($request->facility_id)?$request->facility_id:'';
            
            $update_array["clinical_setting"] = isset($request->clinical_setting)?$request->clinical_setting:'';
            $update_array["Patient_ratio"] = isset($request->Patient_ratio)?$request->Patient_ratio:'';
            $update_array["emr"] = isset($request->emr)?$request->emr:'';
            $update_array["Unit"] = isset($request->Unit)?$request->Unit:'';
            $update_array["Department"] = isset($request->Department)?$request->Department:'';
            $update_array["Bed_Size"] = isset($request->Bed_Size)?$request->Bed_Size:'';
            $update_array["Trauma_Level"] = isset($request->Trauma_Level)?$request->Trauma_Level:'';
            $update_array["scrub_color"] = isset($request->scrub_color)?$request->scrub_color:'';
            $update_array["start_date"] = isset($request->start_date)?$request->start_date:'';
            $update_array["as_soon_as"] = isset($request->as_soon_as)?$request->as_soon_as:'';
            $update_array["rto"] = isset($request->rto)?$request->rto:'';
            $update_array["preferred_shift"] = isset($request->preferred_shift)?$request->preferred_shift:'';
            $update_array["hours_per_week"] = isset($request->hours_per_week)?$request->hours_per_week:'';
            $update_array["guaranteed_hours"] = isset($request->guaranteed_hours)?$request->guaranteed_hours:'';
            $update_array["hours_shift"] = isset($request->hours_shift)?$request->hours_shift:'';
            $update_array["weeks_shift"] = isset($request->weeks_shift)?$request->weeks_shift:'';
            $update_array["preferred_assignment_duration"] = isset($request->preferred_assignment_duration)?$request->preferred_assignment_duration:'';
            $update_array["referral_bonus"] = isset($request->referral_bonus)?$request->referral_bonus:'';
            $update_array["sign_on_bonus"] = isset($request->sign_on_bonus)?$request->sign_on_bonus:'';
            $update_array["completion_bonus"] = isset($request->completion_bonus)?$request->completion_bonus:'';
            $update_array["extension_bonus"] = isset($request->extension_bonus)?$request->extension_bonus:'';
            $update_array["other_bonus"] = isset($request->other_bonus)?$request->other_bonus:'';
            $update_array["four_zero_one_k"] = isset($request->four_zero_one_k)?$request->four_zero_one_k:'';
            $update_array["health_insaurance"] = isset($request->health_insaurance)?$request->health_insaurance:'';
            $update_array["dental"] = isset($request->dental)?$request->dental:'';
            $update_array["vision"] = isset($request->vision)?$request->vision:'';
            $update_array["actual_hourly_rate"] = isset($request->actual_hourly_rate)?$request->actual_hourly_rate:'';
            $update_array["overtime"] = isset($request->overtime)?$request->overtime:'';
            $update_array["holiday"] = isset($request->holiday)?$request->holiday:'';
            $update_array["on_call"] = isset($request->on_call)?$request->on_call:'';
            $update_array["orientation_rate"] = isset($request->orientation_rate)?$request->orientation_rate:'';
            $update_array["weekly_non_taxable_amount"] = isset($request->weekly_non_taxable_amount)?$request->weekly_non_taxable_amount:'';
            $update_array["description"] = isset($request->description)?$request->description:'';
            $update_array["additional_terms"] = isset($request->additional_terms)?$request->additional_terms:'';

            $update_array["weekly_taxable_amount"] = 0;
            $update_array["employer_weekly_amount"] = 0;
            $update_array["goodwork_weekly_amount"] = 0;
            $update_array["total_employer_amount"] = 0;
            $update_array["total_goodwork_amount"] = 0;
            $update_array["total_contract_amount"] = 0;
            // $update_array["weekly_taxable_amount"] = $update_array["hours_per_week"]*$update_array["actual_hourly_rate"];
            // $update_array["employer_weekly_amount"] = $update_array["weekly_taxable_amount"]+$update_array["weekly_non_taxable_amount"];
            // $update_array["goodwork_weekly_amount"] = $update_array["employer_weekly_amount"]*0.05;
            // $update_array["total_employer_amount"] = ($update_array["preferred_assignment_duration"]*$update_array["employer_weekly_amount"])+$update_array["sign_on_bonus"]+$update_array["completion_bonus"];
            // $update_array["total_goodwork_amount"] = $update_array["preferred_assignment_duration"]*$update_array["goodwork_weekly_amount"];
            // $update_array["total_contract_amount"] = $update_array["total_employer_amount"]+$update_array["total_goodwork_amount"];
            if($update_array["hours_per_week"] == 0){
                $update_array["feels_like_per_hour"] = 0;
            }else{
                $update_array["feels_like_per_hour"] = $update_array["employer_weekly_amount"]/$update_array["hours_per_week"];
            }
            $update_array['weekly_pay'] = $update_array["employer_weekly_amount"];
            $update_array["facilitys_parent_system"] = isset($request->facilitys_parent_system)?$request->facilitys_parent_system:'';
            $update_array["facility_average_rating"] = isset($request->facility_average_rating)?$request->facility_average_rating:'';
            $update_array["recruiter_average_rating"] = isset($request->recruiter_average_rating)?$request->recruiter_average_rating:'';
            $update_array["employer_average_rating"] = isset($request->employer_average_rating)?$request->employer_average_rating:'';
            $update_array["job_city"] = isset($request->city)?$request->city:'';
            $update_array["job_state"] = isset($request->state)?$request->state:'';
            
            $check = DB::table('offer_jobs')->where(['job_id' => $request->job_id, 'worker_user_id' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id])->first();
            if(isset($check))
            {
                // $update_array["active"] = isset($request->active)?$request->active:$check->active;
                $update_array["is_draft"] = isset($request->is_draft)?$request->is_draft:$check->is_draft;
                $update_array["is_counter"] = isset($request->is_counter)?$request->is_counter:'0';
                $job = DB::table('offer_jobs')->where(['job_id' => $request->job_id, 'worker_user_id' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id])->update($update_array);
                if ($job) {
                    $this->check = "1";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Offer update successfully!";
                    }else{
                        $this->message = "Draft offer update successfully!";
                    }
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Offer not update successfully!";
                    }else{
                        $this->message = "Draft offer not update successfully!";
                    }
                }
            }else{
                /* create job */
                // $update_array["active"] = isset($request->active)?$request->active:'';
                $update_array["is_draft"] = isset($request->is_draft)?$request->is_draft:$check->is_draft;
                $update_array["is_counter"] = isset($request->is_counter)?$request->is_counter:'0';
                $update_array["created_by"] = (isset($request->recruiter_id) && $request->recruiter_id != "") ? $request->recruiter_id : "";
                $job = DB::table('offer_jobs')->insert($update_array);
                /* create job */
                if ($job) {
                    $this->check = "1";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Offer send successfully!";
                    }else{
                        $this->message = "Draft offer send successfully!";
                    }
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Offer not send successfully!";
                    }else{
                        $this->message = "Offer send successfully!";
                    }
                    
                }
            }
            if($update_array["is_draft"] == '0'){
                $worker = Nurse::where('user_id', $request->worker_user_id)->first();
                $recruiter_info = User::where('id', $request->recruiter_id)->first();
                $checkOffer = Offer::where(['nurse_id' => $worker->id, 'job_id' => $request->job_id])->first();
                if (isset($checkOffer)) {
                    $offer = Offer::where(['nurse_id' => $worker->id, 'job_id' => $request->job_id])->update(['status' => 'Offered', 'start_date' => date('Y-m-d')]);
                } else {
                    $offer = Offer::create(['nurse_id' => $worker->id, 'created_by' => $worker->id, 'job_id' => $request->job_id,'status' => 'Offered', 'start_date' => date('Y-m-d') ]);
                }
                $offer_status = 'Offered';
                $check_notification = Notification::where(['job_id' => $request->job_id, 'recruiter_id' => $request->recruiter_id, 'isAskWorker' => '0'])->first();
               
                $text = 'Received a Offer for job name- '.$update_array["job_name"].' ('. $request->job_id .') by ';
                if(empty($check_notification)){
                    
                    $check_notification_again = Notification::where(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id, 'recruiter_id' => NULL, 'isAskWorker' => '0'])->first();
                    if(empty($check_notification_again)){
                        $notification = Notification::create(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id, 'recruiter_id' => NULL, 'title' => 'Send Offer', 'text' => $text]);
                    }else{
                        if($update_array["is_draft"] == '0'){
                            $this->message = "Offer update successfully!";
                        }else{
                            $this->message = "Draft offer update successfully!";
                        }
                    }
                }else if(isset($check_notification)){
                    $notification = Notification::where('id', $check_notification->id)->update(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id, 'recruiter_id' => NULL, 'title' => 'Send Offer', 'text' => $text, 'updated_at' => date('Y-m-d h:i:s')]);
                    
                }
            }
            
            
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getOfferJob(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'job_id' => 'required',
                'recruiter_id' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.*')->where(['job_id' => $request->job_id, 'is_draft' => '0', 'offer_jobs.is_counter' => '0', 'worker_user_id' => $request->worker_user_id])->first();
                
                if ($job) {
                    $this->check = "1";
                    $this->message = "Send Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function getOfferJoblist(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.worker_user_id as worker_user_id', 'offer_jobs.is_draft as is_draft', 'offer_jobs.recruiter_id as recruiter_id', 'offer_jobs.is_counter as is_counter', 'nurses.id as worker_id', 'users.first_name as worker_first_name', 'users.last_name as worker_last_name', 'users.image as worker_image', 'jobs.id as job_id', 'jobs.job_name as job_name', 'jobs.profession as profession', 'jobs.preferred_shift as preferred_shift', 'jobs.preferred_specialty as preferred_specialty', 'jobs.preferred_experience as preferred_experience', 'jobs.type as type', 'jobs.job_city as city', 'jobs.job_state as state', 'jobs.preferred_assignment_duration as preferred_assignment_duration', 'jobs.employer_weekly_amount as employer_weekly_amount', 'jobs.created_at as created_at')
                    ->leftJoin('jobs', 'offer_jobs.job_id', 'jobs.id')
                    ->leftJoin('users', 'offer_jobs.worker_user_id', 'users.id')
                    ->leftJoin('nurses', 'users.id', 'nurses.user_id')
                    ->leftJoin('offers', 'offers.nurse_id', 'nurses.id')
                    // ->where(['offer_jobs.is_draft' => '0', 'offer_jobs.is_counter' => '0',  'offer_jobs.worker_user_id' => $request->worker_user_id])
                    ->where(['offers.status' => 'Offered', 'offer_jobs.worker_user_id' => $request->worker_user_id])
                    ->get();
                foreach($job as $rec){
                    $rec->worker_image = isset($rec->worker_image)?url("public/images/nurses/profile/" . $rec->worker_image):'';
                    $rec->preferred_experience = isset($rec->preferred_experience)?$rec->preferred_experience.' Years of Experience':'';
                    $rec->specialty = $rec->preferred_specialty;
                    $rec->experience = $rec->preferred_experience;
                    $rec->created_at_definition = isset($rec->created_at)?date('F d Y', strtotime($rec->created_at)):'';
                }

                if ($job) {
                    $this->check = "1";
                    $this->message = "Send Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function getDraftOfferJob(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'job_id' => 'required',
                'recruiter_id' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.*')->where(['job_id' => $request->job_id, 'is_draft' => '1', 'worker_user_id' => $request->worker_user_id])->first();
                
                if ($job) {
                    $this->check = "1";
                    $this->message = "Send draft Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function workerGetOfferJob(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'job_id' => 'required',
                'recruiter_id' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $this->return_data = [];
                $job = DB::table('offer_jobs')->select('offer_jobs.*')->where(['job_id' => $request->job_id, 'is_draft' => '0', 'worker_user_id' => $request->worker_user_id])->first();
                $job_data = Job::where(['id' => $request->job_id, 'active' => '1', 'is_closed' => '0', 'is_hidden' => '0'])->first();
                $recruiter = USER::where('id', $request->recruiter_id)->first();
                $worker = USER::where('id', $request->worker_user_id)->first();
                $nurse = Nurse::where('user_id', $request->worker_user_id)->first();
                $offer = Offer::where(['nurse_id' => $nurse->id, 'job_id' => $request->job_id])->first();
                if(isset($job_data['facility_id'])){
                    $facility = Facility::where('id', $job_data['facility_id'])->first();
                }
                $facility_name = isset($job_data['facility'])?$job_data['facility']:'';
                $worker_name = isset($worker['fullName'])?$worker['fullName']:'';
                $recruiter_name = isset($recruiter['fullName'])?$recruiter['fullName']:'';
                $result = [];
                $worker_info = [];
                $popup_info = [];
                $result['job_id'] = isset($job_data['id'])?$job_data['id']:"";
                $result['description'] = isset($job_data['description'])?$job_data['description']:"";
                $result['worker_name'] = $worker_name;
                $result['recruiter_name'] = $recruiter_name;
                $result['facility_name'] = $facility_name;
                $result['job_id'] = isset($job_data['id'])?$job_data['id']:'';
                $result['offer_id'] = $offer['id'];
                $result['recruiter_id'] = $request->recruiter_id;
                $result['offer_valid'] = isset($job_data['preferred_assignment_duration'])?$job_data['preferred_assignment_duration'].' Weeks':'';

                if(isset($job)){
                    $popup = [];
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(isset($job->type) && !empty($job->type) && ($job->type != $job_data['type']))
                    {    
                        $popup['name'] = 'Type';      
                        $popup['value'] = $job->type;
                        $jobs["name"] = 'Type';
                        $jobs["job"] = $job->type;
                    }else{
                        $jobs["name"] = 'Type';
                        $jobs["job"] = $job_data['type'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->terms != $job_data['terms']) && isset($job->terms) && !empty($job->terms))
                    {    
                        $popup['name'] = 'Terms';      
                        $popup['value'] = $job->terms;
                        $jobs["name1"] = 'Terms';
                        $jobs["job1"] = $job->terms;
                    }else{
                        $jobs["name1"] = 'Terms';
                        $jobs["job1"] = $job_data['terms'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->profession != $job_data['profession']) && isset($job->profession) && !empty($job->profession))
                    {    
                        $popup['name'] = 'Profession';      
                        $popup['value'] = $job->profession;
                        $jobs["name"] = 'Profession';
                        $jobs["job"] = $job->profession;
                    }else{
                        $jobs["name"] = 'Profession';
                        $jobs["job"] = $job_data['profession'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_specialty != $job_data['preferred_specialty']) && isset($job->preferred_specialty) && !empty($job->preferred_specialty))
                    {    
                        $popup['name'] = 'Specialty';      
                        $popup['value'] = $job->preferred_specialty;
                        $jobs["name1"] = 'Specialty';
                        $jobs["job1"] = $job->preferred_specialty;                        
                    }else{
                        $jobs["name1"] = 'Specialty';
                        $jobs["job1"] = $job_data['preferred_specialty'];
                    }
                    $popup_info[] = $popup;
                    $worker_info[] = $jobs;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    
                    if(($job->compact != $job_data['compact']) && isset($job->compact) && !empty($job->compact))
                    {    
                        $popup['name'] = 'Compact';
                        $popup['value'] = $job->compact;
                        $jobs["compact"] = $job->compact;
                    }else{
                        $jobs["compact"] = $job_data['compact'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_location != $job_data['job_location']) && isset($job->job_location) && !empty($job->job_location))
                    {  
                        $popup['name'] = 'Professional Licensure';
                        $popup['value'] = $job->preferred_experience;
                        $jobs["name"] = 'Professional Licensure';
                        $jobs["job"] = $job->job_location;
                    }else{
                        $jobs["name"] = 'Professional Licensure';
                        $jobs["job"] = $job_data['job_location'].','.$jobs["compact"];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_experience != $job_data['preferred_experience']) && isset($job->preferred_experience) && !empty($job->preferred_experience))
                    {    
                        $popup['name'] = 'Experience';
                        $popup['value'] = $job->preferred_experience;
                        $jobs["name1"] = 'Experience';
                        $jobs["job1"] = $job->preferred_experience;
                    }else{
                        $jobs["name1"] = 'Experience';
                        $jobs["job1"] = $job_data['preferred_experience'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    
                    if(($job->number_of_references != $job_data['number_of_references']) && isset($job->number_of_references) && !empty($job->number_of_references))
                    {    
                        $popup['name'] = 'Number Of References';
                        $popup['value'] = $job->number_of_references;
                        $jobs["name"] = 'Number Of References';
                        $jobs["job"] = $job->number_of_references;
                    }else{
                        $jobs["name"] = 'Number Of References';
                        $jobs["job"] = $job_data['number_of_references'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->min_title_of_reference != $job_data['min_title_of_reference']) && isset($job->min_title_of_reference) && !empty($job->min_title_of_reference))
                    {    
                        $popup['name'] = 'Min Title Of References';
                        $popup['value'] = $job->min_title_of_reference;
                        $jobs["name1"] = 'Min Title Of References';
                        $jobs["job1"] = $job->min_title_of_reference;
                    }else{
                        $jobs["name1"] = 'Min Title Of References';
                        $jobs["job1"] = $job_data['min_title_of_reference'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->recency_of_reference != $job_data['recency_of_reference']) && isset($job->recency_of_reference) && !empty($job->recency_of_reference))
                    {    
                        $popup['name'] = 'Recency Of Reference';
                        $popup['value'] = $job->recency_of_reference;
                        $jobs["name"] = 'Recency Of Reference';
                        $jobs["job"] = $job->recency_of_reference;
                    }else{
                        $jobs["name"] = 'Recency Of Reference';
                        $jobs["job"] = $job_data['recency_of_reference'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->skills != $job_data['skills']) && isset($job->skills) && !empty($job->skills))
                    {    
                        $popup['name'] = 'Skills Checklist';
                        $popup['value'] = $job->skills;
                        $jobs["name1"] = 'Skills Checklist';
                        $jobs["job1"] = $job->skills;
                    }else{
                        $jobs["name1"] = 'Skills Checklist';
                        $jobs["job1"] = $job_data['skills'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->position_available != $job_data['position_available']) && isset($job->position_available) && !empty($job->position_available))
                    {    
                        $popup['name'] = '# Possition Available';
                        $popup['value'] = $job->position_available;
                        $jobs["name"] = '# Possition Available';
                        $jobs["job"] = $job->position_available;
                    }else{
                        $jobs["name"] = '# Possition Available';
                        $jobs["job"] = $job_data['position_available'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->msp != $job_data['msp']) && isset($job->msp) && !empty($job->msp))
                    {  
                        $popup['name'] = 'MSP';
                        $popup['value'] = $job->msp;
                        $jobs["name1"] = 'MSP';
                        $jobs["job1"] = $job->msp;
                    }else{
                        $jobs["name1"] = 'MSP';
                        $jobs["job1"] = $job_data['msp'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->vms != $job_data['vms']) && isset($job->vms) && !empty($job->vms))
                    {    
                        $popup['name'] = 'VMS';
                        $popup['value'] = $job->vms;
                        $jobs["name"] = 'VMS';
                        $jobs["job"] = $job->vms;
                    }else{
                        $jobs["name"] = 'VMS';
                        $jobs["job"] = $job_data['vms'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->submission_of_vms != $job_data['submission_of_vms']) && isset($job->submission_of_vms) && !empty($job->submission_of_vms))
                    {    
                        $popup['name'] = '# of Submission in VMS';
                        $popup['value'] = $job->submission_of_vms;
                        $jobs["name1"] = '# of Submission in VMS';
                        $jobs["job1"] = $job->submission_of_vms;
                    }else{
                        $jobs["name1"] = '# of Submission in VMS';
                        $jobs["job1"] = $job_data['submission_of_vms'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->block_scheduling != $job_data['block_scheduling']) && isset($job->block_scheduling) && !empty($job->block_scheduling))
                    {    
                        $popup['name'] = 'Block Scheduling';
                        $popup['value'] = $job->block_scheduling;
                        $jobs["name"] = 'Block Scheduling';
                        $jobs["job"] = $job->block_scheduling;
                    }else{
                        $jobs["name"] = 'Block Scheduling';
                        $jobs["job"] = $job_data['block_scheduling'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility_shift_cancelation_policy != $job_data['facility_shift_cancelation_policy']) && isset($job->facility_shift_cancelation_policy) && !empty($job->facility_shift_cancelation_policy))
                    {    
                        $popup['name'] = 'Facility Shift Cancelation Policy';
                        $popup['value'] = $job->facility_shift_cancelation_policy;
                        $jobs["name1"] = 'Facility Shift Cancelation Policy';
                        $jobs["job1"] = $job->facility_shift_cancelation_policy;
                    }else{
                        $jobs["name1"] = 'Facility Shift Cancelation Policy';
                        $jobs["job1"] = $job_data['facility_shift_cancelation_policy'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->contract_termination_policy != $job_data['contract_termination_policy']) && isset($job->contract_termination_policy) && !empty($job->contract_termination_policy))
                    {    
                        $popup['name'] = 'Contract Termination Policy';
                        $popup['value'] = $job->contract_termination_policy;
                        $jobs["name"] = 'Contract Termination Policy';
                        $jobs["job"] = $job->contract_termination_policy;
                    }else{
                        $jobs["name"] = 'Contract Termination Policy';
                        $jobs["job"] = $job_data['contract_termination_policy'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->traveler_distance_from_facility != $job_data['traveler_distance_from_facility']) && isset($job->traveler_distance_from_facility) && !empty($job->traveler_distance_from_facility))
                    {    
                        $popup['name'] = 'Traveler Distance From Facility';
                        $popup['value'] = $job->traveler_distance_from_facility;
                        $jobs["name1"] = 'Traveler Distance From Facility';
                        $jobs["job1"] = $job->traveler_distance_from_facility;
                    }else{
                        $jobs["name1"] = 'Traveler Distance From Facility';
                        $jobs["job1"] = $job_data['traveler_distance_from_facility'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility != $job_data['facility']) && isset($job->facility) && !empty($job->facility))
                    {    
                        $popup['name'] = 'Facility';
                        $popup['value'] = $job->facility;
                        $jobs["name"] = 'Facility';
                        $jobs["job"] = $job->facility;
                    }else{
                        $jobs["name"] = 'Facility';
                        $jobs["job"] = $job_data['facility'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facilitys_parent_system != $job_data['facilitys_parent_system']) && isset($job->facilitys_parent_system) && !empty($job->facilitys_parent_system))
                    {    
                        $popup['name'] = "Facility's Parent System";
                        $popup['value'] = $job->facilitys_parent_system;
                        $jobs["name1"] = "Facility's Parent System";
                        $jobs["job1"] = $job->facilitys_parent_system;
                    }else{
                        $jobs["name1"] = "Facility's Parent System";
                        $jobs["job1"] = $job_data['facilitys_parent_system'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility_average_rating != $job_data['facility_average_rating']) && isset($job->facility_average_rating) && !empty($job->facility_average_rating))
                    {    
                        $popup['name'] = "Facility Average Rating";
                        $popup['value'] = $job->facility_average_rating;
                        $jobs["name"] = "Facility Average Rating";
                        $jobs["job"] = $job->facility_average_rating;
                    }else{
                        $jobs["name"] = "Facility Average Rating";
                        $jobs["job"] = $job_data['facility_average_rating'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->recruiter_average_rating != $job_data['recruiter_average_rating']) && isset($job->recruiter_average_rating) && !empty($job->recruiter_average_rating))
                    {    
                        $popup['name'] = "Recruiter Average Rating";
                        $popup['value'] = $job->recruiter_average_rating;
                        $jobs["name1"] = "Recruiter Average Rating";
                        $jobs["job1"] = isset($job->recruiter_average_rating)?$job->recruiter_average_rating:'';
                    }else{
                        $jobs["name1"] = "Recruiter Average Rating";
                        $jobs["job1"] = isset($job_data['recruiter_average_rating'])?$job_data['recruiter_average_rating']:'';
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->employer_average_rating != $job_data['employer_average_rating']) && isset($job->employer_average_rating) && !empty($job->employer_average_rating))
                    {    
                        $popup['name'] = "Employer Average Rating";
                        $popup['value'] = $job->employer_average_rating;
                        $jobs["name"] = "Employer Average Rating";
                        $jobs["job"] = isset($job->employer_average_rating)?$job->employer_average_rating:'';
                    }else{
                        $jobs["name"] = "Employer Average Rating";
                        $jobs["job"] = isset($job_data['employer_average_rating'])?$job_data['employer_average_rating']:'';
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->clinical_setting != $job_data['clinical_setting']) && isset($job->clinical_setting) && !empty($job->clinical_setting))
                    {    
                        $popup['name'] = "Clinical Setting";
                        $popup['value'] = $job->clinical_setting;
                        $jobs["name1"] = "Clinical Setting";
                        $jobs["job1"] = $job->clinical_setting;
                    }else{
                        $jobs["name1"] = "Clinical Setting";
                        $jobs["job1"] = $job_data['clinical_setting'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Patient_ratio != $job_data['Patient_ratio']) && isset($job->Patient_ratio) && !empty($job->Patient_ratio))
                    {    
                        $popup['name'] = "Patient Ratio";
                        $popup['value'] = $job->Patient_ratio;
                        $jobs["name"] = "Patient Ratio";
                        $jobs["job"] = $job->Patient_ratio;
                    }else{
                        $jobs["name1"] = "Patient Ratio";
                        $jobs["job"] = $job_data['Patient_ratio'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->emr != $job_data['emr']) && isset($job->emr) && !empty($job->emr))
                    {    
                        $popup['name'] = "EMR";
                        $popup['value'] = $job->emr;
                        $jobs["name1"] = "EMR";
                        $jobs["job1"] = $job->emr;
                    }else{
                        $jobs["name1"] = "EMR";
                        $jobs["job1"] = $job_data['emr'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Unit != $job_data['Unit']) && isset($job->Unit) && !empty($job->Unit))
                    {    
                        $popup['name'] = "Unit";
                        $popup['value'] = $job->Unit;
                        $jobs["name"] = "Unit";
                        $jobs["job"] = $job->Unit;
                    }else{
                        $jobs["name"] = "Unit";
                        $jobs["job"] = $job_data['Unit'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Department != $job_data['Department']) && isset($job->Department) && !empty($job->Department))
                    {    
                        $popup['name'] = "Department";
                        $popup['value'] = $job->Department;
                        $jobs["name1"] = "Department";
                        $jobs["job1"] = $job->Department;
                    }else{
                        $jobs["name1"] = "Department";
                        $jobs["job1"] = $job_data['Department'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Bed_Size != $job_data['Bed_Size']) && isset($job->Bed_Size) && !empty($job->Bed_Size))
                    {    
                        $popup['name'] = "Bed Size";
                        $popup['value'] = $job->Bed_Size;
                        $jobs["name"] = "Bed Size";
                        $jobs["job"] = $job->Bed_Size;
                    }else{
                        $jobs["name"] = "Bed Size";
                        $jobs["job"] = $job_data['Bed_Size'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Trauma_Level != $job_data['Trauma_Level']) && isset($job->Trauma_Level) && !empty($job->Trauma_Level))
                    {    
                        $popup['name'] = "Trauma Level";
                        $popup['value'] = $job->Trauma_Level;
                        $jobs["name1"] = "Trauma Level";
                        $jobs["job1"] = $job->Trauma_Level;
                    }else{
                        $jobs["name1"] = "Trauma Level";
                        $jobs["job1"] = $job_data['Trauma_Level'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->scrub_color != $job_data['scrub_color']) && isset($job->scrub_color) && !empty($job->scrub_color))
                    {    
                        $popup['name'] = "Scrub Color";
                        $popup['value'] = $job->scrub_color;
                        $jobs["name"] = "Scrub Color";
                        $jobs["job"] = $job->scrub_color;
                    }else{
                        $jobs["name"] = "Scrub Color";
                        $jobs["job"] = $job_data['scrub_color'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_city != $job_data['job_city']) && isset($job->job_city) && !empty($job->job_city))
                    {    
                        $popup['name'] = "Facility City";
                        $popup['value'] = $job->job_city;
                        $jobs["name1"] = "Facility City";
                        $jobs["job1"] = $job->job_city;
                    }else{
                        $jobs["name1"] = "Facility City";
                        $jobs["job1"] = $job_data['job_city'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_state != $job_data['job_state']) && isset($job->job_state) && !empty($job->job_state))
                    {    
                        $popup['name'] = "Facility State Code";
                        $popup['value'] = $job->job_state;
                        $jobs["name1"] = "Facility State Code";
                        $jobs["job1"] = $job->job_state;
                    }else{
                        $jobs["name1"] = "Facility State Code";
                        $jobs["job1"] = $job_data['job_state'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->start_date != $job_data['start_date']) && isset($job->start_date) && !empty($job->start_date))
                    {    
                        $popup['name'] = "Start Date";
                        $popup['value'] = $job->start_date;
                        $jobs["name1"] = "Start Date";
                        $jobs["job1"] = $job->start_date;
                    }else{
                        $jobs["name1"] = "Start Date";
                        $jobs["job1"] = $job_data['start_date'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->rto != $job_data['rto']) && isset($job->rto) && !empty($job->rto))
                    {    
                        $popup['name'] = "RTO";
                        $popup['value'] = $job->rto;
                        $jobs["name"] = "RTO";
                        $jobs["job"] = $job->rto;
                    }else{
                        $jobs["name"] = "RTO";
                        $jobs["job"] = $job_data['rto'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_shift != $job_data['preferred_shift']) && isset($job->preferred_shift) && !empty($job->preferred_shift))
                    {    
                        $popup['name'] = "Shift Time Of Day";
                        $popup['value'] = $job->preferred_shift;
                        $jobs["name1"] = "Shift Time Of Day";
                        $jobs["job1"] = $job->preferred_shift;
                    }else{
                        $jobs["name1"] = "Shift Time Of Day";
                        $jobs["job1"] = $job_data['preferred_shift'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->hours_per_week != $job_data['hours_per_week']) && isset($job->hours_per_week) && !empty($job->hours_per_week))
                    {    
                        $popup['name'] = "Hours/Week";
                        $popup['value'] = $job->hours_per_week;
                        $jobs["name"] = "Hours/Week";
                        $jobs["job"] = $job->hours_per_week;
                    }else{
                        $jobs["name"] = "Hours/Week";
                        $jobs["job"] = $job_data['hours_per_week'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->guaranteed_hours != $job_data['guaranteed_hours']) && isset($job->guaranteed_hours) && !empty($job->guaranteed_hours))
                    {    
                        $popup['name'] = "Gauranteed Hours";
                        $popup['value'] = $job->guaranteed_hours;
                        $jobs["name1"] = "Gauranteed Hours";
                        $jobs["job1"] = $job->guaranteed_hours;
                    }else{
                        $jobs["name1"] = "Gauranteed Hours";
                        $jobs["job1"] = $job_data['guaranteed_hours'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->hours_shift != $job_data['hours_shift']) && isset($job->hours_shift) && !empty($job->hours_shift))
                    {    
                        $popup['name'] = "Hours/Shift";
                        $popup['value'] = $job->hours_shift;
                        $jobs["name"] = "Hours/Shift";
                        $jobs["job"] = $job->hours_shift;
                    }else{
                        $jobs["name"] = "Hours/Shift";
                        $jobs["job"] = $job_data['hours_shift'];
                    }
                    if(($job->preferred_assignment_duration != $job_data['preferred_assignment_duration']) && isset($job->preferred_assignment_duration) && !empty($job->preferred_assignment_duration))
                    {    
                        $popup['name'] = "Weeks/Assignment";
                        $popup['value'] = $job->preferred_assignment_duration;
                        $jobs["name1"] = "Weeks/Assignment";
                        $jobs["job1"] = $job->preferred_assignment_duration;
                    }else{
                        $jobs["name1"] = "Weeks/Assignment";
                        $jobs["job1"] = $job_data['preferred_assignment_duration'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weeks_shift != $job_data['weeks_shift']) && isset($job->weeks_shift) && !empty($job->weeks_shift))
                    {    
                        $popup['name'] = "Shifts/Week";
                        $popup['value'] = $job->weeks_shift;
                        $jobs["name"] = "Shifts/Week";
                        $jobs["job"] = $job->weeks_shift;
                    }else{
                        $jobs["name"] = "Shifts/Week";
                        $jobs["job"] = $job_data['weeks_shift'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->referral_bonus != $job_data['referral_bonus']) && isset($job->referral_bonus) && !empty($job->referral_bonus))
                    {    
                        $popup['name'] = "Referral Bonus";
                        $popup['value'] = $job->referral_bonus;
                        $jobs["name1"] = "Referral Bonus";
                        $jobs["job1"] = $job->referral_bonus;
                    }else{
                        $jobs["name1"] = "Referral Bonus";
                        $jobs["job1"] = $job_data['referral_bonus'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->sign_on_bonus != $job_data['sign_on_bonus']) && isset($job->sign_on_bonus) && !empty($job->sign_on_bonus))
                    {    
                        $popup['name'] = "Sign-On Bonus";
                        $popup['value'] = $job->sign_on_bonus;
                        $jobs["name"] = "Sign-On Bonus";
                        $jobs["job"] = $job->sign_on_bonus;
                    }else{
                        $jobs["name"] = "Sign-On Bonus";
                        $jobs["job"] = $job_data['sign_on_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->completion_bonus != $job_data['completion_bonus']) && isset($job->completion_bonus) && !empty($job->completion_bonus))
                    {    
                        $popup['name'] = "Completion Bonus";
                        $popup['value'] = $job->completion_bonus;
                        $jobs["name1"] = "Completion Bonus";
                        $jobs["job1"] = $job->completion_bonus;
                    }else{
                        $jobs["name1"] = "Completion Bonus";
                        $jobs["job1"] = $job_data['completion_bonus'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->extension_bonus != $job_data['extension_bonus']) && isset($job->extension_bonus) && !empty($job->extension_bonus))
                    {    
                        $popup['name'] = "Extension Bonus";
                        $popup['value'] = $job->extension_bonus;
                        $jobs["name"] = "Extension Bonus";
                        $jobs["job"] = $job->extension_bonus;
                    }else{
                        $jobs["name"] = "Extension Bonus";
                        $jobs["job"] = $job_data['extension_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->other_bonus != $job_data['other_bonus']) && isset($job->other_bonus) && !empty($job->other_bonus))
                    {    
                        $popup['name'] = "Other Bonus";
                        $popup['value'] = $job->other_bonus;
                        $jobs["name1"] = "Other Bonus";
                        $jobs["job1"] = $job->other_bonus;
                    }else{
                        $jobs["name1"] = "Other Bonus";
                        $jobs["job1"] = $job_data['other_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';

                    if(($job->four_zero_one_k != $job_data['four_zero_one_k']) && isset($job->four_zero_one_k) && !empty($job->four_zero_one_k))
                    {    
                        $popup['name'] = "401K";
                        $popup['value'] = $job->four_zero_one_k;
                        $jobs["name"] = "401K";
                        $jobs["job"] = $job->four_zero_one_k;
                    }else{
                        $jobs["name"] = "401K";
                        $jobs["job"] = $job_data['four_zero_one_k'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->health_insaurance != $job_data['health_insaurance']) && isset($job->health_insaurance) && !empty($job->health_insaurance))
                    {    
                        $popup['name'] = "Health Insaurance";
                        $popup['value'] = $job->health_insaurance;
                        $jobs["name1"] = "Health Insaurance";
                        $jobs["job1"] = $job->health_insaurance;
                    }else{
                        $jobs["name1"] = "Health Insaurance";
                        $jobs["job1"] = $job_data['health_insaurance'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->dental != $job_data['dental']) && isset($job->dental) && !empty($job->dental))
                    {    
                        $popup['name'] = "Dental";
                        $popup['value'] = $job->dental;
                        $jobs["name"] = "Dental";
                        $jobs["job"] = $job->dental;
                    }else{
                        $jobs["name"] = "Dental";
                        $jobs["job"] = $job_data['dental'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->vision != $job_data['vision']) && isset($job->vision) && !empty($job->vision))
                    {   
                        $popup['name'] = "Vision";
                        $popup['value'] = $job->vision;
                        $jobs["name1"] = "Vision";
                        $jobs["job1"] = $job->vision; 
                    }else{
                        $jobs["name1"] = "Vision";
                        $jobs["job1"] = $job_data['vision'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->actual_hourly_rate != $job_data['actual_hourly_rate']) && isset($job->actual_hourly_rate) && !empty($job->actual_hourly_rate))
                    {    
                        $popup['name'] = "Actual Hourly Rate";
                        $popup['value'] = $job->actual_hourly_rate;
                        $jobs["name"] = "Actual Hourly Rate";
                        $jobs["job"] = $job->actual_hourly_rate;
                    }else{
                        $jobs["name"] = "Actual Hourly Rate";
                        $jobs["job"] = $job_data['actual_hourly_rate'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->feels_like_per_hour != $job_data['feels_like_per_hour']) && isset($job->feels_like_per_hour) && !empty($job->feels_like_per_hour))
                    {    
                        $popup['name'] = "Feels Like $/hr";
                        $popup['value'] = $job->feels_like_per_hour;
                        $jobs["name1"] = "Feels Like $/hr";
                        $jobs["job1"] = $job->feels_like_per_hour;
                    }else{
                        $jobs["name1"] = "Feels Like $/hr";
                        $jobs["job1"] = $job_data['feels_like_per_hour'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->overtime != $job_data['overtime']) && isset($job->overtime) && !empty($job->overtime))
                    {    
                        $popup['name'] = "Overtime";
                        $popup['value'] = $job->overtime;
                        $jobs["name"] = "Overtime";
                        $jobs["job"] = $job->overtime;
                    }else{
                        $jobs["name"] = "Overtime";
                        $jobs["job"] = $job_data['overtime'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->holiday != $job_data['holiday']) && isset($job->holiday) && !empty($job->holiday))
                    {    
                        $popup['name'] = "Holiday";
                        $popup['value'] = $job->holiday;
                        $jobs["name1"] = "Holiday";
                        $jobs["job1"] = $job->holiday;
                    }else{
                        $jobs["name1"] = "Holiday";
                        $jobs["job1"] = $job_data['holiday'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->on_call != $job_data['on_call']) && isset($job->on_call) && !empty($job->on_call))
                    {    
                        $popup['name'] = "On Call";
                        $popup['value'] = $job->on_call;
                        $jobs["name"] = "On Call";
                        $jobs["job"] = $job->on_call;
                    }else{
                        $jobs["name"] = "On Call";
                        $jobs["job"] = $job_data['on_call'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->call_back != $job_data['call_back']) && isset($job->call_back) && !empty($job->call_back))
                    {    
                        $popup['name'] = "Call Back";
                        $popup['value'] = $job->call_back;
                        $jobs["name1"] = "Call Back";
                        $jobs["job1"] = $job->call_back;
                    }else{
                        $jobs["name1"] = "Call Back";
                        $jobs["job1"] = $job_data['call_back'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->orientation_rate != $job_data['orientation_rate']) && isset($job->orientation_rate) && !empty($job->orientation_rate))
                    {    
                        $popup['name'] = "Orientation Rate";
                        $popup['value'] = $job->orientation_rate;
                        $jobs["name"] = "Orientation Rate";
                        $jobs["job"] = $job->orientation_rate;
                    }else{
                        $jobs["name"] = "Orientation Rate";
                        $jobs["job"] = $job_data['orientation_rate'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weekly_taxable_amount != $job_data['weekly_taxable_amount']) && isset($job->weekly_taxable_amount) && !empty($job->weekly_taxable_amount))
                    {    
                        $popup['name'] = "Weekly Taxable Amount";
                        $popup['value'] = $job->weekly_taxable_amount;
                        $jobs["name1"] = "Weekly Taxable Amount";
                        $jobs["job1"] = $job->weekly_taxable_amount;
                    }else{
                        $jobs["name1"] = "Weekly Taxable Amount";
                        $jobs["job1"] = $job_data['weekly_taxable_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weekly_non_taxable_amount != $job_data['weekly_non_taxable_amount']) && isset($job->weekly_non_taxable_amount) && !empty($job->weekly_non_taxable_amount))
                    {    
                        $popup['name'] = "Weekly Non Taxable Amount";
                        $popup['value'] = $job->weekly_non_taxable_amount;
                        $jobs["name"] = "Weekly Non Taxable Amount";
                        $jobs["job"] = $job->weekly_non_taxable_amount;
                    }else{
                        $jobs["name"] = "Weekly Non Taxable Amount";
                        $jobs["job"] = $job_data['weekly_non_taxable_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->employer_weekly_amount != $job_data['employer_weekly_amount']) && isset($job->employer_weekly_amount) && !empty($job->employer_weekly_amount))
                    {    
                        $popup['name'] = "Employer Weekly Amount";
                        $popup['value'] = $job->employer_weekly_amount;
                        $jobs["name1"] = "Employer Weekly Amount";
                        $jobs["job1"] = $job->employer_weekly_amount;
                    }else{
                        $jobs["name1"] = "Employer Weekly Amount";
                        $jobs["job1"] = $job_data['employer_weekly_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->goodwork_weekly_amount != $job_data['goodwork_weekly_amount']) && isset($job->goodwork_weekly_amount) && !empty($job->goodwork_weekly_amount))
                    {    
                        $popup['name'] = "Goodwork Weekly Amount";
                        $popup['value'] = $job->goodwork_weekly_amount;
                        $jobs["name"] = "Goodwork Weekly Amount";
                        $jobs["job"] = $job->goodwork_weekly_amount;
                    }else{
                        $jobs["name"] = "Goodwork Weekly Amount";
                        $jobs["job"] = $job_data['goodwork_weekly_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_employer_amount != $job_data['total_employer_amount']) && isset($job->total_employer_amount) && !empty($job->total_employer_amount))
                    {    
                        $popup['name'] = "Total Employer Amount";
                        $popup['value'] = $job->total_employer_amount;
                        $jobs["name1"] = "Total Employer Amount";
                        $jobs["job1"] = $job->total_employer_amount;
                    }else{
                        $jobs["name1"] = "Total Employer Amount";
                        $jobs["job1"] = $job_data['total_employer_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_goodwork_amount != $job_data['total_goodwork_amount']) && isset($job->total_goodwork_amount) && !empty($job->total_goodwork_amount))
                    {    
                        $popup['name'] = "Total Goodwork Amount";
                        $popup['value'] = $job->total_goodwork_amount;
                        $jobs["name"] = "Total Goodwork Amount";
                        $jobs["job"] = $job->total_goodwork_amount;
                    }else{
                        $jobs["name"] = "Total Goodwork Amount";
                        $jobs["job"] = $job_data['total_goodwork_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_contract_amount != $job_data['total_contract_amount']) && isset($job->total_contract_amount) && !empty($job->total_contract_amount))
                    {    
                        $popup['name'] = "Total Contract Amount";
                        $popup['value'] = $job->total_contract_amount;
                        $jobs["name1"] = "Total Contract Amount";
                        $jobs["job1"] = $job->total_contract_amount;
                    }else{
                        $jobs["name1"] = "Total Contract Amount";
                        $jobs["job1"] = $job_data['total_contract_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                
                    if(($job->goodwork_number != $job_data['goodwork_number']) && isset($job->goodwork_number) && !empty($job->goodwork_number))
                    {    
                        $popup['name'] = "Goodwork Number";
                        $popup['value'] = $job->goodwork_number;
                        $jobs["name"] = "Goodwork Number";
                        $jobs["job"] = $job->goodwork_number;
                    }else{
                        $jobs["name"] = "Goodwork Number";
                        $jobs["job"] = $job_data['goodwork_number'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(isset($job->additional_terms) && !empty($job->additional_terms))
                    {    
                        $popup['name'] = "Additional Terms";
                        $popup['value'] = $job->additional_terms;
                        $jobs["name1"] = "Additional Terms";
                        $jobs["job1"] = $job->additional_terms;
                    }else{
                        $jobs["name1"] = "Additional Terms";
                        $jobs["job1"] = "";
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    $jobs["name1"] = '';
                    $jobs["job1"] = '';
                    if(($job->vaccinations != $job_data['vaccinations']) && isset($job->vaccinations) && !empty($job->vaccinations))
                    {    
                        $popup['name'] = 'Vaccinations & Immunizations';
                        $popup['value'] = $job->vaccinations;
                        $jod_details = explode(',', $job->vaccinations);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Vaccinations & Immunizations';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }else{
                        $jod_details = explode(',', $job_data['vaccinations']);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Vaccinations & Immunizations';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';

                    if(($job->certificate != $job_data['certificate']) && isset($job->certificate) && !empty($job->certificate))
                    {    
                        $popup['name'] = 'Certification';
                        $popup['value'] = $job->certificate;
                        $jod_details = explode(',', $job->certificate);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Certification';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }else{
                        $jod_details = explode(',', $job_data['certificate']);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Certification';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }
                    $popup_info[] = $popup;
                    $result['worker_info'] = $worker_info;
                    $result['popup_info'] = $popup_info;

                    $this->check = "1";
                    $this->message = "Get send Offer listed successfully";
                    $this->return_data = $result;
                } else {
                    $this->check = "1";
                    $this->message = "Get Send Offer Job Not Found";
                }
                
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function getDraftOfferedJoblist(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'recruiter_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.worker_user_id as worker_user_id', 'nurses.id as worker_id', 'users.first_name as worker_first_name', 'users.last_name as worker_last_name', 'users.image as worker_image', 'jobs.id as job_id', 'jobs.profession as profession', 'jobs.preferred_shift as preferred_shift', 'jobs.preferred_specialty as preferred_specialty', 'jobs.preferred_experience as preferred_experience')
                    ->leftJoin('jobs', 'offer_jobs.job_id', 'jobs.id')
                    ->leftJoin('users', 'offer_jobs.worker_user_id', 'users.id')
                    ->leftJoin('nurses', 'users.id', 'nurses.user_id')
                    ->where(['offer_jobs.is_draft' => '1', 'offer_jobs.recruiter_id' => $request->recruiter_id])
                    ->get();
                    $recrod = [];
                foreach($job as $rec){
                    $rec->worker_image = isset($rec->worker_image)?url("public/images/nurses/profile/" . $rec->worker_image):'';
                    $rec->preferred_experience = isset($rec->preferred_experience)?$rec->preferred_experience.' Years of Experience':'';
                    $rec->specialty = $rec->preferred_specialty;
                    $rec->experience = $rec->preferred_experience;
                    $rec->worker_name = $rec->worker_first_name.' '.$rec->worker_last_name;

                }

                if ($job) {
                    $this->check = "1";
                    $this->message = "Draft send Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function getDraftCounterOfferedJoblist(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'worker_user_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.worker_user_id as worker_user_id', 'nurses.id as worker_id', 'users.first_name as worker_first_name', 'users.last_name as worker_last_name', 'users.image as worker_image', 'jobs.id as job_id', 'jobs.profession as profession', 'jobs.preferred_shift as preferred_shift', 'jobs.preferred_specialty as preferred_specialty', 'jobs.preferred_experience as preferred_experience')
                    ->leftJoin('jobs', 'offer_jobs.job_id', 'jobs.id')
                    ->leftJoin('users', 'offer_jobs.worker_user_id', 'users.id')
                    ->leftJoin('nurses', 'users.id', 'nurses.user_id')
                    ->where(['offer_jobs.is_draft' => '1', 'offer_jobs.worker_user_id' => $request->worker_user_id])
                    ->get();
                foreach($job as $rec){
                    $rec->worker_image = isset($rec->worker_image)?url("public/images/nurses/profile/" . $rec->worker_image):'';
                    $rec->preferred_experience = isset($rec->preferred_experience)?$rec->preferred_experience.' Years of Experience':'';
                    $rec->specialty = $rec->preferred_specialty;
                    $rec->experience = $rec->preferred_experience;
                }

                if ($job) {
                    $this->check = "1";
                    $this->message = "Draft send Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function counterOfferJob(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required',
            'worker_user_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            
            $update_array["job_id"] = isset($request->job_id)?$request->job_id:'';
            $update_array["recruiter_id"] = isset($request->recruiter_id)?$request->recruiter_id:'';
            $update_array["worker_user_id"] = isset($request->worker_user_id)?$request->worker_user_id:'';
            $update_array["job_name"] = isset($request->job_name)?$request->job_name:'';
            $update_array["type"] = isset($request->type)?$request->type:'';
            $update_array["compact"] = isset($request->compact)?$request->compact:'';
            $update_array["terms"] = isset($request->term)?$request->term:'';
            $update_array["profession"] = isset($request->profession)?$request->profession:'';
            $update_array["preferred_specialty"] = isset($request->specialty)?$request->specialty:'';
            $update_array["preferred_experience"] = isset($request->experience)?$request->experience:'';
            $update_array["job_location"] = isset($request->professional_licensure)?$request->professional_licensure:'';
            $update_array["vaccinations"] = isset($request->vaccinations)?$request->vaccinations:'';
            $update_array["number_of_references"] = isset($request->number_of_references)?$request->number_of_references:'';
            $update_array["min_title_of_reference"] = isset($request->min_title_of_reference)?$request->min_title_of_reference:'';
            $update_array["recency_of_reference"] = isset($request->recency_of_reference)?$request->recency_of_reference:'';
            $update_array["certificate"] = isset($request->certificate)?$request->certificate:'';
            $update_array["skills"] = isset($request->skills_checklist)?$request->skills_checklist:'';
            $update_array["urgency"] = isset($request->urgency)?$request->urgency:'';
            $update_array["position_available"] = isset($request->position_available)?$request->position_available:'';
            $update_array["msp"] = isset($request->msp)?$request->msp:'';
            $update_array["vms"] = isset($request->vms)?$request->vms:'';
            $update_array["submission_of_vms"] = isset($request->submission_of_vms)?$request->submission_of_vms:'';
            $update_array["block_scheduling"] = isset($request->block_scheduling)?$request->block_scheduling:'';
            $update_array["float_requirement"] = isset($request->float_requirement)?$request->float_requirement:'';
            $update_array["facility_shift_cancelation_policy"] = isset($request->facility_shift_cancelation_policy)?$request->facility_shift_cancelation_policy:'';
            $update_array["contract_termination_policy"] = isset($request->contract_termination_policy)?$request->contract_termination_policy:'';
            $update_array["traveler_distance_from_facility"] = isset($request->traveler_distance_from_facility)?$request->traveler_distance_from_facility:'';
            $update_array["facility"] = isset($request->facility)?$request->facility:'';
            $update_array["facility_id"] = isset($request->facility_id)?$request->facility_id:'';
            
            $update_array["clinical_setting"] = isset($request->clinical_setting)?$request->clinical_setting:'';
            $update_array["Patient_ratio"] = isset($request->Patient_ratio)?$request->Patient_ratio:'';
            $update_array["emr"] = isset($request->emr)?$request->emr:'';
            $update_array["Unit"] = isset($request->Unit)?$request->Unit:'';
            $update_array["Department"] = isset($request->Department)?$request->Department:'';
            $update_array["Bed_Size"] = isset($request->Bed_Size)?$request->Bed_Size:'';
            $update_array["Trauma_Level"] = isset($request->Trauma_Level)?$request->Trauma_Level:'';
            $update_array["scrub_color"] = isset($request->scrub_color)?$request->scrub_color:'';
            $update_array["start_date"] = isset($request->start_date)?$request->start_date:'';
            $update_array["as_soon_as"] = isset($request->as_soon_as)?$request->as_soon_as:'';
            $update_array["rto"] = isset($request->rto)?$request->rto:'';
            $update_array["preferred_shift"] = isset($request->preferred_shift)?$request->preferred_shift:'';
            $update_array["hours_per_week"] = isset($request->hours_per_week)?$request->hours_per_week:'';
            $update_array["guaranteed_hours"] = isset($request->guaranteed_hours)?$request->guaranteed_hours:'';
            $update_array["hours_shift"] = isset($request->hours_shift)?$request->hours_shift:'';
            $update_array["weeks_shift"] = isset($request->weeks_shift)?$request->weeks_shift:'';
            $update_array["preferred_assignment_duration"] = isset($request->preferred_assignment_duration)?$request->preferred_assignment_duration:'';
            $update_array["referral_bonus"] = isset($request->referral_bonus)?$request->referral_bonus:'';
            $update_array["sign_on_bonus"] = isset($request->sign_on_bonus)?$request->sign_on_bonus:'';
            $update_array["completion_bonus"] = isset($request->completion_bonus)?$request->completion_bonus:'';
            $update_array["extension_bonus"] = isset($request->extension_bonus)?$request->extension_bonus:'';
            $update_array["other_bonus"] = isset($request->other_bonus)?$request->other_bonus:'';
            $update_array["four_zero_one_k"] = isset($request->four_zero_one_k)?$request->four_zero_one_k:'';
            $update_array["health_insaurance"] = isset($request->health_insaurance)?$request->health_insaurance:'';
            $update_array["dental"] = isset($request->dental)?$request->dental:'';
            $update_array["vision"] = isset($request->vision)?$request->vision:'';
            $update_array["actual_hourly_rate"] = isset($request->actual_hourly_rate)?$request->actual_hourly_rate:'';
            $update_array["overtime"] = isset($request->overtime)?$request->overtime:'';
            $update_array["holiday"] = isset($request->holiday)?$request->holiday:'';
            $update_array["on_call"] = isset($request->on_call)?$request->on_call:'';
            $update_array["orientation_rate"] = isset($request->orientation_rate)?$request->orientation_rate:'';
            $update_array["weekly_non_taxable_amount"] = isset($request->weekly_non_taxable_amount)?$request->weekly_non_taxable_amount:'';
            $update_array["description"] = isset($request->description)?$request->description:'';
            $update_array["additional_terms"] = isset($request->additional_terms)?$request->additional_terms:'';

            $update_array["facilitys_parent_system"] = isset($request->facilitys_parent_system)?$request->facilitys_parent_system:'';
            $update_array["facility_average_rating"] = isset($request->facility_average_rating)?$request->facility_average_rating:'';
            $update_array["recruiter_average_rating"] = isset($request->recruiter_average_rating)?$request->recruiter_average_rating:'';
            $update_array["employer_average_rating"] = isset($request->employer_average_rating)?$request->employer_average_rating:'';
            $update_array["job_city"] = isset($request->city)?$request->city:'';
            $update_array["job_state"] = isset($request->state)?$request->state:'';
            
            
            
            $check = DB::table('offer_jobs')->where(['job_id' => $request->job_id, 'worker_user_id' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id])->first();
            if(isset($check))
            {
                $update_array["is_counter"] = isset($request->is_counter)?$request->is_counter:'1';
                $update_array["is_draft"] = isset($request->is_draft)?$request->is_draft:$check->is_draft;
                $job = DB::table('offer_jobs')->where(['job_id' => $request->job_id, 'worker_user_id' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id])->update($update_array);
                if ($job) {
                    $this->check = "1";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Send Counter Offer successfully";
                    }else{
                        $this->message = "Send Draft Counter Offer successfully";
                    }
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    if($update_array["is_draft"] == '0'){
                        $this->message = "Send Counter Offered not Successfully";
                    }else{
                        $this->message = "Send Draft Counter Offered not Successfully";
                    }
                }
            }else{
                $this->check = "0";
                $this->message = "Job Not Found";
            }

            if($update_array["is_draft"] == '0'){
                $worker = Nurse::where('user_id', $request->worker_user_id)->first();
                $recruiter_info = User::where('id', $request->recruiter_id)->first();
                $checkOffer = Offer::where(['nurse_id' => $worker->id, 'job_id' => $request->job_id])->first();
                // if (isset($checkOffer)) {
                //     $offer = Offer::where(['nurse_id' => $worker->id, 'job_id' => $request->job_id])->update(['status' => 'Offered', 'start_date' => date('Y-m-d')]);
                // } else {
                //     $offer = Offer::create(['nurse_id' => $worker->id, 'created_by' => $worker->id, 'job_id' => $request->job_id,'status' => 'Offered', 'start_date' => date('Y-m-d') ]);
                // }
                $offer_status = 'Offered';
                $isAskWorker = '0';
                // $check_notification = Notification::where(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id])->first();
                $check_notification = Notification::where(['job_id' => $request->job_id, 'isAskWorker' => $isAskWorker])->first();
                $text = 'Received a Counter Offer for job name- '.$update_array["job_name"].' ('. $request->job_id .') by ';
                if(empty($check_notification)){
                    $notification = Notification::create(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id, 'title' => 'Send Counter Offer', 'text' => $text, 'updated_at' => date('Y-m-d h:i:s')]);
                }else{
                    $notification = Notification::where('id', $check_notification->id)->update(['job_id' => $request->job_id, 'created_by' => $request->worker_user_id, 'recruiter_id' => $request->recruiter_id, 'title' => 'Send Counter Offer', 'text' => $text, 'updated_at' => date('Y-m-d h:i:s')]);
                }
            }
            
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    public function getCounterOfferJob(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required',
            'worker_user_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $this->return_data = [];
            $job = DB::table('offer_jobs')->select('offer_jobs.*')->where(['job_id' => $request->job_id, 'is_draft' => '0', 'is_counter' => '1', 'worker_user_id' => $request->worker_user_id])->first();
            $job_data = Job::where(['id' => $request->job_id, 'active' => '1', 'is_closed' => '0', 'is_hidden' => '0'])->first();
            $recruiter = USER::where('id', $request->recruiter_id)->first();
            $worker = USER::where('id', $request->worker_user_id)->first();
            $nurse = Nurse::where('user_id', $request->worker_user_id)->first();
            $offer = Offer::where(['nurse_id' => $nurse->id, 'job_id' => $request->job_id])->first();
            if(isset($offer)){
                if(isset($job_data['facility_id'])){
                    $facility = Facility::where('id', $job_data['facility_id'])->first();
                }
                $facility_name = isset($job_data['facility'])?$job_data['facility']:'';
                $worker_name = isset($worker['fullName'])?$worker['fullName']:'';
                $recruiter_name = isset($recruiter['fullName'])?$recruiter['fullName']:'';
                $result = [];
                $worker_info = [];
                $popup_info = [];
    
                $result['job_id'] = isset($job_data['id'])?$job_data['id']:"";
                $result['description'] = isset($job_data['description'])?$job_data['description']:"";
                $result['worker_name'] = $worker_name;
                $result['recruiter_name'] = $recruiter_name;
                $result['facility_name'] = $facility_name;
                $result['job_id'] = $job_data['id'];
                $result['offer_id'] = isset($offer['id'])?$offer['id']:'';
                $result['recruiter_id'] = $request->recruiter_id;
                $result['offer_valid'] = isset($job_data['preferred_assignment_duration'])?$job_data['preferred_assignment_duration'].' Weeks':'';
    
                if(isset($job)){
                    $popup = [];
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->type != $job_data['type']) && isset($job->type) && !empty($job->type))
                    {    
                        $popup['name'] = 'Type';      
                        $popup['value'] = $job->type;
                        $jobs["name"] = 'Type';
                        $jobs["job"] = $job->type;
                    }else{
                        $jobs["name"] = 'Type';
                        $jobs["job"] = $job_data['type'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->terms != $job_data['terms']) && isset($job->terms) && !empty($job->terms))
                    {    
                        $popup['name'] = 'Terms';      
                        $popup['value'] = $job->terms;
                        $jobs["name1"] = 'Terms';
                        $jobs["job1"] = $job->terms;
                    }else{
                        $jobs["name1"] = 'Terms';
                        $jobs["job1"] = $job_data['terms'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->profession != $job_data['profession']) && isset($job->profession) && !empty($job->profession))
                    {    
                        $popup['name'] = 'Profession';      
                        $popup['value'] = $job->profession;
                        $jobs["name"] = 'Profession';
                        $jobs["job"] = $job->profession;
                    }else{
                        $jobs["name"] = 'Profession';
                        $jobs["job"] = $job_data['profession'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_specialty != $job_data['preferred_specialty']) && isset($job->preferred_specialty) && !empty($job->preferred_specialty))
                    {    
                        $popup['name'] = 'Specialty';      
                        $popup['value'] = $job->preferred_specialty;
                        $jobs["name1"] = 'Specialty';
                        $jobs["job1"] = $job->preferred_specialty;                        
                    }else{
                        $jobs["name1"] = 'Specialty';
                        $jobs["job1"] = $job_data['preferred_specialty'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->compact != $job_data['compact']) && isset($job->compact) && !empty($job->compact))
                    {    
                        $popup['name'] = 'Compact';
                        $popup['value'] = $job->compact;
                        $jobs["compact"] = $job->compact;
                    }else{
                        $jobs["compact"] = $job_data['compact'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_location != $job_data['job_location']) && isset($job->job_location) && !empty($job->job_location))
                    {    
                        $popup['name'] = 'Professional Licensure';
                        $popup['value'] = $job->preferred_experience;
                        $jobs["name"] = 'Professional Licensure';
                        $jobs["job"] = $job->job_location;
                    }else{
                        $jobs["name"] = 'Professional Licensure';
                        $jobs["job"] = $job_data['job_location'].','.$jobs["compact"];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_experience != $job_data['preferred_experience']) && isset($job->preferred_experience) && !empty($job->preferred_experience))
                    {    
                        $popup['name'] = 'Experience';
                        $popup['value'] = $job->preferred_experience;
                        $jobs["name1"] = 'Experience';
                        $jobs["job1"] = $job->preferred_experience;
                    }else{
                        $jobs["name1"] = 'Experience';
                        $jobs["job1"] = $job_data['preferred_experience'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->number_of_references != $job_data['number_of_references']) && isset($job->number_of_references) && !empty($job->number_of_references))
                    {    
                        $popup['name'] = 'Number Of References';
                        $popup['value'] = $job->number_of_references;
                        $jobs["name"] = 'Number Of References';
                        $jobs["job"] = $job->number_of_references;
                    }else{
                        $jobs["name"] = 'Number Of References';
                        $jobs["job"] = $job_data['number_of_references'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->min_title_of_reference != $job_data['min_title_of_reference']) && isset($job->min_title_of_reference) && !empty($job->min_title_of_reference))
                    {    
                        $popup['name'] = 'Min Title Of References';
                        $popup['value'] = $job->min_title_of_reference;
                        $jobs["name1"] = 'Min Title Of References';
                        $jobs["job1"] = $job->min_title_of_reference;
                    }else{
                        $jobs["name1"] = 'Min Title Of References';
                        $jobs["job1"] = $job_data['min_title_of_reference'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->recency_of_reference != $job_data['recency_of_reference']) && isset($job->recency_of_reference) && !empty($job->recency_of_reference))
                    {    
                        $popup['name'] = 'Recency Of Reference';
                        $popup['value'] = $job->recency_of_reference;
                        $jobs["name"] = 'Recency Of Reference';
                        $jobs["job"] = $job->recency_of_reference;
                    }else{
                        $jobs["name"] = 'Recency Of Reference';
                        $jobs["job"] = $job_data['recency_of_reference'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->skills != $job_data['skills']) && isset($job->skills) && !empty($job->skills))
                    {    
                        $popup['name'] = 'Skills Checklist';
                        $popup['value'] = $job->skills;
                        $jobs["name1"] = 'Skills Checklist';
                        $jobs["job1"] = $job->skills;
                    }else{
                        $jobs["name1"] = 'Skills Checklist';
                        $jobs["job1"] = $job_data['skills'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->position_available != $job_data['position_available']) && isset($job->position_available) && !empty($job->position_available))
                    {    
                        $popup['name'] = '# Possition Available';
                        $popup['value'] = $job->position_available;
                        $jobs["name"] = '# Possition Available';
                        $jobs["job"] = $job->position_available;
                    }else{
                        $jobs["name"] = '# Possition Available';
                        $jobs["job"] = $job_data['position_available'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->msp != $job_data['msp']) && isset($job->msp) && !empty($job->msp))
                    {  
                        $popup['name'] = 'MSP';
                        $popup['value'] = $job->msp;
                        $jobs["name1"] = 'MSP';
                        $jobs["job1"] = $job->msp;
                    }else{
                        $jobs["name1"] = 'MSP';
                        $jobs["job1"] = $job_data['msp'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->vms != $job_data['vms']) && isset($job->vms) && !empty($job->vms))
                    {    
                        $popup['name'] = 'VMS';
                        $popup['value'] = $job->vms;
                        $jobs["name"] = 'VMS';
                        $jobs["job"] = $job->vms;
                    }else{
                        $jobs["name"] = 'VMS';
                        $jobs["job"] = $job_data['vms'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->submission_of_vms != $job_data['submission_of_vms']) && isset($job->submission_of_vms) && !empty($job->submission_of_vms))
                    {    
                        $popup['name'] = '# of Submission in VMS';
                        $popup['value'] = $job->submission_of_vms;
                        $jobs["name1"] = '# of Submission in VMS';
                        $jobs["job1"] = $job->submission_of_vms;
                    }else{
                        $jobs["name1"] = '# of Submission in VMS';
                        $jobs["job1"] = $job_data['submission_of_vms'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->block_scheduling != $job_data['block_scheduling']) && isset($job->block_scheduling) && !empty($job->block_scheduling))
                    {    
                        $popup['name'] = 'Block Scheduling';
                        $popup['value'] = $job->block_scheduling;
                        $jobs["name"] = 'Block Scheduling';
                        $jobs["job"] = $job->block_scheduling;
                    }else{
                        $jobs["name"] = 'Block Scheduling';
                        $jobs["job"] = $job_data['block_scheduling'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility_shift_cancelation_policy != $job_data['facility_shift_cancelation_policy']) && isset($job->facility_shift_cancelation_policy) && !empty($job->facility_shift_cancelation_policy))
                    {    
                        $popup['name'] = 'Facility Shift Cancelation Policy';
                        $popup['value'] = $job->facility_shift_cancelation_policy;
                        $jobs["name1"] = 'Facility Shift Cancelation Policy';
                        $jobs["job1"] = $job->facility_shift_cancelation_policy;
                    }else{
                        $jobs["name1"] = 'Facility Shift Cancelation Policy';
                        $jobs["job1"] = $job_data['facility_shift_cancelation_policy'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    
                    if(($job->contract_termination_policy != $job_data['contract_termination_policy']) && isset($job->contract_termination_policy) && !empty($job->contract_termination_policy))
                    {    
                        $popup['name'] = 'Contract Termination Policy';
                        $popup['value'] = $job->contract_termination_policy;
                        $jobs["name"] = 'Contract Termination Policy';
                        $jobs["job"] = $job->contract_termination_policy;
                    }else{
                        $jobs["name"] = 'Contract Termination Policy';
                        $jobs["job"] = $job_data['contract_termination_policy'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->traveler_distance_from_facility != $job_data['traveler_distance_from_facility']) && isset($job->traveler_distance_from_facility) && !empty($job->traveler_distance_from_facility))
                    {    
                        $popup['name'] = 'Traveler Distance From Facility';
                        $popup['value'] = $job->traveler_distance_from_facility;
                        $jobs["name1"] = 'Traveler Distance From Facility';
                        $jobs["job1"] = $job->traveler_distance_from_facility;
                    }else{
                        $jobs["name1"] = 'Traveler Distance From Facility';
                        $jobs["job1"] = $job_data['traveler_distance_from_facility'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility != $job_data['facility']) && isset($job->facility) && !empty($job->facility))
                    {    
                        $popup['name'] = 'Facility';
                        $popup['value'] = $job->facility;
                        $jobs["name"] = 'Facility';
                        $jobs["job"] = $job->facility;
                    }else{
                        $jobs["name"] = 'Facility';
                        $jobs["job"] = $job_data['facility'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facilitys_parent_system != $job_data['facilitys_parent_system']) && isset($job->facilitys_parent_system) && !empty($job->facilitys_parent_system))
                    {    
                        $popup['name'] = "Facility's Parent System";
                        $popup['value'] = $job->facilitys_parent_system;
                        $jobs["name1"] = "Facility's Parent System";
                        $jobs["job1"] = $job->facilitys_parent_system;
                    }else{
                        $jobs["name1"] = "Facility's Parent System";
                        $jobs["job1"] = $job_data['facilitys_parent_system'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->facility_average_rating != $job_data['facility_average_rating']) && isset($job->facility_average_rating) && !empty($job->facility_average_rating))
                    {    
                        $popup['name'] = "Facility Average Rating";
                        $popup['value'] = $job->facility_average_rating;
                        $jobs["name"] = "Facility Average Rating";
                        $jobs["job"] = $job->facility_average_rating;
                    }else{
                        $jobs["name"] = "Facility Average Rating";
                        $jobs["job"] = $job_data['facility_average_rating'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->recruiter_average_rating != $job_data['recruiter_average_rating']) && isset($job->recruiter_average_rating) && !empty($job->recruiter_average_rating))
                    {    
                        $popup['name'] = "Recruiter Average Rating";
                        $popup['value'] = isset( $job->recruiter_average_rating)? $job->recruiter_average_rating:'';
                        $jobs["name1"] = "Recruiter Average Rating";
                        $jobs["job1"] = isset($job->recruiter_average_rating)?$job->recruiter_average_rating:'';
                    }else{
                        $jobs["name1"] = "Recruiter Average Rating";
                        $jobs["job1"] = isset($job_data['recruiter_average_rating'])?$job_data['recruiter_average_rating']:'';
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->employer_average_rating != $job_data['employer_average_rating']) && isset($job->employer_average_rating) && !empty($job->employer_average_rating))
                    {    
                        $popup['name'] = "Employer Average Rating";
                        $popup['value'] = isset($job->employer_average_rating)?$job->employer_average_rating:'';
                        $jobs["name"] = "Employer Average Rating";
                        $jobs["job"] = isset($job->employer_average_rating)?$job->employer_average_rating:'';
                    }else{
                        $jobs["name"] = "Employer Average Rating";
                        $jobs["job"] = isset($job_data['employer_average_rating'])?$job_data['employer_average_rating']:'';
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->clinical_setting != $job_data['clinical_setting']) && isset($job->clinical_setting) && !empty($job->clinical_setting))
                    {    
                        $popup['name'] = "Clinical Setting";
                        $popup['value'] = $job->clinical_setting;
                        $jobs["name1"] = "Clinical Setting";
                        $jobs["job1"] = $job->clinical_setting;
                    }else{
                        $jobs["name1"] = "Clinical Setting";
                        $jobs["job1"] = $job_data['clinical_setting'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Patient_ratio != $job_data['Patient_ratio']) && isset($job->Patient_ratio) && !empty($job->Patient_ratio))
                    {    
                        $popup['name'] = "Patient Ratio";
                        $popup['value'] = $job->Patient_ratio;
                        $jobs["name"] = "Patient Ratio";
                        $jobs["job"] = $job->Patient_ratio;
                    }else{
                        $jobs["name1"] = "Patient Ratio";
                        $jobs["job"] = $job_data['Patient_ratio'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->emr != $job_data['emr']) && isset($job->emr) && !empty($job->emr))
                    {    
                        $popup['name'] = "EMR";
                        $popup['value'] = $job->emr;
                        $jobs["name1"] = "EMR";
                        $jobs["job1"] = $job->emr;
                    }else{
                        $jobs["name1"] = "EMR";
                        $jobs["job1"] = $job_data['emr'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Unit != $job_data['Unit']) && isset($job->Unit) && !empty($job->Unit))
                    {    
                        $popup['name'] = "Unit";
                        $popup['value'] = $job->Unit;
                        $jobs["name"] = "Unit";
                        $jobs["job"] = $job->Unit;
                    }else{
                        $jobs["name"] = "Unit";
                        $jobs["job"] = $job_data['Unit'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Department != $job_data['Department']) && isset($job->Department) && !empty($job->Department))
                    {    
                        $popup['name'] = "Department";
                        $popup['value'] = $job->Department;
                        $jobs["name1"] = "Department";
                        $jobs["job1"] = $job->Department;
                    }else{
                        $jobs["name1"] = "Department";
                        $jobs["job1"] = $job_data['Department'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Bed_Size != $job_data['Bed_Size']) && isset($job->Bed_Size) && !empty($job->Bed_Size))
                    {    
                        $popup['name'] = "Bed Size";
                        $popup['value'] = $job->Bed_Size;
                        $jobs["name"] = "Bed Size";
                        $jobs["job"] = $job->Bed_Size;
                    }else{
                        $jobs["name"] = "Bed Size";
                        $jobs["job"] = $job_data['Bed_Size'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->Trauma_Level != $job_data['Trauma_Level']) && isset($job->Trauma_Level) && !empty($job->Trauma_Level))
                    {    
                        $popup['name'] = "Trauma Level";
                        $popup['value'] = $job->Trauma_Level;
                        $jobs["name1"] = "Trauma Level";
                        $jobs["job1"] = $job->Trauma_Level;
                    }else{
                        $jobs["name1"] = "Trauma Level";
                        $jobs["job1"] = $job_data['Trauma_Level'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->scrub_color != $job_data['scrub_color']) && isset($job->scrub_color) && !empty($job->scrub_color))
                    {    
                        $popup['name'] = "Scrub Color";
                        $popup['value'] = $job->scrub_color;
                        $jobs["name"] = "Scrub Color";
                        $jobs["job"] = $job->scrub_color;
                    }else{
                        $jobs["name"] = "Scrub Color";
                        $jobs["job"] = $job_data['scrub_color'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_city != $job_data['job_city']) && isset($job->job_city) && !empty($job->job_city))
                    {    
                        $popup['name'] = "Facility City";
                        $popup['value'] = $job->job_city;
                        $jobs["name1"] = "Facility City";
                        $jobs["job1"] = $job->job_city;
                    }else{
                        $jobs["name1"] = "Facility City";
                        $jobs["job1"] = $job_data['job_city'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->job_state != $job_data['job_state']) && isset($job->job_state) && !empty($job->job_state))
                    {    
                        $popup['name'] = "Facility State Code";
                        $popup['value'] = $job->job_state;
                        $jobs["name1"] = "Facility State Code";
                        $jobs["job1"] = $job->job_state;
                    }else{
                        $jobs["name1"] = "Facility State Code";
                        $jobs["job1"] = $job_data['job_state'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->start_date != $job_data['start_date']) && isset($job->start_date) && !empty($job->start_date))
                    {    
                        $popup['name'] = "Start Date";
                        $popup['value'] = $job->start_date;
                        $jobs["name1"] = "Start Date";
                        $jobs["job1"] = $job->start_date;
                    }else{
                        $jobs["name1"] = "Start Date";
                        $jobs["job1"] = $job_data['start_date'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->rto != $job_data['rto']) && isset($job->rto) && !empty($job->rto))
                    {    
                        $popup['name'] = "RTO";
                        $popup['value'] = $job->rto;
                        $jobs["name"] = "RTO";
                        $jobs["job"] = $job->rto;
                    }else{
                        $jobs["name"] = "RTO";
                        $jobs["job"] = $job_data['rto'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_shift != $job_data['preferred_shift']) && isset($job->preferred_shift) && !empty($job->preferred_shift))
                    {    
                        $popup['name'] = "Shift Time Of Day";
                        $popup['value'] = $job->preferred_shift;
                        $jobs["name1"] = "Shift Time Of Day";
                        $jobs["job1"] = $job->preferred_shift;
                    }else{
                        $jobs["name1"] = "Shift Time Of Day";
                        $jobs["job1"] = $job_data['preferred_shift'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    
                    if(($job->hours_per_week != $job_data['hours_per_week']) && isset($job->hours_per_week) && !empty($job->hours_per_week))
                    {    
                        $popup['name'] = "Hours/Week";
                        $popup['value'] = $job->hours_per_week;
                        $jobs["name"] = "Hors/Week";
                        $jobs["job"] = $job->hours_per_week;
                    }else{
                        $jobs["name"] = "Hors/Week";
                        $jobs["job"] = $job_data['hours_per_week'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->guaranteed_hours != $job_data['guaranteed_hours']) && isset($job->guaranteed_hours) && !empty($job->guaranteed_hours))
                    {    
                        $popup['name'] = "Gauranteed Hours";
                        $popup['value'] = $job->guaranteed_hours;
                        $jobs["name1"] = "Gauranteed Hours";
                        $jobs["job1"] = $job->guaranteed_hours;
                    }else{
                        $jobs["name1"] = "Gauranteed Hours";
                        $jobs["job1"] = $job_data['guaranteed_hours'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->hours_shift != $job_data['hours_shift']) && isset($job->hours_shift) && !empty($job->hours_shift))
                    {    
                        $popup['name'] = "Hours/Shift";
                        $popup['value'] = $job->hours_shift;
                        $jobs["name"] = "Hours/Shift";
                        $jobs["job"] = $job->hours_shift;
                    }else{
                        $jobs["name"] = "Hours/Shift";
                        $jobs["job"] = $job_data['hours_shift'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->preferred_assignment_duration != $job_data['preferred_assignment_duration']) && isset($job->preferred_assignment_duration) && !empty($job->preferred_assignment_duration))
                    {    
                        $popup['name'] = "Weeks/Assignment";
                        $popup['value'] = $job->preferred_assignment_duration;
                        $jobs["name1"] = "Weeks/Assignment";
                        $jobs["job1"] = $job->preferred_assignment_duration;
                    }else{
                        $jobs["name1"] = "Weeks/Assignment";
                        $jobs["job1"] = $job_data['preferred_assignment_duration'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weeks_shift != $job_data['weeks_shift']) && isset($job->weeks_shift) && !empty($job->weeks_shift))
                    {    
                        $popup['name'] = "Shifts/Week";
                        $popup['value'] = $job->weeks_shift;
                        $jobs["name"] = "Shifts/Week";
                        $jobs["job"] = $job->weeks_shift;
                    }else{
                        $jobs["name"] = "Shifts/Week";
                        $jobs["job"] = $job_data['weeks_shift'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->referral_bonus != $job_data['referral_bonus']) && isset($job->referral_bonus) && !empty($job->referral_bonus))
                    {    
                        $popup['name'] = "Referral Bonus";
                        $popup['value'] = $job->referral_bonus;
                        $jobs["name1"] = "Referral Bonus";
                        $jobs["job1"] = $job->referral_bonus;
                    }else{
                        $jobs["name1"] = "Referral Bonus";
                        $jobs["job1"] = $job_data['referral_bonus'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->sign_on_bonus != $job_data['sign_on_bonus']) && isset($job->sign_on_bonus) && !empty($job->sign_on_bonus))
                    {    
                        $popup['name'] = "Sign-On Bonus";
                        $popup['value'] = $job->sign_on_bonus;
                        $jobs["name"] = "Sign-On Bonus";
                        $jobs["job"] = $job->sign_on_bonus;
                    }else{
                        $jobs["name"] = "Sign-On Bonus";
                        $jobs["job"] = $job_data['sign_on_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->completion_bonus != $job_data['completion_bonus']) && isset($job->completion_bonus) && !empty($job->completion_bonus))
                    {    
                        $popup['name'] = "Completion Bonus";
                        $popup['value'] = $job->completion_bonus;
                        $jobs["name1"] = "Completion Bonus";
                        $jobs["job1"] = $job->completion_bonus;
                    }else{
                        $jobs["name1"] = "Completion Bonus";
                        $jobs["job1"] = $job_data['completion_bonus'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->extension_bonus != $job_data['extension_bonus']) && isset($job->extension_bonus) && !empty($job->extension_bonus))
                    {    
                        $popup['name'] = "Extension Bonus";
                        $popup['value'] = $job->extension_bonus;
                        $jobs["name"] = "Extension Bonus";
                        $jobs["job"] = $job->extension_bonus;
                    }else{
                        $jobs["name"] = "Extension Bonus";
                        $jobs["job"] = $job_data['extension_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->other_bonus != $job_data['other_bonus']) && isset($job->other_bonus) && !empty($job->other_bonus))
                    {    
                        $popup['name'] = "Other Bonus";
                        $popup['value'] = $job->other_bonus;
                        $jobs["name1"] = "Other Bonus";
                        $jobs["job1"] = $job->other_bonus;
                    }else{
                        $jobs["name1"] = "Other Bonus";
                        $jobs["job1"] = $job_data['other_bonus'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
    
                    if(($job->four_zero_one_k != $job_data['four_zero_one_k']) && isset($job->four_zero_one_k) && !empty($job->four_zero_one_k))
                    {    
                        $popup['name'] = "401K";
                        $popup['value'] = $job->four_zero_one_k;
                        $jobs["name"] = "401K";
                        $jobs["job"] = $job->four_zero_one_k;
                    }else{
                        $jobs["name"] = "401K";
                        $jobs["job"] = $job_data['four_zero_one_k'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->health_insaurance != $job_data['health_insaurance']) && isset($job->health_insaurance) && !empty($job->health_insaurance))
                    {    
                        $popup['name'] = "Health Insaurance";
                        $popup['value'] = $job->health_insaurance;
                        $jobs["name1"] = "Health Insaurance";
                        $jobs["job1"] = $job->health_insaurance;
                    }else{
                        $jobs["name1"] = "Health Insaurance";
                        $jobs["job1"] = $job_data['health_insaurance'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->dental != $job_data['dental']) && isset($job->dental) && !empty($job->dental))
                    {    
                        $popup['name'] = "Dental";
                        $popup['value'] = $job->dental;
                        $jobs["name"] = "Dental";
                        $jobs["job"] = $job->dental;
                    }else{
                        $jobs["name"] = "Dental";
                        $jobs["job"] = $job_data['dental'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->vision != $job_data['vision']) && isset($job->vision) && !empty($job->vision))
                    {   
                        $popup['name'] = "Vision";
                        $popup['value'] = $job->vision;
                        $jobs["name1"] = "Vision";
                        $jobs["job1"] = $job->vision; 
                    }else{
                        $jobs["name1"] = "Vision";
                        $jobs["job1"] = $job_data['vision'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->actual_hourly_rate != $job_data['actual_hourly_rate']) && isset($job->actual_hourly_rate) && !empty($job->actual_hourly_rate))
                    {    
                        $popup['name'] = "Actual Hourly Rate";
                        $popup['value'] = $job->actual_hourly_rate;
                        $jobs["name"] = "Actual Hourly Rate";
                        $jobs["job"] = $job->actual_hourly_rate;
                    }else{
                        $jobs["name"] = "Actual Hourly Rate";
                        $jobs["job"] = $job_data['actual_hourly_rate'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->feels_like_per_hour != $job_data['feels_like_per_hour']) && isset($job->feels_like_per_hour) && !empty($job->feels_like_per_hour))
                    {    
                        $popup['name'] = "Feels Like $/hr";
                        $popup['value'] = $job->feels_like_per_hour;
                        $jobs["name1"] = "Feels Like $/hr";
                        $jobs["job1"] = $job->feels_like_per_hour;
                    }else{
                        $jobs["name1"] = "Feels Like $/hr";
                        $jobs["job1"] = $job_data['feels_like_per_hour'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->overtime != $job_data['overtime']) && isset($job->overtime) && !empty($job->overtime))
                    {    
                        $popup['name'] = "Overtime";
                        $popup['value'] = $job->overtime;
                        $jobs["name"] = "Overtime";
                        $jobs["job"] = $job->overtime;
                    }else{
                        $jobs["name"] = "Overtime";
                        $jobs["job"] = $job_data['overtime'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->holiday != $job_data['holiday']) && isset($job->holiday) && !empty($job->holiday))
                    {    
                        $popup['name'] = "Holiday";
                        $popup['value'] = $job->holiday;
                        $jobs["name1"] = "Holiday";
                        $jobs["job1"] = $job->holiday;
                    }else{
                        $jobs["name1"] = "Holiday";
                        $jobs["job1"] = $job_data['holiday'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->on_call != $job_data['on_call']) && isset($job->on_call) && !empty($job->on_call))
                    {    
                        $popup['name'] = "On Call";
                        $popup['value'] = $job->on_call;
                        $jobs["name"] = "On Call";
                        $jobs["job"] = $job->on_call;
                    }else{
                        $jobs["name"] = "On Call";
                        $jobs["job"] = $job_data['on_call'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->call_back != $job_data['call_back']) && isset($job->call_back) && !empty($job->call_back))
                    {    
                        $popup['name'] = "Call Back";
                        $popup['value'] = $job->call_back;
                        $jobs["name1"] = "Call Back";
                        $jobs["job1"] = $job->call_back;
                    }else{
                        $jobs["name1"] = "Call Back";
                        $jobs["job1"] = $job_data['call_back'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->orientation_rate != $job_data['orientation_rate']) && isset($job->orientation_rate) && !empty($job->orientation_rate))
                    {    
                        $popup['name'] = "Orientation Rate";
                        $popup['value'] = $job->orientation_rate;
                        $jobs["name"] = "Orientation Rate";
                        $jobs["job"] = $job->orientation_rate;
                    }else{
                        $jobs["name"] = "Orientation Rate";
                        $jobs["job"] = $job_data['orientation_rate'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weekly_taxable_amount != $job_data['weekly_taxable_amount']) && isset($job->weekly_taxable_amount) && !empty($job->weekly_taxable_amount))
                    {    
                        $popup['name'] = "Weekly Taxable Amount";
                        $popup['value'] = $job->weekly_taxable_amount;
                        $jobs["name1"] = "Weekly Taxable Amount";
                        $jobs["job1"] = $job->weekly_taxable_amount;
                    }else{
                        $jobs["name1"] = "Weekly Taxable Amount";
                        $jobs["job1"] = $job_data['weekly_taxable_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->weekly_non_taxable_amount != $job_data['weekly_non_taxable_amount']) && isset($job->weekly_non_taxable_amount) && !empty($job->weekly_non_taxable_amount))
                    {    
                        $popup['name'] = "Weekly Non Taxable Amount";
                        $popup['value'] = $job->weekly_non_taxable_amount;
                        $jobs["name"] = "Weekly Non Taxable Amount";
                        $jobs["job"] = $job->weekly_non_taxable_amount;
                    }else{
                        $jobs["name"] = "Weekly Non Taxable Amount";
                        $jobs["job"] = $job_data['weekly_non_taxable_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->employer_weekly_amount != $job_data['employer_weekly_amount']) && isset($job->employer_weekly_amount) && !empty($job->employer_weekly_amount))
                    {    
                        $popup['name'] = "Employer Weekly Amount";
                        $popup['value'] = $job->employer_weekly_amount;
                        $jobs["name1"] = "Employer Weekly Amount";
                        $jobs["job1"] = $job->employer_weekly_amount;
                    }else{
                        $jobs["name1"] = "Employer Weekly Amount";
                        $jobs["job1"] = $job_data['employer_weekly_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->goodwork_weekly_amount != $job_data['goodwork_weekly_amount']) && isset($job->goodwork_weekly_amount) && !empty($job->goodwork_weekly_amount))
                    {    
                        $popup['name'] = "Goodwork Weekly Amount";
                        $popup['value'] = $job->goodwork_weekly_amount;
                        $jobs["name"] = "Goodwork Weekly Amount";
                        $jobs["job"] = $job->goodwork_weekly_amount;
                    }else{
                        $jobs["name"] = "Goodwork Weekly Amount";
                        $jobs["job"] = $job_data['goodwork_weekly_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_employer_amount != $job_data['total_employer_amount']) && isset($job->total_employer_amount) && !empty($job->total_employer_amount))
                    {    
                        $popup['name'] = "Total Employer Amount";
                        $popup['value'] = $job->total_employer_amount;
                        $jobs["name1"] = "Total Employer Amount";
                        $jobs["job1"] = $job->total_employer_amount;
                    }else{
                        $jobs["name1"] = "Total Employer Amount";
                        $jobs["job1"] = $job_data['total_employer_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_goodwork_amount != $job_data['total_goodwork_amount']) && isset($job->total_goodwork_amount) && !empty($job->total_goodwork_amount))
                    {    
                        $popup['name'] = "Total Goodwork Amount";
                        $popup['value'] = $job->total_goodwork_amount;
                        $jobs["name"] = "Total Goodwork Amount";
                        $jobs["job"] = $job->total_goodwork_amount;
                    }else{
                        $jobs["name"] = "Total Goodwork Amount";
                        $jobs["job"] = $job_data['total_goodwork_amount'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(($job->total_contract_amount != $job_data['total_contract_amount']) && isset($job->total_contract_amount) && !empty($job->total_contract_amount))
                    {    
                        $popup['name'] = "Total Contract Amount";
                        $popup['value'] = $job->total_contract_amount;
                        $jobs["name1"] = "Total Contract Amount";
                        $jobs["job1"] = $job->total_contract_amount;
                    }else{
                        $jobs["name1"] = "Total Contract Amount";
                        $jobs["job1"] = $job_data['total_contract_amount'];
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    
                    if(($job->goodwork_number != $job_data['goodwork_number']) && isset($job->goodwork_number) && !empty($job->goodwork_number))
                    {    
                        $popup['name'] = "Goodwork Number";
                        $popup['value'] = $job->goodwork_number;
                        $jobs["name"] = "Goodwork Number";
                        $jobs["job"] = $job->goodwork_number;
                    }else{
                        $jobs["name"] = "Goodwork Number";
                        $jobs["job"] = $job_data['goodwork_number'];
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    if(isset($job->additional_terms) && !empty($job->additional_terms))
                    {    
                        $popup['name'] = "Additional Terms";
                        $popup['value'] = $job->additional_terms;
                        $jobs["name1"] = "Additional Terms";
                        $jobs["job1"] = $job->additional_terms;
                    }else{
                        $jobs["name1"] = "Additional Terms";
                        $jobs["job1"] = "";
                    }
                    $worker_info[] = $jobs;
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';
                    $jobs["name1"] = '';
                    $jobs["job1"] = '';
                    if(($job->vaccinations != $job_data['vaccinations']) && isset($job->vaccinations) && !empty($job->vaccinations))
                    {    
                        $popup['name'] = 'Vaccinations & Immunizations';
                        $popup['value'] = $job->vaccinations;
                        $jod_details = explode(',', $job->vaccinations);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Vaccinations & Immunizations';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }else{
                        $jod_details = explode(',', $job_data['vaccinations']);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Vaccinations & Immunizations';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }
                    $popup_info[] = $popup;
                    $popup['name'] = '';
                    $popup['value'] = '';

                    if(($job->certificate != $job_data['certificate']) && isset($job->certificate) && !empty($job->certificate))
                    {    
                        $popup['name'] = 'Certification';
                        $popup['value'] = $job->certificate;
                        $jod_details = explode(',', $job->certificate);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Certification';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }else{
                        $jod_details = explode(',', $job_data['certificate']);
                        foreach($jod_details as $rec){
                            $jobs["name"] = 'Certification';
                            $jobs["job"] = $rec;
                            $worker_info[] = $jobs;
                        }
                    }
                    $popup_info[] = $popup;
                    $result['worker_info'] = $worker_info;
                    $result['popup_info'] = $popup_info;
    
                    $this->check = "1";
                    $this->message = "Get send Offer listed successfully";
                    $this->return_data = $result;
                } else {
                    $this->check = "1";
                    $this->message = "Get Send Offer Job Not Found";
                }
            }else{
                $this->check = "1";
                $this->message = "Offer Not Found";
            }
            
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        
    }

    public function getCounterOfferJoblist(Request $request)
    {
        {
            $validator = \Validator::make($request->all(), [
                'api_key' => 'required',
                'recruiter_id' => 'required'
            ]);
            if ($validator->fails()) {
                $this->message = $validator->errors()->first();
            } else {
                $job = DB::table('offer_jobs')->select('offer_jobs.worker_user_id as worker_user_id', 'nurses.id as worker_id', 'users.first_name as worker_first_name', 'users.last_name as worker_last_name', 'users.image as worker_image', 'jobs.id as job_id', 'jobs.profession as profession', 'jobs.preferred_shift as preferred_shift', 'jobs.preferred_specialty as preferred_specialty', 'jobs.preferred_experience as preferred_experience')
                    ->leftJoin('jobs', 'offer_jobs.job_id', 'jobs.id')
                    ->leftJoin('users', 'offer_jobs.worker_user_id', 'users.id')
                    ->leftJoin('nurses', 'users.id', 'nurses.user_id')
                    ->where(['offer_jobs.is_draft' => '0', 'offer_jobs.is_counter' => '1',  'offer_jobs.recruiter_id' => $request->recruiter_id])
                    ->get();
                foreach($job as $rec){
                    $rec->worker_image = isset($rec->worker_image)?url("public/images/nurses/profile/" . $rec->worker_image):'';
                    $rec->preferred_experience = isset($rec->preferred_experience)?$rec->preferred_experience.' Years of Experience':'';
                    $rec->specialty = $rec->preferred_specialty;
                    $rec->experience = $rec->preferred_experience;
                }

                if ($job) {
                    $this->check = "1";
                    $this->message = "Counter Offer Job listed successfully";
                    $this->return_data = $job;
                } else {
                    $this->check = "0";
                    $this->message = "No Record Found";
                }
            }
            return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
        }
    }

    public function rejectedCounterOffer(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'job_id' => 'required',
            'recruiter_id' => 'required',
            'worker_user_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {    
            $nurse = Nurse::where('user_id', $request->worker_user_id)->first();
            $offer_job = Offer::where(['nurse_id' => $nurse->id, 'job_id' => $request->job_id, 'status' => 'Offered'])->forceDelete();
            $job = DB::table('offer_jobs')->where(['recruiter_id' => $request->recruiter_id, 'job_id' => $request->job_id, 'worker_user_id' => $request->worker_user_id])->delete();
            
            if ($job) {
                $this->check = "1";
                $this->message = "Offer Rejected Successfully";
                $this->return_data = $job;
            } else {
                $this->check = "0";
                $this->message = "No Record Found";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $this->return_data], 200);
    }

    // Payment Gateway Strip
    

    public function createAccount(Request $request)
    {
        \Stripe\Stripe::setApiKey(config('stripe.sk'));
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            // 'email' => 'required',
            // 'routing_number' => 'required',
            // 'account_number' => 'required',
            'worker_user_id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {

            $check = DB::table('nurse_account')->where(['worker_user_id' => $request->worker_user_id])->first();
            if(isset($request->paypal_details)){
                $acc_type = '1';
            }else{
                $acc_type = '0';
            }
            if (isset($check)) {
                if(isset($request->account_number) && isset($request->routing_number) && isset($request->email)){
                    $account = \Stripe\Account::create([
                        'type' => 'standard',
                        'country' => 'US',
                        'email' => $request->email,
                        'external_account' => [
                            'object' => 'bank_account',
                            'country' => 'US',
                            'currency' => 'usd',
                            'account_number' => $request->account_number,
                            'routing_number' => $request->routing_number, // IFSC code
                        ],
                    ]);
                }

                $account = DB::table('nurse_account')->where([
                    'worker_user_id' => $request->worker_user_id
                ])->update([
                    'worker_user_id' => $request->worker_user_id,
                    'acc_no' => $request->account_number,
                    'routing_no' => $request->routing_number,
                    'acc_holder_name' => $request->acc_holder_name,
                    'paypal_details' => $request->paypal_details,
                    'token_id' => isset($account->id)?$account->id:NULL,
                    'email' => $request->email,
                    'acc_type' => $acc_type
                ]);

                $this->check = "1";
                $this->message = "Bank Details Update successfully";

            } else {
                if(isset($request->paypal_details)){
                    $acc_type = '1';
                }else{
                    $acc_type = '0';
                    if(isset($request->account_number) && isset($request->routing_number) && isset($request->email)){
                        $account = \Stripe\Account::create([
                            'type' => 'standard',
                            'country' => 'US',
                            'email' => $request->email,
                            'external_account' => [
                                'object' => 'bank_account',
                                'country' => 'US',
                                'currency' => 'usd',
                                'account_number' => $request->account_number,
                                'routing_number' => $request->routing_number, // IFSC code
                            ],
                        ]);
                    }
                }

                $account = DB::table('nurse_account')->insert([
                    'worker_user_id' => $request->worker_user_id,
                    'acc_no' => $request->account_number,
                    'routing_no' => $request->routing_number,
                    'acc_holder_name' => $request->acc_holder_name,
                    'paypal_details' => $request->paypal_details,
                    'email' => $request->email,
                    'token_id' => isset($account->id)?$account->id:NULL,
                    'acc_type' => $acc_type
                ]);
                
                $this->check = "1";
                $this->message = "Account Created Successfully";
            }
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $account], 200);
    }

    public function send_money(Request $request)
    {
        \Stripe\Stripe::setApiKey(config('stripe.sk'));
        
        $validator = \Validator::make($request->all(), [
            'api_key' => 'required',
            'amount' => 'required',
            'id' => 'required'
        ]);
        if ($validator->fails()) {
            $this->message = $validator->errors()->first();
        } else {
            $transfer = \Stripe\Transfer::create([
                'amount' => $request->amount, // in paisa
                'currency' => 'usd',
                'destination' => $request->id, // the connected account ID
                'transfer_group' => 'ORDER_95', // a unique identifier for the transfer
            ]);
        }
        return response()->json(["api_status" => $this->check, "message" => $this->message, "data" => $transfer], 200);
    }


}
